// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: google/container/v1/cluster_service.proto

#ifndef PROTOBUF_INCLUDED_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto
#define PROTOBUF_INCLUDED_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "google/api/annotations.pb.h"
#include "google/api/client.pb.h"
#include "google/api/field_behavior.pb.h"
#include <google/protobuf/empty.pb.h>
#include <google/protobuf/timestamp.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[106]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto();
namespace google {
namespace container {
namespace v1 {
class AcceleratorConfig;
class AcceleratorConfigDefaultTypeInternal;
extern AcceleratorConfigDefaultTypeInternal _AcceleratorConfig_default_instance_;
class AddonsConfig;
class AddonsConfigDefaultTypeInternal;
extern AddonsConfigDefaultTypeInternal _AddonsConfig_default_instance_;
class AuthenticatorGroupsConfig;
class AuthenticatorGroupsConfigDefaultTypeInternal;
extern AuthenticatorGroupsConfigDefaultTypeInternal _AuthenticatorGroupsConfig_default_instance_;
class AutoUpgradeOptions;
class AutoUpgradeOptionsDefaultTypeInternal;
extern AutoUpgradeOptionsDefaultTypeInternal _AutoUpgradeOptions_default_instance_;
class AutoprovisioningNodePoolDefaults;
class AutoprovisioningNodePoolDefaultsDefaultTypeInternal;
extern AutoprovisioningNodePoolDefaultsDefaultTypeInternal _AutoprovisioningNodePoolDefaults_default_instance_;
class BinaryAuthorization;
class BinaryAuthorizationDefaultTypeInternal;
extern BinaryAuthorizationDefaultTypeInternal _BinaryAuthorization_default_instance_;
class CancelOperationRequest;
class CancelOperationRequestDefaultTypeInternal;
extern CancelOperationRequestDefaultTypeInternal _CancelOperationRequest_default_instance_;
class ClientCertificateConfig;
class ClientCertificateConfigDefaultTypeInternal;
extern ClientCertificateConfigDefaultTypeInternal _ClientCertificateConfig_default_instance_;
class CloudRunConfig;
class CloudRunConfigDefaultTypeInternal;
extern CloudRunConfigDefaultTypeInternal _CloudRunConfig_default_instance_;
class Cluster;
class ClusterDefaultTypeInternal;
extern ClusterDefaultTypeInternal _Cluster_default_instance_;
class ClusterAutoscaling;
class ClusterAutoscalingDefaultTypeInternal;
extern ClusterAutoscalingDefaultTypeInternal _ClusterAutoscaling_default_instance_;
class ClusterUpdate;
class ClusterUpdateDefaultTypeInternal;
extern ClusterUpdateDefaultTypeInternal _ClusterUpdate_default_instance_;
class Cluster_ResourceLabelsEntry_DoNotUse;
class Cluster_ResourceLabelsEntry_DoNotUseDefaultTypeInternal;
extern Cluster_ResourceLabelsEntry_DoNotUseDefaultTypeInternal _Cluster_ResourceLabelsEntry_DoNotUse_default_instance_;
class CompleteIPRotationRequest;
class CompleteIPRotationRequestDefaultTypeInternal;
extern CompleteIPRotationRequestDefaultTypeInternal _CompleteIPRotationRequest_default_instance_;
class ConfigConnectorConfig;
class ConfigConnectorConfigDefaultTypeInternal;
extern ConfigConnectorConfigDefaultTypeInternal _ConfigConnectorConfig_default_instance_;
class CreateClusterRequest;
class CreateClusterRequestDefaultTypeInternal;
extern CreateClusterRequestDefaultTypeInternal _CreateClusterRequest_default_instance_;
class CreateNodePoolRequest;
class CreateNodePoolRequestDefaultTypeInternal;
extern CreateNodePoolRequestDefaultTypeInternal _CreateNodePoolRequest_default_instance_;
class DailyMaintenanceWindow;
class DailyMaintenanceWindowDefaultTypeInternal;
extern DailyMaintenanceWindowDefaultTypeInternal _DailyMaintenanceWindow_default_instance_;
class DatabaseEncryption;
class DatabaseEncryptionDefaultTypeInternal;
extern DatabaseEncryptionDefaultTypeInternal _DatabaseEncryption_default_instance_;
class DefaultSnatStatus;
class DefaultSnatStatusDefaultTypeInternal;
extern DefaultSnatStatusDefaultTypeInternal _DefaultSnatStatus_default_instance_;
class DeleteClusterRequest;
class DeleteClusterRequestDefaultTypeInternal;
extern DeleteClusterRequestDefaultTypeInternal _DeleteClusterRequest_default_instance_;
class DeleteNodePoolRequest;
class DeleteNodePoolRequestDefaultTypeInternal;
extern DeleteNodePoolRequestDefaultTypeInternal _DeleteNodePoolRequest_default_instance_;
class DnsCacheConfig;
class DnsCacheConfigDefaultTypeInternal;
extern DnsCacheConfigDefaultTypeInternal _DnsCacheConfig_default_instance_;
class GetClusterRequest;
class GetClusterRequestDefaultTypeInternal;
extern GetClusterRequestDefaultTypeInternal _GetClusterRequest_default_instance_;
class GetJSONWebKeysRequest;
class GetJSONWebKeysRequestDefaultTypeInternal;
extern GetJSONWebKeysRequestDefaultTypeInternal _GetJSONWebKeysRequest_default_instance_;
class GetJSONWebKeysResponse;
class GetJSONWebKeysResponseDefaultTypeInternal;
extern GetJSONWebKeysResponseDefaultTypeInternal _GetJSONWebKeysResponse_default_instance_;
class GetNodePoolRequest;
class GetNodePoolRequestDefaultTypeInternal;
extern GetNodePoolRequestDefaultTypeInternal _GetNodePoolRequest_default_instance_;
class GetOpenIDConfigRequest;
class GetOpenIDConfigRequestDefaultTypeInternal;
extern GetOpenIDConfigRequestDefaultTypeInternal _GetOpenIDConfigRequest_default_instance_;
class GetOpenIDConfigResponse;
class GetOpenIDConfigResponseDefaultTypeInternal;
extern GetOpenIDConfigResponseDefaultTypeInternal _GetOpenIDConfigResponse_default_instance_;
class GetOperationRequest;
class GetOperationRequestDefaultTypeInternal;
extern GetOperationRequestDefaultTypeInternal _GetOperationRequest_default_instance_;
class GetServerConfigRequest;
class GetServerConfigRequestDefaultTypeInternal;
extern GetServerConfigRequestDefaultTypeInternal _GetServerConfigRequest_default_instance_;
class HorizontalPodAutoscaling;
class HorizontalPodAutoscalingDefaultTypeInternal;
extern HorizontalPodAutoscalingDefaultTypeInternal _HorizontalPodAutoscaling_default_instance_;
class HttpLoadBalancing;
class HttpLoadBalancingDefaultTypeInternal;
extern HttpLoadBalancingDefaultTypeInternal _HttpLoadBalancing_default_instance_;
class IPAllocationPolicy;
class IPAllocationPolicyDefaultTypeInternal;
extern IPAllocationPolicyDefaultTypeInternal _IPAllocationPolicy_default_instance_;
class IntraNodeVisibilityConfig;
class IntraNodeVisibilityConfigDefaultTypeInternal;
extern IntraNodeVisibilityConfigDefaultTypeInternal _IntraNodeVisibilityConfig_default_instance_;
class Jwk;
class JwkDefaultTypeInternal;
extern JwkDefaultTypeInternal _Jwk_default_instance_;
class KubernetesDashboard;
class KubernetesDashboardDefaultTypeInternal;
extern KubernetesDashboardDefaultTypeInternal _KubernetesDashboard_default_instance_;
class LegacyAbac;
class LegacyAbacDefaultTypeInternal;
extern LegacyAbacDefaultTypeInternal _LegacyAbac_default_instance_;
class ListClustersRequest;
class ListClustersRequestDefaultTypeInternal;
extern ListClustersRequestDefaultTypeInternal _ListClustersRequest_default_instance_;
class ListClustersResponse;
class ListClustersResponseDefaultTypeInternal;
extern ListClustersResponseDefaultTypeInternal _ListClustersResponse_default_instance_;
class ListNodePoolsRequest;
class ListNodePoolsRequestDefaultTypeInternal;
extern ListNodePoolsRequestDefaultTypeInternal _ListNodePoolsRequest_default_instance_;
class ListNodePoolsResponse;
class ListNodePoolsResponseDefaultTypeInternal;
extern ListNodePoolsResponseDefaultTypeInternal _ListNodePoolsResponse_default_instance_;
class ListOperationsRequest;
class ListOperationsRequestDefaultTypeInternal;
extern ListOperationsRequestDefaultTypeInternal _ListOperationsRequest_default_instance_;
class ListOperationsResponse;
class ListOperationsResponseDefaultTypeInternal;
extern ListOperationsResponseDefaultTypeInternal _ListOperationsResponse_default_instance_;
class ListUsableSubnetworksRequest;
class ListUsableSubnetworksRequestDefaultTypeInternal;
extern ListUsableSubnetworksRequestDefaultTypeInternal _ListUsableSubnetworksRequest_default_instance_;
class ListUsableSubnetworksResponse;
class ListUsableSubnetworksResponseDefaultTypeInternal;
extern ListUsableSubnetworksResponseDefaultTypeInternal _ListUsableSubnetworksResponse_default_instance_;
class MaintenancePolicy;
class MaintenancePolicyDefaultTypeInternal;
extern MaintenancePolicyDefaultTypeInternal _MaintenancePolicy_default_instance_;
class MaintenanceWindow;
class MaintenanceWindowDefaultTypeInternal;
extern MaintenanceWindowDefaultTypeInternal _MaintenanceWindow_default_instance_;
class MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse;
class MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUseDefaultTypeInternal;
extern MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUseDefaultTypeInternal _MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse_default_instance_;
class MasterAuth;
class MasterAuthDefaultTypeInternal;
extern MasterAuthDefaultTypeInternal _MasterAuth_default_instance_;
class MasterAuthorizedNetworksConfig;
class MasterAuthorizedNetworksConfigDefaultTypeInternal;
extern MasterAuthorizedNetworksConfigDefaultTypeInternal _MasterAuthorizedNetworksConfig_default_instance_;
class MasterAuthorizedNetworksConfig_CidrBlock;
class MasterAuthorizedNetworksConfig_CidrBlockDefaultTypeInternal;
extern MasterAuthorizedNetworksConfig_CidrBlockDefaultTypeInternal _MasterAuthorizedNetworksConfig_CidrBlock_default_instance_;
class MaxPodsConstraint;
class MaxPodsConstraintDefaultTypeInternal;
extern MaxPodsConstraintDefaultTypeInternal _MaxPodsConstraint_default_instance_;
class NetworkConfig;
class NetworkConfigDefaultTypeInternal;
extern NetworkConfigDefaultTypeInternal _NetworkConfig_default_instance_;
class NetworkPolicy;
class NetworkPolicyDefaultTypeInternal;
extern NetworkPolicyDefaultTypeInternal _NetworkPolicy_default_instance_;
class NetworkPolicyConfig;
class NetworkPolicyConfigDefaultTypeInternal;
extern NetworkPolicyConfigDefaultTypeInternal _NetworkPolicyConfig_default_instance_;
class NodeConfig;
class NodeConfigDefaultTypeInternal;
extern NodeConfigDefaultTypeInternal _NodeConfig_default_instance_;
class NodeConfig_LabelsEntry_DoNotUse;
class NodeConfig_LabelsEntry_DoNotUseDefaultTypeInternal;
extern NodeConfig_LabelsEntry_DoNotUseDefaultTypeInternal _NodeConfig_LabelsEntry_DoNotUse_default_instance_;
class NodeConfig_MetadataEntry_DoNotUse;
class NodeConfig_MetadataEntry_DoNotUseDefaultTypeInternal;
extern NodeConfig_MetadataEntry_DoNotUseDefaultTypeInternal _NodeConfig_MetadataEntry_DoNotUse_default_instance_;
class NodeManagement;
class NodeManagementDefaultTypeInternal;
extern NodeManagementDefaultTypeInternal _NodeManagement_default_instance_;
class NodePool;
class NodePoolDefaultTypeInternal;
extern NodePoolDefaultTypeInternal _NodePool_default_instance_;
class NodePoolAutoscaling;
class NodePoolAutoscalingDefaultTypeInternal;
extern NodePoolAutoscalingDefaultTypeInternal _NodePoolAutoscaling_default_instance_;
class NodePool_UpgradeSettings;
class NodePool_UpgradeSettingsDefaultTypeInternal;
extern NodePool_UpgradeSettingsDefaultTypeInternal _NodePool_UpgradeSettings_default_instance_;
class NodeTaint;
class NodeTaintDefaultTypeInternal;
extern NodeTaintDefaultTypeInternal _NodeTaint_default_instance_;
class Operation;
class OperationDefaultTypeInternal;
extern OperationDefaultTypeInternal _Operation_default_instance_;
class OperationProgress;
class OperationProgressDefaultTypeInternal;
extern OperationProgressDefaultTypeInternal _OperationProgress_default_instance_;
class OperationProgress_Metric;
class OperationProgress_MetricDefaultTypeInternal;
extern OperationProgress_MetricDefaultTypeInternal _OperationProgress_Metric_default_instance_;
class PrivateClusterConfig;
class PrivateClusterConfigDefaultTypeInternal;
extern PrivateClusterConfigDefaultTypeInternal _PrivateClusterConfig_default_instance_;
class PrivateClusterMasterGlobalAccessConfig;
class PrivateClusterMasterGlobalAccessConfigDefaultTypeInternal;
extern PrivateClusterMasterGlobalAccessConfigDefaultTypeInternal _PrivateClusterMasterGlobalAccessConfig_default_instance_;
class RecurringTimeWindow;
class RecurringTimeWindowDefaultTypeInternal;
extern RecurringTimeWindowDefaultTypeInternal _RecurringTimeWindow_default_instance_;
class ReleaseChannel;
class ReleaseChannelDefaultTypeInternal;
extern ReleaseChannelDefaultTypeInternal _ReleaseChannel_default_instance_;
class ReservationAffinity;
class ReservationAffinityDefaultTypeInternal;
extern ReservationAffinityDefaultTypeInternal _ReservationAffinity_default_instance_;
class ResourceLimit;
class ResourceLimitDefaultTypeInternal;
extern ResourceLimitDefaultTypeInternal _ResourceLimit_default_instance_;
class ResourceUsageExportConfig;
class ResourceUsageExportConfigDefaultTypeInternal;
extern ResourceUsageExportConfigDefaultTypeInternal _ResourceUsageExportConfig_default_instance_;
class ResourceUsageExportConfig_BigQueryDestination;
class ResourceUsageExportConfig_BigQueryDestinationDefaultTypeInternal;
extern ResourceUsageExportConfig_BigQueryDestinationDefaultTypeInternal _ResourceUsageExportConfig_BigQueryDestination_default_instance_;
class ResourceUsageExportConfig_ConsumptionMeteringConfig;
class ResourceUsageExportConfig_ConsumptionMeteringConfigDefaultTypeInternal;
extern ResourceUsageExportConfig_ConsumptionMeteringConfigDefaultTypeInternal _ResourceUsageExportConfig_ConsumptionMeteringConfig_default_instance_;
class RollbackNodePoolUpgradeRequest;
class RollbackNodePoolUpgradeRequestDefaultTypeInternal;
extern RollbackNodePoolUpgradeRequestDefaultTypeInternal _RollbackNodePoolUpgradeRequest_default_instance_;
class SandboxConfig;
class SandboxConfigDefaultTypeInternal;
extern SandboxConfigDefaultTypeInternal _SandboxConfig_default_instance_;
class ServerConfig;
class ServerConfigDefaultTypeInternal;
extern ServerConfigDefaultTypeInternal _ServerConfig_default_instance_;
class ServerConfig_ReleaseChannelConfig;
class ServerConfig_ReleaseChannelConfigDefaultTypeInternal;
extern ServerConfig_ReleaseChannelConfigDefaultTypeInternal _ServerConfig_ReleaseChannelConfig_default_instance_;
class SetAddonsConfigRequest;
class SetAddonsConfigRequestDefaultTypeInternal;
extern SetAddonsConfigRequestDefaultTypeInternal _SetAddonsConfigRequest_default_instance_;
class SetLabelsRequest;
class SetLabelsRequestDefaultTypeInternal;
extern SetLabelsRequestDefaultTypeInternal _SetLabelsRequest_default_instance_;
class SetLabelsRequest_ResourceLabelsEntry_DoNotUse;
class SetLabelsRequest_ResourceLabelsEntry_DoNotUseDefaultTypeInternal;
extern SetLabelsRequest_ResourceLabelsEntry_DoNotUseDefaultTypeInternal _SetLabelsRequest_ResourceLabelsEntry_DoNotUse_default_instance_;
class SetLegacyAbacRequest;
class SetLegacyAbacRequestDefaultTypeInternal;
extern SetLegacyAbacRequestDefaultTypeInternal _SetLegacyAbacRequest_default_instance_;
class SetLocationsRequest;
class SetLocationsRequestDefaultTypeInternal;
extern SetLocationsRequestDefaultTypeInternal _SetLocationsRequest_default_instance_;
class SetLoggingServiceRequest;
class SetLoggingServiceRequestDefaultTypeInternal;
extern SetLoggingServiceRequestDefaultTypeInternal _SetLoggingServiceRequest_default_instance_;
class SetMaintenancePolicyRequest;
class SetMaintenancePolicyRequestDefaultTypeInternal;
extern SetMaintenancePolicyRequestDefaultTypeInternal _SetMaintenancePolicyRequest_default_instance_;
class SetMasterAuthRequest;
class SetMasterAuthRequestDefaultTypeInternal;
extern SetMasterAuthRequestDefaultTypeInternal _SetMasterAuthRequest_default_instance_;
class SetMonitoringServiceRequest;
class SetMonitoringServiceRequestDefaultTypeInternal;
extern SetMonitoringServiceRequestDefaultTypeInternal _SetMonitoringServiceRequest_default_instance_;
class SetNetworkPolicyRequest;
class SetNetworkPolicyRequestDefaultTypeInternal;
extern SetNetworkPolicyRequestDefaultTypeInternal _SetNetworkPolicyRequest_default_instance_;
class SetNodePoolAutoscalingRequest;
class SetNodePoolAutoscalingRequestDefaultTypeInternal;
extern SetNodePoolAutoscalingRequestDefaultTypeInternal _SetNodePoolAutoscalingRequest_default_instance_;
class SetNodePoolManagementRequest;
class SetNodePoolManagementRequestDefaultTypeInternal;
extern SetNodePoolManagementRequestDefaultTypeInternal _SetNodePoolManagementRequest_default_instance_;
class SetNodePoolSizeRequest;
class SetNodePoolSizeRequestDefaultTypeInternal;
extern SetNodePoolSizeRequestDefaultTypeInternal _SetNodePoolSizeRequest_default_instance_;
class ShieldedInstanceConfig;
class ShieldedInstanceConfigDefaultTypeInternal;
extern ShieldedInstanceConfigDefaultTypeInternal _ShieldedInstanceConfig_default_instance_;
class ShieldedNodes;
class ShieldedNodesDefaultTypeInternal;
extern ShieldedNodesDefaultTypeInternal _ShieldedNodes_default_instance_;
class StartIPRotationRequest;
class StartIPRotationRequestDefaultTypeInternal;
extern StartIPRotationRequestDefaultTypeInternal _StartIPRotationRequest_default_instance_;
class StatusCondition;
class StatusConditionDefaultTypeInternal;
extern StatusConditionDefaultTypeInternal _StatusCondition_default_instance_;
class TimeWindow;
class TimeWindowDefaultTypeInternal;
extern TimeWindowDefaultTypeInternal _TimeWindow_default_instance_;
class UpdateClusterRequest;
class UpdateClusterRequestDefaultTypeInternal;
extern UpdateClusterRequestDefaultTypeInternal _UpdateClusterRequest_default_instance_;
class UpdateMasterRequest;
class UpdateMasterRequestDefaultTypeInternal;
extern UpdateMasterRequestDefaultTypeInternal _UpdateMasterRequest_default_instance_;
class UpdateNodePoolRequest;
class UpdateNodePoolRequestDefaultTypeInternal;
extern UpdateNodePoolRequestDefaultTypeInternal _UpdateNodePoolRequest_default_instance_;
class UsableSubnetwork;
class UsableSubnetworkDefaultTypeInternal;
extern UsableSubnetworkDefaultTypeInternal _UsableSubnetwork_default_instance_;
class UsableSubnetworkSecondaryRange;
class UsableSubnetworkSecondaryRangeDefaultTypeInternal;
extern UsableSubnetworkSecondaryRangeDefaultTypeInternal _UsableSubnetworkSecondaryRange_default_instance_;
class VerticalPodAutoscaling;
class VerticalPodAutoscalingDefaultTypeInternal;
extern VerticalPodAutoscalingDefaultTypeInternal _VerticalPodAutoscaling_default_instance_;
class WorkloadIdentityConfig;
class WorkloadIdentityConfigDefaultTypeInternal;
extern WorkloadIdentityConfigDefaultTypeInternal _WorkloadIdentityConfig_default_instance_;
class WorkloadMetadataConfig;
class WorkloadMetadataConfigDefaultTypeInternal;
extern WorkloadMetadataConfigDefaultTypeInternal _WorkloadMetadataConfig_default_instance_;
}  // namespace v1
}  // namespace container
namespace protobuf {
template<> ::google::container::v1::AcceleratorConfig* Arena::CreateMaybeMessage<::google::container::v1::AcceleratorConfig>(Arena*);
template<> ::google::container::v1::AddonsConfig* Arena::CreateMaybeMessage<::google::container::v1::AddonsConfig>(Arena*);
template<> ::google::container::v1::AuthenticatorGroupsConfig* Arena::CreateMaybeMessage<::google::container::v1::AuthenticatorGroupsConfig>(Arena*);
template<> ::google::container::v1::AutoUpgradeOptions* Arena::CreateMaybeMessage<::google::container::v1::AutoUpgradeOptions>(Arena*);
template<> ::google::container::v1::AutoprovisioningNodePoolDefaults* Arena::CreateMaybeMessage<::google::container::v1::AutoprovisioningNodePoolDefaults>(Arena*);
template<> ::google::container::v1::BinaryAuthorization* Arena::CreateMaybeMessage<::google::container::v1::BinaryAuthorization>(Arena*);
template<> ::google::container::v1::CancelOperationRequest* Arena::CreateMaybeMessage<::google::container::v1::CancelOperationRequest>(Arena*);
template<> ::google::container::v1::ClientCertificateConfig* Arena::CreateMaybeMessage<::google::container::v1::ClientCertificateConfig>(Arena*);
template<> ::google::container::v1::CloudRunConfig* Arena::CreateMaybeMessage<::google::container::v1::CloudRunConfig>(Arena*);
template<> ::google::container::v1::Cluster* Arena::CreateMaybeMessage<::google::container::v1::Cluster>(Arena*);
template<> ::google::container::v1::ClusterAutoscaling* Arena::CreateMaybeMessage<::google::container::v1::ClusterAutoscaling>(Arena*);
template<> ::google::container::v1::ClusterUpdate* Arena::CreateMaybeMessage<::google::container::v1::ClusterUpdate>(Arena*);
template<> ::google::container::v1::Cluster_ResourceLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::container::v1::Cluster_ResourceLabelsEntry_DoNotUse>(Arena*);
template<> ::google::container::v1::CompleteIPRotationRequest* Arena::CreateMaybeMessage<::google::container::v1::CompleteIPRotationRequest>(Arena*);
template<> ::google::container::v1::ConfigConnectorConfig* Arena::CreateMaybeMessage<::google::container::v1::ConfigConnectorConfig>(Arena*);
template<> ::google::container::v1::CreateClusterRequest* Arena::CreateMaybeMessage<::google::container::v1::CreateClusterRequest>(Arena*);
template<> ::google::container::v1::CreateNodePoolRequest* Arena::CreateMaybeMessage<::google::container::v1::CreateNodePoolRequest>(Arena*);
template<> ::google::container::v1::DailyMaintenanceWindow* Arena::CreateMaybeMessage<::google::container::v1::DailyMaintenanceWindow>(Arena*);
template<> ::google::container::v1::DatabaseEncryption* Arena::CreateMaybeMessage<::google::container::v1::DatabaseEncryption>(Arena*);
template<> ::google::container::v1::DefaultSnatStatus* Arena::CreateMaybeMessage<::google::container::v1::DefaultSnatStatus>(Arena*);
template<> ::google::container::v1::DeleteClusterRequest* Arena::CreateMaybeMessage<::google::container::v1::DeleteClusterRequest>(Arena*);
template<> ::google::container::v1::DeleteNodePoolRequest* Arena::CreateMaybeMessage<::google::container::v1::DeleteNodePoolRequest>(Arena*);
template<> ::google::container::v1::DnsCacheConfig* Arena::CreateMaybeMessage<::google::container::v1::DnsCacheConfig>(Arena*);
template<> ::google::container::v1::GetClusterRequest* Arena::CreateMaybeMessage<::google::container::v1::GetClusterRequest>(Arena*);
template<> ::google::container::v1::GetJSONWebKeysRequest* Arena::CreateMaybeMessage<::google::container::v1::GetJSONWebKeysRequest>(Arena*);
template<> ::google::container::v1::GetJSONWebKeysResponse* Arena::CreateMaybeMessage<::google::container::v1::GetJSONWebKeysResponse>(Arena*);
template<> ::google::container::v1::GetNodePoolRequest* Arena::CreateMaybeMessage<::google::container::v1::GetNodePoolRequest>(Arena*);
template<> ::google::container::v1::GetOpenIDConfigRequest* Arena::CreateMaybeMessage<::google::container::v1::GetOpenIDConfigRequest>(Arena*);
template<> ::google::container::v1::GetOpenIDConfigResponse* Arena::CreateMaybeMessage<::google::container::v1::GetOpenIDConfigResponse>(Arena*);
template<> ::google::container::v1::GetOperationRequest* Arena::CreateMaybeMessage<::google::container::v1::GetOperationRequest>(Arena*);
template<> ::google::container::v1::GetServerConfigRequest* Arena::CreateMaybeMessage<::google::container::v1::GetServerConfigRequest>(Arena*);
template<> ::google::container::v1::HorizontalPodAutoscaling* Arena::CreateMaybeMessage<::google::container::v1::HorizontalPodAutoscaling>(Arena*);
template<> ::google::container::v1::HttpLoadBalancing* Arena::CreateMaybeMessage<::google::container::v1::HttpLoadBalancing>(Arena*);
template<> ::google::container::v1::IPAllocationPolicy* Arena::CreateMaybeMessage<::google::container::v1::IPAllocationPolicy>(Arena*);
template<> ::google::container::v1::IntraNodeVisibilityConfig* Arena::CreateMaybeMessage<::google::container::v1::IntraNodeVisibilityConfig>(Arena*);
template<> ::google::container::v1::Jwk* Arena::CreateMaybeMessage<::google::container::v1::Jwk>(Arena*);
template<> ::google::container::v1::KubernetesDashboard* Arena::CreateMaybeMessage<::google::container::v1::KubernetesDashboard>(Arena*);
template<> ::google::container::v1::LegacyAbac* Arena::CreateMaybeMessage<::google::container::v1::LegacyAbac>(Arena*);
template<> ::google::container::v1::ListClustersRequest* Arena::CreateMaybeMessage<::google::container::v1::ListClustersRequest>(Arena*);
template<> ::google::container::v1::ListClustersResponse* Arena::CreateMaybeMessage<::google::container::v1::ListClustersResponse>(Arena*);
template<> ::google::container::v1::ListNodePoolsRequest* Arena::CreateMaybeMessage<::google::container::v1::ListNodePoolsRequest>(Arena*);
template<> ::google::container::v1::ListNodePoolsResponse* Arena::CreateMaybeMessage<::google::container::v1::ListNodePoolsResponse>(Arena*);
template<> ::google::container::v1::ListOperationsRequest* Arena::CreateMaybeMessage<::google::container::v1::ListOperationsRequest>(Arena*);
template<> ::google::container::v1::ListOperationsResponse* Arena::CreateMaybeMessage<::google::container::v1::ListOperationsResponse>(Arena*);
template<> ::google::container::v1::ListUsableSubnetworksRequest* Arena::CreateMaybeMessage<::google::container::v1::ListUsableSubnetworksRequest>(Arena*);
template<> ::google::container::v1::ListUsableSubnetworksResponse* Arena::CreateMaybeMessage<::google::container::v1::ListUsableSubnetworksResponse>(Arena*);
template<> ::google::container::v1::MaintenancePolicy* Arena::CreateMaybeMessage<::google::container::v1::MaintenancePolicy>(Arena*);
template<> ::google::container::v1::MaintenanceWindow* Arena::CreateMaybeMessage<::google::container::v1::MaintenanceWindow>(Arena*);
template<> ::google::container::v1::MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::container::v1::MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse>(Arena*);
template<> ::google::container::v1::MasterAuth* Arena::CreateMaybeMessage<::google::container::v1::MasterAuth>(Arena*);
template<> ::google::container::v1::MasterAuthorizedNetworksConfig* Arena::CreateMaybeMessage<::google::container::v1::MasterAuthorizedNetworksConfig>(Arena*);
template<> ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* Arena::CreateMaybeMessage<::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock>(Arena*);
template<> ::google::container::v1::MaxPodsConstraint* Arena::CreateMaybeMessage<::google::container::v1::MaxPodsConstraint>(Arena*);
template<> ::google::container::v1::NetworkConfig* Arena::CreateMaybeMessage<::google::container::v1::NetworkConfig>(Arena*);
template<> ::google::container::v1::NetworkPolicy* Arena::CreateMaybeMessage<::google::container::v1::NetworkPolicy>(Arena*);
template<> ::google::container::v1::NetworkPolicyConfig* Arena::CreateMaybeMessage<::google::container::v1::NetworkPolicyConfig>(Arena*);
template<> ::google::container::v1::NodeConfig* Arena::CreateMaybeMessage<::google::container::v1::NodeConfig>(Arena*);
template<> ::google::container::v1::NodeConfig_LabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::container::v1::NodeConfig_LabelsEntry_DoNotUse>(Arena*);
template<> ::google::container::v1::NodeConfig_MetadataEntry_DoNotUse* Arena::CreateMaybeMessage<::google::container::v1::NodeConfig_MetadataEntry_DoNotUse>(Arena*);
template<> ::google::container::v1::NodeManagement* Arena::CreateMaybeMessage<::google::container::v1::NodeManagement>(Arena*);
template<> ::google::container::v1::NodePool* Arena::CreateMaybeMessage<::google::container::v1::NodePool>(Arena*);
template<> ::google::container::v1::NodePoolAutoscaling* Arena::CreateMaybeMessage<::google::container::v1::NodePoolAutoscaling>(Arena*);
template<> ::google::container::v1::NodePool_UpgradeSettings* Arena::CreateMaybeMessage<::google::container::v1::NodePool_UpgradeSettings>(Arena*);
template<> ::google::container::v1::NodeTaint* Arena::CreateMaybeMessage<::google::container::v1::NodeTaint>(Arena*);
template<> ::google::container::v1::Operation* Arena::CreateMaybeMessage<::google::container::v1::Operation>(Arena*);
template<> ::google::container::v1::OperationProgress* Arena::CreateMaybeMessage<::google::container::v1::OperationProgress>(Arena*);
template<> ::google::container::v1::OperationProgress_Metric* Arena::CreateMaybeMessage<::google::container::v1::OperationProgress_Metric>(Arena*);
template<> ::google::container::v1::PrivateClusterConfig* Arena::CreateMaybeMessage<::google::container::v1::PrivateClusterConfig>(Arena*);
template<> ::google::container::v1::PrivateClusterMasterGlobalAccessConfig* Arena::CreateMaybeMessage<::google::container::v1::PrivateClusterMasterGlobalAccessConfig>(Arena*);
template<> ::google::container::v1::RecurringTimeWindow* Arena::CreateMaybeMessage<::google::container::v1::RecurringTimeWindow>(Arena*);
template<> ::google::container::v1::ReleaseChannel* Arena::CreateMaybeMessage<::google::container::v1::ReleaseChannel>(Arena*);
template<> ::google::container::v1::ReservationAffinity* Arena::CreateMaybeMessage<::google::container::v1::ReservationAffinity>(Arena*);
template<> ::google::container::v1::ResourceLimit* Arena::CreateMaybeMessage<::google::container::v1::ResourceLimit>(Arena*);
template<> ::google::container::v1::ResourceUsageExportConfig* Arena::CreateMaybeMessage<::google::container::v1::ResourceUsageExportConfig>(Arena*);
template<> ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* Arena::CreateMaybeMessage<::google::container::v1::ResourceUsageExportConfig_BigQueryDestination>(Arena*);
template<> ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* Arena::CreateMaybeMessage<::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig>(Arena*);
template<> ::google::container::v1::RollbackNodePoolUpgradeRequest* Arena::CreateMaybeMessage<::google::container::v1::RollbackNodePoolUpgradeRequest>(Arena*);
template<> ::google::container::v1::SandboxConfig* Arena::CreateMaybeMessage<::google::container::v1::SandboxConfig>(Arena*);
template<> ::google::container::v1::ServerConfig* Arena::CreateMaybeMessage<::google::container::v1::ServerConfig>(Arena*);
template<> ::google::container::v1::ServerConfig_ReleaseChannelConfig* Arena::CreateMaybeMessage<::google::container::v1::ServerConfig_ReleaseChannelConfig>(Arena*);
template<> ::google::container::v1::SetAddonsConfigRequest* Arena::CreateMaybeMessage<::google::container::v1::SetAddonsConfigRequest>(Arena*);
template<> ::google::container::v1::SetLabelsRequest* Arena::CreateMaybeMessage<::google::container::v1::SetLabelsRequest>(Arena*);
template<> ::google::container::v1::SetLabelsRequest_ResourceLabelsEntry_DoNotUse* Arena::CreateMaybeMessage<::google::container::v1::SetLabelsRequest_ResourceLabelsEntry_DoNotUse>(Arena*);
template<> ::google::container::v1::SetLegacyAbacRequest* Arena::CreateMaybeMessage<::google::container::v1::SetLegacyAbacRequest>(Arena*);
template<> ::google::container::v1::SetLocationsRequest* Arena::CreateMaybeMessage<::google::container::v1::SetLocationsRequest>(Arena*);
template<> ::google::container::v1::SetLoggingServiceRequest* Arena::CreateMaybeMessage<::google::container::v1::SetLoggingServiceRequest>(Arena*);
template<> ::google::container::v1::SetMaintenancePolicyRequest* Arena::CreateMaybeMessage<::google::container::v1::SetMaintenancePolicyRequest>(Arena*);
template<> ::google::container::v1::SetMasterAuthRequest* Arena::CreateMaybeMessage<::google::container::v1::SetMasterAuthRequest>(Arena*);
template<> ::google::container::v1::SetMonitoringServiceRequest* Arena::CreateMaybeMessage<::google::container::v1::SetMonitoringServiceRequest>(Arena*);
template<> ::google::container::v1::SetNetworkPolicyRequest* Arena::CreateMaybeMessage<::google::container::v1::SetNetworkPolicyRequest>(Arena*);
template<> ::google::container::v1::SetNodePoolAutoscalingRequest* Arena::CreateMaybeMessage<::google::container::v1::SetNodePoolAutoscalingRequest>(Arena*);
template<> ::google::container::v1::SetNodePoolManagementRequest* Arena::CreateMaybeMessage<::google::container::v1::SetNodePoolManagementRequest>(Arena*);
template<> ::google::container::v1::SetNodePoolSizeRequest* Arena::CreateMaybeMessage<::google::container::v1::SetNodePoolSizeRequest>(Arena*);
template<> ::google::container::v1::ShieldedInstanceConfig* Arena::CreateMaybeMessage<::google::container::v1::ShieldedInstanceConfig>(Arena*);
template<> ::google::container::v1::ShieldedNodes* Arena::CreateMaybeMessage<::google::container::v1::ShieldedNodes>(Arena*);
template<> ::google::container::v1::StartIPRotationRequest* Arena::CreateMaybeMessage<::google::container::v1::StartIPRotationRequest>(Arena*);
template<> ::google::container::v1::StatusCondition* Arena::CreateMaybeMessage<::google::container::v1::StatusCondition>(Arena*);
template<> ::google::container::v1::TimeWindow* Arena::CreateMaybeMessage<::google::container::v1::TimeWindow>(Arena*);
template<> ::google::container::v1::UpdateClusterRequest* Arena::CreateMaybeMessage<::google::container::v1::UpdateClusterRequest>(Arena*);
template<> ::google::container::v1::UpdateMasterRequest* Arena::CreateMaybeMessage<::google::container::v1::UpdateMasterRequest>(Arena*);
template<> ::google::container::v1::UpdateNodePoolRequest* Arena::CreateMaybeMessage<::google::container::v1::UpdateNodePoolRequest>(Arena*);
template<> ::google::container::v1::UsableSubnetwork* Arena::CreateMaybeMessage<::google::container::v1::UsableSubnetwork>(Arena*);
template<> ::google::container::v1::UsableSubnetworkSecondaryRange* Arena::CreateMaybeMessage<::google::container::v1::UsableSubnetworkSecondaryRange>(Arena*);
template<> ::google::container::v1::VerticalPodAutoscaling* Arena::CreateMaybeMessage<::google::container::v1::VerticalPodAutoscaling>(Arena*);
template<> ::google::container::v1::WorkloadIdentityConfig* Arena::CreateMaybeMessage<::google::container::v1::WorkloadIdentityConfig>(Arena*);
template<> ::google::container::v1::WorkloadMetadataConfig* Arena::CreateMaybeMessage<::google::container::v1::WorkloadMetadataConfig>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace container {
namespace v1 {

enum SandboxConfig_Type {
  SandboxConfig_Type_UNSPECIFIED = 0,
  SandboxConfig_Type_GVISOR = 1,
  SandboxConfig_Type_SandboxConfig_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SandboxConfig_Type_SandboxConfig_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SandboxConfig_Type_IsValid(int value);
const SandboxConfig_Type SandboxConfig_Type_Type_MIN = SandboxConfig_Type_UNSPECIFIED;
const SandboxConfig_Type SandboxConfig_Type_Type_MAX = SandboxConfig_Type_GVISOR;
const int SandboxConfig_Type_Type_ARRAYSIZE = SandboxConfig_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* SandboxConfig_Type_descriptor();
inline const ::std::string& SandboxConfig_Type_Name(SandboxConfig_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    SandboxConfig_Type_descriptor(), value);
}
inline bool SandboxConfig_Type_Parse(
    const ::std::string& name, SandboxConfig_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SandboxConfig_Type>(
    SandboxConfig_Type_descriptor(), name, value);
}
enum ReservationAffinity_Type {
  ReservationAffinity_Type_UNSPECIFIED = 0,
  ReservationAffinity_Type_NO_RESERVATION = 1,
  ReservationAffinity_Type_ANY_RESERVATION = 2,
  ReservationAffinity_Type_SPECIFIC_RESERVATION = 3,
  ReservationAffinity_Type_ReservationAffinity_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ReservationAffinity_Type_ReservationAffinity_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ReservationAffinity_Type_IsValid(int value);
const ReservationAffinity_Type ReservationAffinity_Type_Type_MIN = ReservationAffinity_Type_UNSPECIFIED;
const ReservationAffinity_Type ReservationAffinity_Type_Type_MAX = ReservationAffinity_Type_SPECIFIC_RESERVATION;
const int ReservationAffinity_Type_Type_ARRAYSIZE = ReservationAffinity_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReservationAffinity_Type_descriptor();
inline const ::std::string& ReservationAffinity_Type_Name(ReservationAffinity_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReservationAffinity_Type_descriptor(), value);
}
inline bool ReservationAffinity_Type_Parse(
    const ::std::string& name, ReservationAffinity_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReservationAffinity_Type>(
    ReservationAffinity_Type_descriptor(), name, value);
}
enum NodeTaint_Effect {
  NodeTaint_Effect_EFFECT_UNSPECIFIED = 0,
  NodeTaint_Effect_NO_SCHEDULE = 1,
  NodeTaint_Effect_PREFER_NO_SCHEDULE = 2,
  NodeTaint_Effect_NO_EXECUTE = 3,
  NodeTaint_Effect_NodeTaint_Effect_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  NodeTaint_Effect_NodeTaint_Effect_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool NodeTaint_Effect_IsValid(int value);
const NodeTaint_Effect NodeTaint_Effect_Effect_MIN = NodeTaint_Effect_EFFECT_UNSPECIFIED;
const NodeTaint_Effect NodeTaint_Effect_Effect_MAX = NodeTaint_Effect_NO_EXECUTE;
const int NodeTaint_Effect_Effect_ARRAYSIZE = NodeTaint_Effect_Effect_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeTaint_Effect_descriptor();
inline const ::std::string& NodeTaint_Effect_Name(NodeTaint_Effect value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeTaint_Effect_descriptor(), value);
}
inline bool NodeTaint_Effect_Parse(
    const ::std::string& name, NodeTaint_Effect* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeTaint_Effect>(
    NodeTaint_Effect_descriptor(), name, value);
}
enum CloudRunConfig_LoadBalancerType {
  CloudRunConfig_LoadBalancerType_LOAD_BALANCER_TYPE_UNSPECIFIED = 0,
  CloudRunConfig_LoadBalancerType_LOAD_BALANCER_TYPE_EXTERNAL = 1,
  CloudRunConfig_LoadBalancerType_LOAD_BALANCER_TYPE_INTERNAL = 2,
  CloudRunConfig_LoadBalancerType_CloudRunConfig_LoadBalancerType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  CloudRunConfig_LoadBalancerType_CloudRunConfig_LoadBalancerType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool CloudRunConfig_LoadBalancerType_IsValid(int value);
const CloudRunConfig_LoadBalancerType CloudRunConfig_LoadBalancerType_LoadBalancerType_MIN = CloudRunConfig_LoadBalancerType_LOAD_BALANCER_TYPE_UNSPECIFIED;
const CloudRunConfig_LoadBalancerType CloudRunConfig_LoadBalancerType_LoadBalancerType_MAX = CloudRunConfig_LoadBalancerType_LOAD_BALANCER_TYPE_INTERNAL;
const int CloudRunConfig_LoadBalancerType_LoadBalancerType_ARRAYSIZE = CloudRunConfig_LoadBalancerType_LoadBalancerType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CloudRunConfig_LoadBalancerType_descriptor();
inline const ::std::string& CloudRunConfig_LoadBalancerType_Name(CloudRunConfig_LoadBalancerType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CloudRunConfig_LoadBalancerType_descriptor(), value);
}
inline bool CloudRunConfig_LoadBalancerType_Parse(
    const ::std::string& name, CloudRunConfig_LoadBalancerType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CloudRunConfig_LoadBalancerType>(
    CloudRunConfig_LoadBalancerType_descriptor(), name, value);
}
enum NetworkPolicy_Provider {
  NetworkPolicy_Provider_PROVIDER_UNSPECIFIED = 0,
  NetworkPolicy_Provider_CALICO = 1,
  NetworkPolicy_Provider_NetworkPolicy_Provider_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  NetworkPolicy_Provider_NetworkPolicy_Provider_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool NetworkPolicy_Provider_IsValid(int value);
const NetworkPolicy_Provider NetworkPolicy_Provider_Provider_MIN = NetworkPolicy_Provider_PROVIDER_UNSPECIFIED;
const NetworkPolicy_Provider NetworkPolicy_Provider_Provider_MAX = NetworkPolicy_Provider_CALICO;
const int NetworkPolicy_Provider_Provider_ARRAYSIZE = NetworkPolicy_Provider_Provider_MAX + 1;

const ::google::protobuf::EnumDescriptor* NetworkPolicy_Provider_descriptor();
inline const ::std::string& NetworkPolicy_Provider_Name(NetworkPolicy_Provider value) {
  return ::google::protobuf::internal::NameOfEnum(
    NetworkPolicy_Provider_descriptor(), value);
}
inline bool NetworkPolicy_Provider_Parse(
    const ::std::string& name, NetworkPolicy_Provider* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NetworkPolicy_Provider>(
    NetworkPolicy_Provider_descriptor(), name, value);
}
enum Cluster_Status {
  Cluster_Status_STATUS_UNSPECIFIED = 0,
  Cluster_Status_PROVISIONING = 1,
  Cluster_Status_RUNNING = 2,
  Cluster_Status_RECONCILING = 3,
  Cluster_Status_STOPPING = 4,
  Cluster_Status_ERROR = 5,
  Cluster_Status_DEGRADED = 6,
  Cluster_Status_Cluster_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Cluster_Status_Cluster_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Cluster_Status_IsValid(int value);
const Cluster_Status Cluster_Status_Status_MIN = Cluster_Status_STATUS_UNSPECIFIED;
const Cluster_Status Cluster_Status_Status_MAX = Cluster_Status_DEGRADED;
const int Cluster_Status_Status_ARRAYSIZE = Cluster_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Cluster_Status_descriptor();
inline const ::std::string& Cluster_Status_Name(Cluster_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Cluster_Status_descriptor(), value);
}
inline bool Cluster_Status_Parse(
    const ::std::string& name, Cluster_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Cluster_Status>(
    Cluster_Status_descriptor(), name, value);
}
enum Operation_Status {
  Operation_Status_STATUS_UNSPECIFIED = 0,
  Operation_Status_PENDING = 1,
  Operation_Status_RUNNING = 2,
  Operation_Status_DONE = 3,
  Operation_Status_ABORTING = 4,
  Operation_Status_Operation_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Operation_Status_Operation_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Operation_Status_IsValid(int value);
const Operation_Status Operation_Status_Status_MIN = Operation_Status_STATUS_UNSPECIFIED;
const Operation_Status Operation_Status_Status_MAX = Operation_Status_ABORTING;
const int Operation_Status_Status_ARRAYSIZE = Operation_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Status_descriptor();
inline const ::std::string& Operation_Status_Name(Operation_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Status_descriptor(), value);
}
inline bool Operation_Status_Parse(
    const ::std::string& name, Operation_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Status>(
    Operation_Status_descriptor(), name, value);
}
enum Operation_Type {
  Operation_Type_TYPE_UNSPECIFIED = 0,
  Operation_Type_CREATE_CLUSTER = 1,
  Operation_Type_DELETE_CLUSTER = 2,
  Operation_Type_UPGRADE_MASTER = 3,
  Operation_Type_UPGRADE_NODES = 4,
  Operation_Type_REPAIR_CLUSTER = 5,
  Operation_Type_UPDATE_CLUSTER = 6,
  Operation_Type_CREATE_NODE_POOL = 7,
  Operation_Type_DELETE_NODE_POOL = 8,
  Operation_Type_SET_NODE_POOL_MANAGEMENT = 9,
  Operation_Type_AUTO_REPAIR_NODES = 10,
  Operation_Type_AUTO_UPGRADE_NODES = 11,
  Operation_Type_SET_LABELS = 12,
  Operation_Type_SET_MASTER_AUTH = 13,
  Operation_Type_SET_NODE_POOL_SIZE = 14,
  Operation_Type_SET_NETWORK_POLICY = 15,
  Operation_Type_SET_MAINTENANCE_POLICY = 16,
  Operation_Type_Operation_Type_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  Operation_Type_Operation_Type_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool Operation_Type_IsValid(int value);
const Operation_Type Operation_Type_Type_MIN = Operation_Type_TYPE_UNSPECIFIED;
const Operation_Type Operation_Type_Type_MAX = Operation_Type_SET_MAINTENANCE_POLICY;
const int Operation_Type_Type_ARRAYSIZE = Operation_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* Operation_Type_descriptor();
inline const ::std::string& Operation_Type_Name(Operation_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    Operation_Type_descriptor(), value);
}
inline bool Operation_Type_Parse(
    const ::std::string& name, Operation_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Operation_Type>(
    Operation_Type_descriptor(), name, value);
}
enum SetMasterAuthRequest_Action {
  SetMasterAuthRequest_Action_UNKNOWN = 0,
  SetMasterAuthRequest_Action_SET_PASSWORD = 1,
  SetMasterAuthRequest_Action_GENERATE_PASSWORD = 2,
  SetMasterAuthRequest_Action_SET_USERNAME = 3,
  SetMasterAuthRequest_Action_SetMasterAuthRequest_Action_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  SetMasterAuthRequest_Action_SetMasterAuthRequest_Action_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool SetMasterAuthRequest_Action_IsValid(int value);
const SetMasterAuthRequest_Action SetMasterAuthRequest_Action_Action_MIN = SetMasterAuthRequest_Action_UNKNOWN;
const SetMasterAuthRequest_Action SetMasterAuthRequest_Action_Action_MAX = SetMasterAuthRequest_Action_SET_USERNAME;
const int SetMasterAuthRequest_Action_Action_ARRAYSIZE = SetMasterAuthRequest_Action_Action_MAX + 1;

const ::google::protobuf::EnumDescriptor* SetMasterAuthRequest_Action_descriptor();
inline const ::std::string& SetMasterAuthRequest_Action_Name(SetMasterAuthRequest_Action value) {
  return ::google::protobuf::internal::NameOfEnum(
    SetMasterAuthRequest_Action_descriptor(), value);
}
inline bool SetMasterAuthRequest_Action_Parse(
    const ::std::string& name, SetMasterAuthRequest_Action* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SetMasterAuthRequest_Action>(
    SetMasterAuthRequest_Action_descriptor(), name, value);
}
enum NodePool_Status {
  NodePool_Status_STATUS_UNSPECIFIED = 0,
  NodePool_Status_PROVISIONING = 1,
  NodePool_Status_RUNNING = 2,
  NodePool_Status_RUNNING_WITH_ERROR = 3,
  NodePool_Status_RECONCILING = 4,
  NodePool_Status_STOPPING = 5,
  NodePool_Status_ERROR = 6,
  NodePool_Status_NodePool_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  NodePool_Status_NodePool_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool NodePool_Status_IsValid(int value);
const NodePool_Status NodePool_Status_Status_MIN = NodePool_Status_STATUS_UNSPECIFIED;
const NodePool_Status NodePool_Status_Status_MAX = NodePool_Status_ERROR;
const int NodePool_Status_Status_ARRAYSIZE = NodePool_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodePool_Status_descriptor();
inline const ::std::string& NodePool_Status_Name(NodePool_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodePool_Status_descriptor(), value);
}
inline bool NodePool_Status_Parse(
    const ::std::string& name, NodePool_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodePool_Status>(
    NodePool_Status_descriptor(), name, value);
}
enum WorkloadMetadataConfig_Mode {
  WorkloadMetadataConfig_Mode_MODE_UNSPECIFIED = 0,
  WorkloadMetadataConfig_Mode_GCE_METADATA = 1,
  WorkloadMetadataConfig_Mode_GKE_METADATA = 2,
  WorkloadMetadataConfig_Mode_WorkloadMetadataConfig_Mode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  WorkloadMetadataConfig_Mode_WorkloadMetadataConfig_Mode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool WorkloadMetadataConfig_Mode_IsValid(int value);
const WorkloadMetadataConfig_Mode WorkloadMetadataConfig_Mode_Mode_MIN = WorkloadMetadataConfig_Mode_MODE_UNSPECIFIED;
const WorkloadMetadataConfig_Mode WorkloadMetadataConfig_Mode_Mode_MAX = WorkloadMetadataConfig_Mode_GKE_METADATA;
const int WorkloadMetadataConfig_Mode_Mode_ARRAYSIZE = WorkloadMetadataConfig_Mode_Mode_MAX + 1;

const ::google::protobuf::EnumDescriptor* WorkloadMetadataConfig_Mode_descriptor();
inline const ::std::string& WorkloadMetadataConfig_Mode_Name(WorkloadMetadataConfig_Mode value) {
  return ::google::protobuf::internal::NameOfEnum(
    WorkloadMetadataConfig_Mode_descriptor(), value);
}
inline bool WorkloadMetadataConfig_Mode_Parse(
    const ::std::string& name, WorkloadMetadataConfig_Mode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<WorkloadMetadataConfig_Mode>(
    WorkloadMetadataConfig_Mode_descriptor(), name, value);
}
enum StatusCondition_Code {
  StatusCondition_Code_UNKNOWN = 0,
  StatusCondition_Code_GCE_STOCKOUT = 1,
  StatusCondition_Code_GKE_SERVICE_ACCOUNT_DELETED = 2,
  StatusCondition_Code_GCE_QUOTA_EXCEEDED = 3,
  StatusCondition_Code_SET_BY_OPERATOR = 4,
  StatusCondition_Code_CLOUD_KMS_KEY_ERROR = 7,
  StatusCondition_Code_StatusCondition_Code_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  StatusCondition_Code_StatusCondition_Code_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool StatusCondition_Code_IsValid(int value);
const StatusCondition_Code StatusCondition_Code_Code_MIN = StatusCondition_Code_UNKNOWN;
const StatusCondition_Code StatusCondition_Code_Code_MAX = StatusCondition_Code_CLOUD_KMS_KEY_ERROR;
const int StatusCondition_Code_Code_ARRAYSIZE = StatusCondition_Code_Code_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCondition_Code_descriptor();
inline const ::std::string& StatusCondition_Code_Name(StatusCondition_Code value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCondition_Code_descriptor(), value);
}
inline bool StatusCondition_Code_Parse(
    const ::std::string& name, StatusCondition_Code* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCondition_Code>(
    StatusCondition_Code_descriptor(), name, value);
}
enum ReleaseChannel_Channel {
  ReleaseChannel_Channel_UNSPECIFIED = 0,
  ReleaseChannel_Channel_RAPID = 1,
  ReleaseChannel_Channel_REGULAR = 2,
  ReleaseChannel_Channel_STABLE = 3,
  ReleaseChannel_Channel_ReleaseChannel_Channel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  ReleaseChannel_Channel_ReleaseChannel_Channel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool ReleaseChannel_Channel_IsValid(int value);
const ReleaseChannel_Channel ReleaseChannel_Channel_Channel_MIN = ReleaseChannel_Channel_UNSPECIFIED;
const ReleaseChannel_Channel ReleaseChannel_Channel_Channel_MAX = ReleaseChannel_Channel_STABLE;
const int ReleaseChannel_Channel_Channel_ARRAYSIZE = ReleaseChannel_Channel_Channel_MAX + 1;

const ::google::protobuf::EnumDescriptor* ReleaseChannel_Channel_descriptor();
inline const ::std::string& ReleaseChannel_Channel_Name(ReleaseChannel_Channel value) {
  return ::google::protobuf::internal::NameOfEnum(
    ReleaseChannel_Channel_descriptor(), value);
}
inline bool ReleaseChannel_Channel_Parse(
    const ::std::string& name, ReleaseChannel_Channel* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ReleaseChannel_Channel>(
    ReleaseChannel_Channel_descriptor(), name, value);
}
enum DatabaseEncryption_State {
  DatabaseEncryption_State_UNKNOWN = 0,
  DatabaseEncryption_State_ENCRYPTED = 1,
  DatabaseEncryption_State_DECRYPTED = 2,
  DatabaseEncryption_State_DatabaseEncryption_State_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  DatabaseEncryption_State_DatabaseEncryption_State_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool DatabaseEncryption_State_IsValid(int value);
const DatabaseEncryption_State DatabaseEncryption_State_State_MIN = DatabaseEncryption_State_UNKNOWN;
const DatabaseEncryption_State DatabaseEncryption_State_State_MAX = DatabaseEncryption_State_DECRYPTED;
const int DatabaseEncryption_State_State_ARRAYSIZE = DatabaseEncryption_State_State_MAX + 1;

const ::google::protobuf::EnumDescriptor* DatabaseEncryption_State_descriptor();
inline const ::std::string& DatabaseEncryption_State_Name(DatabaseEncryption_State value) {
  return ::google::protobuf::internal::NameOfEnum(
    DatabaseEncryption_State_descriptor(), value);
}
inline bool DatabaseEncryption_State_Parse(
    const ::std::string& name, DatabaseEncryption_State* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DatabaseEncryption_State>(
    DatabaseEncryption_State_descriptor(), name, value);
}
enum UsableSubnetworkSecondaryRange_Status {
  UsableSubnetworkSecondaryRange_Status_UNKNOWN = 0,
  UsableSubnetworkSecondaryRange_Status_UNUSED = 1,
  UsableSubnetworkSecondaryRange_Status_IN_USE_SERVICE = 2,
  UsableSubnetworkSecondaryRange_Status_IN_USE_SHAREABLE_POD = 3,
  UsableSubnetworkSecondaryRange_Status_IN_USE_MANAGED_POD = 4,
  UsableSubnetworkSecondaryRange_Status_UsableSubnetworkSecondaryRange_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::min(),
  UsableSubnetworkSecondaryRange_Status_UsableSubnetworkSecondaryRange_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::google::protobuf::int32>::max()
};
bool UsableSubnetworkSecondaryRange_Status_IsValid(int value);
const UsableSubnetworkSecondaryRange_Status UsableSubnetworkSecondaryRange_Status_Status_MIN = UsableSubnetworkSecondaryRange_Status_UNKNOWN;
const UsableSubnetworkSecondaryRange_Status UsableSubnetworkSecondaryRange_Status_Status_MAX = UsableSubnetworkSecondaryRange_Status_IN_USE_MANAGED_POD;
const int UsableSubnetworkSecondaryRange_Status_Status_ARRAYSIZE = UsableSubnetworkSecondaryRange_Status_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* UsableSubnetworkSecondaryRange_Status_descriptor();
inline const ::std::string& UsableSubnetworkSecondaryRange_Status_Name(UsableSubnetworkSecondaryRange_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    UsableSubnetworkSecondaryRange_Status_descriptor(), value);
}
inline bool UsableSubnetworkSecondaryRange_Status_Parse(
    const ::std::string& name, UsableSubnetworkSecondaryRange_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<UsableSubnetworkSecondaryRange_Status>(
    UsableSubnetworkSecondaryRange_Status_descriptor(), name, value);
}
// ===================================================================

class NodeConfig_MetadataEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NodeConfig_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<NodeConfig_MetadataEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NodeConfig_MetadataEntry_DoNotUse();
  NodeConfig_MetadataEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NodeConfig_MetadataEntry_DoNotUse& other);
  static const NodeConfig_MetadataEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeConfig_MetadataEntry_DoNotUse*>(&_NodeConfig_MetadataEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NodeConfig_LabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<NodeConfig_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<NodeConfig_LabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  NodeConfig_LabelsEntry_DoNotUse();
  NodeConfig_LabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const NodeConfig_LabelsEntry_DoNotUse& other);
  static const NodeConfig_LabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const NodeConfig_LabelsEntry_DoNotUse*>(&_NodeConfig_LabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class NodeConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodeConfig) */ {
 public:
  NodeConfig();
  virtual ~NodeConfig();

  NodeConfig(const NodeConfig& from);

  inline NodeConfig& operator=(const NodeConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeConfig(NodeConfig&& from) noexcept
    : NodeConfig() {
    *this = ::std::move(from);
  }

  inline NodeConfig& operator=(NodeConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeConfig* internal_default_instance() {
    return reinterpret_cast<const NodeConfig*>(
               &_NodeConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(NodeConfig* other);
  friend void swap(NodeConfig& a, NodeConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeConfig* New() const final {
    return CreateMaybeMessage<NodeConfig>(nullptr);
  }

  NodeConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeConfig& from);
  void MergeFrom(const NodeConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // repeated string oauth_scopes = 3;
  int oauth_scopes_size() const;
  void clear_oauth_scopes();
  static const int kOauthScopesFieldNumber = 3;
  const ::std::string& oauth_scopes(int index) const;
  ::std::string* mutable_oauth_scopes(int index);
  void set_oauth_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_oauth_scopes(int index, ::std::string&& value);
  #endif
  void set_oauth_scopes(int index, const char* value);
  void set_oauth_scopes(int index, const char* value, size_t size);
  ::std::string* add_oauth_scopes();
  void add_oauth_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_oauth_scopes(::std::string&& value);
  #endif
  void add_oauth_scopes(const char* value);
  void add_oauth_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& oauth_scopes() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_oauth_scopes();

  // map<string, string> metadata = 4;
  int metadata_size() const;
  void clear_metadata();
  static const int kMetadataFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      metadata() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_metadata();

  // map<string, string> labels = 6;
  int labels_size() const;
  void clear_labels();
  static const int kLabelsFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_labels();

  // repeated string tags = 8;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 8;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_tags(int index, ::std::string&& value);
  #endif
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  #if LANG_CXX11
  void add_tags(::std::string&& value);
  #endif
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_tags();

  // repeated .google.container.v1.AcceleratorConfig accelerators = 11;
  int accelerators_size() const;
  void clear_accelerators();
  static const int kAcceleratorsFieldNumber = 11;
  ::google::container::v1::AcceleratorConfig* mutable_accelerators(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >*
      mutable_accelerators();
  const ::google::container::v1::AcceleratorConfig& accelerators(int index) const;
  ::google::container::v1::AcceleratorConfig* add_accelerators();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >&
      accelerators() const;

  // repeated .google.container.v1.NodeTaint taints = 15;
  int taints_size() const;
  void clear_taints();
  static const int kTaintsFieldNumber = 15;
  ::google::container::v1::NodeTaint* mutable_taints(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodeTaint >*
      mutable_taints();
  const ::google::container::v1::NodeTaint& taints(int index) const;
  ::google::container::v1::NodeTaint* add_taints();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodeTaint >&
      taints() const;

  // string machine_type = 1;
  void clear_machine_type();
  static const int kMachineTypeFieldNumber = 1;
  const ::std::string& machine_type() const;
  void set_machine_type(const ::std::string& value);
  #if LANG_CXX11
  void set_machine_type(::std::string&& value);
  #endif
  void set_machine_type(const char* value);
  void set_machine_type(const char* value, size_t size);
  ::std::string* mutable_machine_type();
  ::std::string* release_machine_type();
  void set_allocated_machine_type(::std::string* machine_type);

  // string image_type = 5;
  void clear_image_type();
  static const int kImageTypeFieldNumber = 5;
  const ::std::string& image_type() const;
  void set_image_type(const ::std::string& value);
  #if LANG_CXX11
  void set_image_type(::std::string&& value);
  #endif
  void set_image_type(const char* value);
  void set_image_type(const char* value, size_t size);
  ::std::string* mutable_image_type();
  ::std::string* release_image_type();
  void set_allocated_image_type(::std::string* image_type);

  // string service_account = 9;
  void clear_service_account();
  static const int kServiceAccountFieldNumber = 9;
  const ::std::string& service_account() const;
  void set_service_account(const ::std::string& value);
  #if LANG_CXX11
  void set_service_account(::std::string&& value);
  #endif
  void set_service_account(const char* value);
  void set_service_account(const char* value, size_t size);
  ::std::string* mutable_service_account();
  ::std::string* release_service_account();
  void set_allocated_service_account(::std::string* service_account);

  // string disk_type = 12;
  void clear_disk_type();
  static const int kDiskTypeFieldNumber = 12;
  const ::std::string& disk_type() const;
  void set_disk_type(const ::std::string& value);
  #if LANG_CXX11
  void set_disk_type(::std::string&& value);
  #endif
  void set_disk_type(const char* value);
  void set_disk_type(const char* value, size_t size);
  ::std::string* mutable_disk_type();
  ::std::string* release_disk_type();
  void set_allocated_disk_type(::std::string* disk_type);

  // string min_cpu_platform = 13;
  void clear_min_cpu_platform();
  static const int kMinCpuPlatformFieldNumber = 13;
  const ::std::string& min_cpu_platform() const;
  void set_min_cpu_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_min_cpu_platform(::std::string&& value);
  #endif
  void set_min_cpu_platform(const char* value);
  void set_min_cpu_platform(const char* value, size_t size);
  ::std::string* mutable_min_cpu_platform();
  ::std::string* release_min_cpu_platform();
  void set_allocated_min_cpu_platform(::std::string* min_cpu_platform);

  // string node_group = 18;
  void clear_node_group();
  static const int kNodeGroupFieldNumber = 18;
  const ::std::string& node_group() const;
  void set_node_group(const ::std::string& value);
  #if LANG_CXX11
  void set_node_group(::std::string&& value);
  #endif
  void set_node_group(const char* value);
  void set_node_group(const char* value, size_t size);
  ::std::string* mutable_node_group();
  ::std::string* release_node_group();
  void set_allocated_node_group(::std::string* node_group);

  // string boot_disk_kms_key = 23;
  void clear_boot_disk_kms_key();
  static const int kBootDiskKmsKeyFieldNumber = 23;
  const ::std::string& boot_disk_kms_key() const;
  void set_boot_disk_kms_key(const ::std::string& value);
  #if LANG_CXX11
  void set_boot_disk_kms_key(::std::string&& value);
  #endif
  void set_boot_disk_kms_key(const char* value);
  void set_boot_disk_kms_key(const char* value, size_t size);
  ::std::string* mutable_boot_disk_kms_key();
  ::std::string* release_boot_disk_kms_key();
  void set_allocated_boot_disk_kms_key(::std::string* boot_disk_kms_key);

  // .google.container.v1.WorkloadMetadataConfig workload_metadata_config = 14;
  bool has_workload_metadata_config() const;
  void clear_workload_metadata_config();
  static const int kWorkloadMetadataConfigFieldNumber = 14;
  const ::google::container::v1::WorkloadMetadataConfig& workload_metadata_config() const;
  ::google::container::v1::WorkloadMetadataConfig* release_workload_metadata_config();
  ::google::container::v1::WorkloadMetadataConfig* mutable_workload_metadata_config();
  void set_allocated_workload_metadata_config(::google::container::v1::WorkloadMetadataConfig* workload_metadata_config);

  // .google.container.v1.SandboxConfig sandbox_config = 17;
  bool has_sandbox_config() const;
  void clear_sandbox_config();
  static const int kSandboxConfigFieldNumber = 17;
  const ::google::container::v1::SandboxConfig& sandbox_config() const;
  ::google::container::v1::SandboxConfig* release_sandbox_config();
  ::google::container::v1::SandboxConfig* mutable_sandbox_config();
  void set_allocated_sandbox_config(::google::container::v1::SandboxConfig* sandbox_config);

  // .google.container.v1.ReservationAffinity reservation_affinity = 19;
  bool has_reservation_affinity() const;
  void clear_reservation_affinity();
  static const int kReservationAffinityFieldNumber = 19;
  const ::google::container::v1::ReservationAffinity& reservation_affinity() const;
  ::google::container::v1::ReservationAffinity* release_reservation_affinity();
  ::google::container::v1::ReservationAffinity* mutable_reservation_affinity();
  void set_allocated_reservation_affinity(::google::container::v1::ReservationAffinity* reservation_affinity);

  // .google.container.v1.ShieldedInstanceConfig shielded_instance_config = 20;
  bool has_shielded_instance_config() const;
  void clear_shielded_instance_config();
  static const int kShieldedInstanceConfigFieldNumber = 20;
  const ::google::container::v1::ShieldedInstanceConfig& shielded_instance_config() const;
  ::google::container::v1::ShieldedInstanceConfig* release_shielded_instance_config();
  ::google::container::v1::ShieldedInstanceConfig* mutable_shielded_instance_config();
  void set_allocated_shielded_instance_config(::google::container::v1::ShieldedInstanceConfig* shielded_instance_config);

  // int32 disk_size_gb = 2;
  void clear_disk_size_gb();
  static const int kDiskSizeGbFieldNumber = 2;
  ::google::protobuf::int32 disk_size_gb() const;
  void set_disk_size_gb(::google::protobuf::int32 value);

  // int32 local_ssd_count = 7;
  void clear_local_ssd_count();
  static const int kLocalSsdCountFieldNumber = 7;
  ::google::protobuf::int32 local_ssd_count() const;
  void set_local_ssd_count(::google::protobuf::int32 value);

  // bool preemptible = 10;
  void clear_preemptible();
  static const int kPreemptibleFieldNumber = 10;
  bool preemptible() const;
  void set_preemptible(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodeConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> oauth_scopes_;
  ::google::protobuf::internal::MapField<
      NodeConfig_MetadataEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > metadata_;
  ::google::protobuf::internal::MapField<
      NodeConfig_LabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > labels_;
  ::google::protobuf::RepeatedPtrField<::std::string> tags_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig > accelerators_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodeTaint > taints_;
  ::google::protobuf::internal::ArenaStringPtr machine_type_;
  ::google::protobuf::internal::ArenaStringPtr image_type_;
  ::google::protobuf::internal::ArenaStringPtr service_account_;
  ::google::protobuf::internal::ArenaStringPtr disk_type_;
  ::google::protobuf::internal::ArenaStringPtr min_cpu_platform_;
  ::google::protobuf::internal::ArenaStringPtr node_group_;
  ::google::protobuf::internal::ArenaStringPtr boot_disk_kms_key_;
  ::google::container::v1::WorkloadMetadataConfig* workload_metadata_config_;
  ::google::container::v1::SandboxConfig* sandbox_config_;
  ::google::container::v1::ReservationAffinity* reservation_affinity_;
  ::google::container::v1::ShieldedInstanceConfig* shielded_instance_config_;
  ::google::protobuf::int32 disk_size_gb_;
  ::google::protobuf::int32 local_ssd_count_;
  bool preemptible_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ShieldedInstanceConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ShieldedInstanceConfig) */ {
 public:
  ShieldedInstanceConfig();
  virtual ~ShieldedInstanceConfig();

  ShieldedInstanceConfig(const ShieldedInstanceConfig& from);

  inline ShieldedInstanceConfig& operator=(const ShieldedInstanceConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShieldedInstanceConfig(ShieldedInstanceConfig&& from) noexcept
    : ShieldedInstanceConfig() {
    *this = ::std::move(from);
  }

  inline ShieldedInstanceConfig& operator=(ShieldedInstanceConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ShieldedInstanceConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShieldedInstanceConfig* internal_default_instance() {
    return reinterpret_cast<const ShieldedInstanceConfig*>(
               &_ShieldedInstanceConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ShieldedInstanceConfig* other);
  friend void swap(ShieldedInstanceConfig& a, ShieldedInstanceConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShieldedInstanceConfig* New() const final {
    return CreateMaybeMessage<ShieldedInstanceConfig>(nullptr);
  }

  ShieldedInstanceConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShieldedInstanceConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShieldedInstanceConfig& from);
  void MergeFrom(const ShieldedInstanceConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShieldedInstanceConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enable_secure_boot = 1;
  void clear_enable_secure_boot();
  static const int kEnableSecureBootFieldNumber = 1;
  bool enable_secure_boot() const;
  void set_enable_secure_boot(bool value);

  // bool enable_integrity_monitoring = 2;
  void clear_enable_integrity_monitoring();
  static const int kEnableIntegrityMonitoringFieldNumber = 2;
  bool enable_integrity_monitoring() const;
  void set_enable_integrity_monitoring(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ShieldedInstanceConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enable_secure_boot_;
  bool enable_integrity_monitoring_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SandboxConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SandboxConfig) */ {
 public:
  SandboxConfig();
  virtual ~SandboxConfig();

  SandboxConfig(const SandboxConfig& from);

  inline SandboxConfig& operator=(const SandboxConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SandboxConfig(SandboxConfig&& from) noexcept
    : SandboxConfig() {
    *this = ::std::move(from);
  }

  inline SandboxConfig& operator=(SandboxConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SandboxConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SandboxConfig* internal_default_instance() {
    return reinterpret_cast<const SandboxConfig*>(
               &_SandboxConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(SandboxConfig* other);
  friend void swap(SandboxConfig& a, SandboxConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SandboxConfig* New() const final {
    return CreateMaybeMessage<SandboxConfig>(nullptr);
  }

  SandboxConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SandboxConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SandboxConfig& from);
  void MergeFrom(const SandboxConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SandboxConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SandboxConfig_Type Type;
  static const Type UNSPECIFIED =
    SandboxConfig_Type_UNSPECIFIED;
  static const Type GVISOR =
    SandboxConfig_Type_GVISOR;
  static inline bool Type_IsValid(int value) {
    return SandboxConfig_Type_IsValid(value);
  }
  static const Type Type_MIN =
    SandboxConfig_Type_Type_MIN;
  static const Type Type_MAX =
    SandboxConfig_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    SandboxConfig_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return SandboxConfig_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return SandboxConfig_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return SandboxConfig_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.container.v1.SandboxConfig.Type type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::container::v1::SandboxConfig_Type type() const;
  void set_type(::google::container::v1::SandboxConfig_Type value);

  // @@protoc_insertion_point(class_scope:google.container.v1.SandboxConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReservationAffinity final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ReservationAffinity) */ {
 public:
  ReservationAffinity();
  virtual ~ReservationAffinity();

  ReservationAffinity(const ReservationAffinity& from);

  inline ReservationAffinity& operator=(const ReservationAffinity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReservationAffinity(ReservationAffinity&& from) noexcept
    : ReservationAffinity() {
    *this = ::std::move(from);
  }

  inline ReservationAffinity& operator=(ReservationAffinity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReservationAffinity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReservationAffinity* internal_default_instance() {
    return reinterpret_cast<const ReservationAffinity*>(
               &_ReservationAffinity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ReservationAffinity* other);
  friend void swap(ReservationAffinity& a, ReservationAffinity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReservationAffinity* New() const final {
    return CreateMaybeMessage<ReservationAffinity>(nullptr);
  }

  ReservationAffinity* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReservationAffinity>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReservationAffinity& from);
  void MergeFrom(const ReservationAffinity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReservationAffinity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReservationAffinity_Type Type;
  static const Type UNSPECIFIED =
    ReservationAffinity_Type_UNSPECIFIED;
  static const Type NO_RESERVATION =
    ReservationAffinity_Type_NO_RESERVATION;
  static const Type ANY_RESERVATION =
    ReservationAffinity_Type_ANY_RESERVATION;
  static const Type SPECIFIC_RESERVATION =
    ReservationAffinity_Type_SPECIFIC_RESERVATION;
  static inline bool Type_IsValid(int value) {
    return ReservationAffinity_Type_IsValid(value);
  }
  static const Type Type_MIN =
    ReservationAffinity_Type_Type_MIN;
  static const Type Type_MAX =
    ReservationAffinity_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    ReservationAffinity_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return ReservationAffinity_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return ReservationAffinity_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return ReservationAffinity_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  const ::std::string& values(int index) const;
  ::std::string* mutable_values(int index);
  void set_values(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_values(int index, ::std::string&& value);
  #endif
  void set_values(int index, const char* value);
  void set_values(int index, const char* value, size_t size);
  ::std::string* add_values();
  void add_values(const ::std::string& value);
  #if LANG_CXX11
  void add_values(::std::string&& value);
  #endif
  void add_values(const char* value);
  void add_values(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& values() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_values();

  // string key = 2;
  void clear_key();
  static const int kKeyFieldNumber = 2;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // .google.container.v1.ReservationAffinity.Type consume_reservation_type = 1;
  void clear_consume_reservation_type();
  static const int kConsumeReservationTypeFieldNumber = 1;
  ::google::container::v1::ReservationAffinity_Type consume_reservation_type() const;
  void set_consume_reservation_type(::google::container::v1::ReservationAffinity_Type value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ReservationAffinity)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> values_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  int consume_reservation_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NodeTaint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodeTaint) */ {
 public:
  NodeTaint();
  virtual ~NodeTaint();

  NodeTaint(const NodeTaint& from);

  inline NodeTaint& operator=(const NodeTaint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeTaint(NodeTaint&& from) noexcept
    : NodeTaint() {
    *this = ::std::move(from);
  }

  inline NodeTaint& operator=(NodeTaint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeTaint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeTaint* internal_default_instance() {
    return reinterpret_cast<const NodeTaint*>(
               &_NodeTaint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(NodeTaint* other);
  friend void swap(NodeTaint& a, NodeTaint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeTaint* New() const final {
    return CreateMaybeMessage<NodeTaint>(nullptr);
  }

  NodeTaint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeTaint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeTaint& from);
  void MergeFrom(const NodeTaint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeTaint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodeTaint_Effect Effect;
  static const Effect EFFECT_UNSPECIFIED =
    NodeTaint_Effect_EFFECT_UNSPECIFIED;
  static const Effect NO_SCHEDULE =
    NodeTaint_Effect_NO_SCHEDULE;
  static const Effect PREFER_NO_SCHEDULE =
    NodeTaint_Effect_PREFER_NO_SCHEDULE;
  static const Effect NO_EXECUTE =
    NodeTaint_Effect_NO_EXECUTE;
  static inline bool Effect_IsValid(int value) {
    return NodeTaint_Effect_IsValid(value);
  }
  static const Effect Effect_MIN =
    NodeTaint_Effect_Effect_MIN;
  static const Effect Effect_MAX =
    NodeTaint_Effect_Effect_MAX;
  static const int Effect_ARRAYSIZE =
    NodeTaint_Effect_Effect_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Effect_descriptor() {
    return NodeTaint_Effect_descriptor();
  }
  static inline const ::std::string& Effect_Name(Effect value) {
    return NodeTaint_Effect_Name(value);
  }
  static inline bool Effect_Parse(const ::std::string& name,
      Effect* value) {
    return NodeTaint_Effect_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string key = 1;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // string value = 2;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // .google.container.v1.NodeTaint.Effect effect = 3;
  void clear_effect();
  static const int kEffectFieldNumber = 3;
  ::google::container::v1::NodeTaint_Effect effect() const;
  void set_effect(::google::container::v1::NodeTaint_Effect value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodeTaint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  int effect_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MasterAuth final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MasterAuth) */ {
 public:
  MasterAuth();
  virtual ~MasterAuth();

  MasterAuth(const MasterAuth& from);

  inline MasterAuth& operator=(const MasterAuth& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MasterAuth(MasterAuth&& from) noexcept
    : MasterAuth() {
    *this = ::std::move(from);
  }

  inline MasterAuth& operator=(MasterAuth&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MasterAuth& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterAuth* internal_default_instance() {
    return reinterpret_cast<const MasterAuth*>(
               &_MasterAuth_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(MasterAuth* other);
  friend void swap(MasterAuth& a, MasterAuth& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterAuth* New() const final {
    return CreateMaybeMessage<MasterAuth>(nullptr);
  }

  MasterAuth* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MasterAuth>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MasterAuth& from);
  void MergeFrom(const MasterAuth& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterAuth* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string username = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_username();
  PROTOBUF_DEPRECATED static const int kUsernameFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& username() const;
  PROTOBUF_DEPRECATED void set_username(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_username(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_username(const char* value);
  PROTOBUF_DEPRECATED void set_username(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_username();
  PROTOBUF_DEPRECATED ::std::string* release_username();
  PROTOBUF_DEPRECATED void set_allocated_username(::std::string* username);

  // string password = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_password();
  PROTOBUF_DEPRECATED static const int kPasswordFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& password() const;
  PROTOBUF_DEPRECATED void set_password(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_password(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_password(const char* value);
  PROTOBUF_DEPRECATED void set_password(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_password();
  PROTOBUF_DEPRECATED ::std::string* release_password();
  PROTOBUF_DEPRECATED void set_allocated_password(::std::string* password);

  // string cluster_ca_certificate = 100;
  void clear_cluster_ca_certificate();
  static const int kClusterCaCertificateFieldNumber = 100;
  const ::std::string& cluster_ca_certificate() const;
  void set_cluster_ca_certificate(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_ca_certificate(::std::string&& value);
  #endif
  void set_cluster_ca_certificate(const char* value);
  void set_cluster_ca_certificate(const char* value, size_t size);
  ::std::string* mutable_cluster_ca_certificate();
  ::std::string* release_cluster_ca_certificate();
  void set_allocated_cluster_ca_certificate(::std::string* cluster_ca_certificate);

  // string client_certificate = 101;
  void clear_client_certificate();
  static const int kClientCertificateFieldNumber = 101;
  const ::std::string& client_certificate() const;
  void set_client_certificate(const ::std::string& value);
  #if LANG_CXX11
  void set_client_certificate(::std::string&& value);
  #endif
  void set_client_certificate(const char* value);
  void set_client_certificate(const char* value, size_t size);
  ::std::string* mutable_client_certificate();
  ::std::string* release_client_certificate();
  void set_allocated_client_certificate(::std::string* client_certificate);

  // string client_key = 102;
  void clear_client_key();
  static const int kClientKeyFieldNumber = 102;
  const ::std::string& client_key() const;
  void set_client_key(const ::std::string& value);
  #if LANG_CXX11
  void set_client_key(::std::string&& value);
  #endif
  void set_client_key(const char* value);
  void set_client_key(const char* value, size_t size);
  ::std::string* mutable_client_key();
  ::std::string* release_client_key();
  void set_allocated_client_key(::std::string* client_key);

  // .google.container.v1.ClientCertificateConfig client_certificate_config = 3;
  bool has_client_certificate_config() const;
  void clear_client_certificate_config();
  static const int kClientCertificateConfigFieldNumber = 3;
  const ::google::container::v1::ClientCertificateConfig& client_certificate_config() const;
  ::google::container::v1::ClientCertificateConfig* release_client_certificate_config();
  ::google::container::v1::ClientCertificateConfig* mutable_client_certificate_config();
  void set_allocated_client_certificate_config(::google::container::v1::ClientCertificateConfig* client_certificate_config);

  // @@protoc_insertion_point(class_scope:google.container.v1.MasterAuth)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr username_;
  ::google::protobuf::internal::ArenaStringPtr password_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ca_certificate_;
  ::google::protobuf::internal::ArenaStringPtr client_certificate_;
  ::google::protobuf::internal::ArenaStringPtr client_key_;
  ::google::container::v1::ClientCertificateConfig* client_certificate_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ClientCertificateConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ClientCertificateConfig) */ {
 public:
  ClientCertificateConfig();
  virtual ~ClientCertificateConfig();

  ClientCertificateConfig(const ClientCertificateConfig& from);

  inline ClientCertificateConfig& operator=(const ClientCertificateConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientCertificateConfig(ClientCertificateConfig&& from) noexcept
    : ClientCertificateConfig() {
    *this = ::std::move(from);
  }

  inline ClientCertificateConfig& operator=(ClientCertificateConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClientCertificateConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientCertificateConfig* internal_default_instance() {
    return reinterpret_cast<const ClientCertificateConfig*>(
               &_ClientCertificateConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(ClientCertificateConfig* other);
  friend void swap(ClientCertificateConfig& a, ClientCertificateConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientCertificateConfig* New() const final {
    return CreateMaybeMessage<ClientCertificateConfig>(nullptr);
  }

  ClientCertificateConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClientCertificateConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClientCertificateConfig& from);
  void MergeFrom(const ClientCertificateConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClientCertificateConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool issue_client_certificate = 1;
  void clear_issue_client_certificate();
  static const int kIssueClientCertificateFieldNumber = 1;
  bool issue_client_certificate() const;
  void set_issue_client_certificate(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ClientCertificateConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool issue_client_certificate_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AddonsConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.AddonsConfig) */ {
 public:
  AddonsConfig();
  virtual ~AddonsConfig();

  AddonsConfig(const AddonsConfig& from);

  inline AddonsConfig& operator=(const AddonsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddonsConfig(AddonsConfig&& from) noexcept
    : AddonsConfig() {
    *this = ::std::move(from);
  }

  inline AddonsConfig& operator=(AddonsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AddonsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddonsConfig* internal_default_instance() {
    return reinterpret_cast<const AddonsConfig*>(
               &_AddonsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(AddonsConfig* other);
  friend void swap(AddonsConfig& a, AddonsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddonsConfig* New() const final {
    return CreateMaybeMessage<AddonsConfig>(nullptr);
  }

  AddonsConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddonsConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddonsConfig& from);
  void MergeFrom(const AddonsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddonsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
  bool has_http_load_balancing() const;
  void clear_http_load_balancing();
  static const int kHttpLoadBalancingFieldNumber = 1;
  const ::google::container::v1::HttpLoadBalancing& http_load_balancing() const;
  ::google::container::v1::HttpLoadBalancing* release_http_load_balancing();
  ::google::container::v1::HttpLoadBalancing* mutable_http_load_balancing();
  void set_allocated_http_load_balancing(::google::container::v1::HttpLoadBalancing* http_load_balancing);

  // .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
  bool has_horizontal_pod_autoscaling() const;
  void clear_horizontal_pod_autoscaling();
  static const int kHorizontalPodAutoscalingFieldNumber = 2;
  const ::google::container::v1::HorizontalPodAutoscaling& horizontal_pod_autoscaling() const;
  ::google::container::v1::HorizontalPodAutoscaling* release_horizontal_pod_autoscaling();
  ::google::container::v1::HorizontalPodAutoscaling* mutable_horizontal_pod_autoscaling();
  void set_allocated_horizontal_pod_autoscaling(::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling);

  // .google.container.v1.KubernetesDashboard kubernetes_dashboard = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_kubernetes_dashboard() const;
  PROTOBUF_DEPRECATED void clear_kubernetes_dashboard();
  PROTOBUF_DEPRECATED static const int kKubernetesDashboardFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::google::container::v1::KubernetesDashboard& kubernetes_dashboard() const;
  PROTOBUF_DEPRECATED ::google::container::v1::KubernetesDashboard* release_kubernetes_dashboard();
  PROTOBUF_DEPRECATED ::google::container::v1::KubernetesDashboard* mutable_kubernetes_dashboard();
  PROTOBUF_DEPRECATED void set_allocated_kubernetes_dashboard(::google::container::v1::KubernetesDashboard* kubernetes_dashboard);

  // .google.container.v1.NetworkPolicyConfig network_policy_config = 4;
  bool has_network_policy_config() const;
  void clear_network_policy_config();
  static const int kNetworkPolicyConfigFieldNumber = 4;
  const ::google::container::v1::NetworkPolicyConfig& network_policy_config() const;
  ::google::container::v1::NetworkPolicyConfig* release_network_policy_config();
  ::google::container::v1::NetworkPolicyConfig* mutable_network_policy_config();
  void set_allocated_network_policy_config(::google::container::v1::NetworkPolicyConfig* network_policy_config);

  // .google.container.v1.CloudRunConfig cloud_run_config = 7;
  bool has_cloud_run_config() const;
  void clear_cloud_run_config();
  static const int kCloudRunConfigFieldNumber = 7;
  const ::google::container::v1::CloudRunConfig& cloud_run_config() const;
  ::google::container::v1::CloudRunConfig* release_cloud_run_config();
  ::google::container::v1::CloudRunConfig* mutable_cloud_run_config();
  void set_allocated_cloud_run_config(::google::container::v1::CloudRunConfig* cloud_run_config);

  // .google.container.v1.DnsCacheConfig dns_cache_config = 8;
  bool has_dns_cache_config() const;
  void clear_dns_cache_config();
  static const int kDnsCacheConfigFieldNumber = 8;
  const ::google::container::v1::DnsCacheConfig& dns_cache_config() const;
  ::google::container::v1::DnsCacheConfig* release_dns_cache_config();
  ::google::container::v1::DnsCacheConfig* mutable_dns_cache_config();
  void set_allocated_dns_cache_config(::google::container::v1::DnsCacheConfig* dns_cache_config);

  // .google.container.v1.ConfigConnectorConfig config_connector_config = 10;
  bool has_config_connector_config() const;
  void clear_config_connector_config();
  static const int kConfigConnectorConfigFieldNumber = 10;
  const ::google::container::v1::ConfigConnectorConfig& config_connector_config() const;
  ::google::container::v1::ConfigConnectorConfig* release_config_connector_config();
  ::google::container::v1::ConfigConnectorConfig* mutable_config_connector_config();
  void set_allocated_config_connector_config(::google::container::v1::ConfigConnectorConfig* config_connector_config);

  // @@protoc_insertion_point(class_scope:google.container.v1.AddonsConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::container::v1::HttpLoadBalancing* http_load_balancing_;
  ::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling_;
  ::google::container::v1::KubernetesDashboard* kubernetes_dashboard_;
  ::google::container::v1::NetworkPolicyConfig* network_policy_config_;
  ::google::container::v1::CloudRunConfig* cloud_run_config_;
  ::google::container::v1::DnsCacheConfig* dns_cache_config_;
  ::google::container::v1::ConfigConnectorConfig* config_connector_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class HttpLoadBalancing final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.HttpLoadBalancing) */ {
 public:
  HttpLoadBalancing();
  virtual ~HttpLoadBalancing();

  HttpLoadBalancing(const HttpLoadBalancing& from);

  inline HttpLoadBalancing& operator=(const HttpLoadBalancing& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HttpLoadBalancing(HttpLoadBalancing&& from) noexcept
    : HttpLoadBalancing() {
    *this = ::std::move(from);
  }

  inline HttpLoadBalancing& operator=(HttpLoadBalancing&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HttpLoadBalancing& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HttpLoadBalancing* internal_default_instance() {
    return reinterpret_cast<const HttpLoadBalancing*>(
               &_HttpLoadBalancing_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(HttpLoadBalancing* other);
  friend void swap(HttpLoadBalancing& a, HttpLoadBalancing& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HttpLoadBalancing* New() const final {
    return CreateMaybeMessage<HttpLoadBalancing>(nullptr);
  }

  HttpLoadBalancing* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HttpLoadBalancing>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HttpLoadBalancing& from);
  void MergeFrom(const HttpLoadBalancing& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HttpLoadBalancing* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.HttpLoadBalancing)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class HorizontalPodAutoscaling final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.HorizontalPodAutoscaling) */ {
 public:
  HorizontalPodAutoscaling();
  virtual ~HorizontalPodAutoscaling();

  HorizontalPodAutoscaling(const HorizontalPodAutoscaling& from);

  inline HorizontalPodAutoscaling& operator=(const HorizontalPodAutoscaling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  HorizontalPodAutoscaling(HorizontalPodAutoscaling&& from) noexcept
    : HorizontalPodAutoscaling() {
    *this = ::std::move(from);
  }

  inline HorizontalPodAutoscaling& operator=(HorizontalPodAutoscaling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const HorizontalPodAutoscaling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HorizontalPodAutoscaling* internal_default_instance() {
    return reinterpret_cast<const HorizontalPodAutoscaling*>(
               &_HorizontalPodAutoscaling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(HorizontalPodAutoscaling* other);
  friend void swap(HorizontalPodAutoscaling& a, HorizontalPodAutoscaling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline HorizontalPodAutoscaling* New() const final {
    return CreateMaybeMessage<HorizontalPodAutoscaling>(nullptr);
  }

  HorizontalPodAutoscaling* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<HorizontalPodAutoscaling>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const HorizontalPodAutoscaling& from);
  void MergeFrom(const HorizontalPodAutoscaling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HorizontalPodAutoscaling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.HorizontalPodAutoscaling)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class KubernetesDashboard final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.KubernetesDashboard) */ {
 public:
  KubernetesDashboard();
  virtual ~KubernetesDashboard();

  KubernetesDashboard(const KubernetesDashboard& from);

  inline KubernetesDashboard& operator=(const KubernetesDashboard& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  KubernetesDashboard(KubernetesDashboard&& from) noexcept
    : KubernetesDashboard() {
    *this = ::std::move(from);
  }

  inline KubernetesDashboard& operator=(KubernetesDashboard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const KubernetesDashboard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KubernetesDashboard* internal_default_instance() {
    return reinterpret_cast<const KubernetesDashboard*>(
               &_KubernetesDashboard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(KubernetesDashboard* other);
  friend void swap(KubernetesDashboard& a, KubernetesDashboard& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline KubernetesDashboard* New() const final {
    return CreateMaybeMessage<KubernetesDashboard>(nullptr);
  }

  KubernetesDashboard* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<KubernetesDashboard>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const KubernetesDashboard& from);
  void MergeFrom(const KubernetesDashboard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KubernetesDashboard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.KubernetesDashboard)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NetworkPolicyConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NetworkPolicyConfig) */ {
 public:
  NetworkPolicyConfig();
  virtual ~NetworkPolicyConfig();

  NetworkPolicyConfig(const NetworkPolicyConfig& from);

  inline NetworkPolicyConfig& operator=(const NetworkPolicyConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkPolicyConfig(NetworkPolicyConfig&& from) noexcept
    : NetworkPolicyConfig() {
    *this = ::std::move(from);
  }

  inline NetworkPolicyConfig& operator=(NetworkPolicyConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NetworkPolicyConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkPolicyConfig* internal_default_instance() {
    return reinterpret_cast<const NetworkPolicyConfig*>(
               &_NetworkPolicyConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(NetworkPolicyConfig* other);
  friend void swap(NetworkPolicyConfig& a, NetworkPolicyConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkPolicyConfig* New() const final {
    return CreateMaybeMessage<NetworkPolicyConfig>(nullptr);
  }

  NetworkPolicyConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkPolicyConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkPolicyConfig& from);
  void MergeFrom(const NetworkPolicyConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkPolicyConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NetworkPolicyConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DnsCacheConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DnsCacheConfig) */ {
 public:
  DnsCacheConfig();
  virtual ~DnsCacheConfig();

  DnsCacheConfig(const DnsCacheConfig& from);

  inline DnsCacheConfig& operator=(const DnsCacheConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DnsCacheConfig(DnsCacheConfig&& from) noexcept
    : DnsCacheConfig() {
    *this = ::std::move(from);
  }

  inline DnsCacheConfig& operator=(DnsCacheConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DnsCacheConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DnsCacheConfig* internal_default_instance() {
    return reinterpret_cast<const DnsCacheConfig*>(
               &_DnsCacheConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(DnsCacheConfig* other);
  friend void swap(DnsCacheConfig& a, DnsCacheConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DnsCacheConfig* New() const final {
    return CreateMaybeMessage<DnsCacheConfig>(nullptr);
  }

  DnsCacheConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DnsCacheConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DnsCacheConfig& from);
  void MergeFrom(const DnsCacheConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DnsCacheConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.DnsCacheConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PrivateClusterMasterGlobalAccessConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.PrivateClusterMasterGlobalAccessConfig) */ {
 public:
  PrivateClusterMasterGlobalAccessConfig();
  virtual ~PrivateClusterMasterGlobalAccessConfig();

  PrivateClusterMasterGlobalAccessConfig(const PrivateClusterMasterGlobalAccessConfig& from);

  inline PrivateClusterMasterGlobalAccessConfig& operator=(const PrivateClusterMasterGlobalAccessConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivateClusterMasterGlobalAccessConfig(PrivateClusterMasterGlobalAccessConfig&& from) noexcept
    : PrivateClusterMasterGlobalAccessConfig() {
    *this = ::std::move(from);
  }

  inline PrivateClusterMasterGlobalAccessConfig& operator=(PrivateClusterMasterGlobalAccessConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrivateClusterMasterGlobalAccessConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateClusterMasterGlobalAccessConfig* internal_default_instance() {
    return reinterpret_cast<const PrivateClusterMasterGlobalAccessConfig*>(
               &_PrivateClusterMasterGlobalAccessConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(PrivateClusterMasterGlobalAccessConfig* other);
  friend void swap(PrivateClusterMasterGlobalAccessConfig& a, PrivateClusterMasterGlobalAccessConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivateClusterMasterGlobalAccessConfig* New() const final {
    return CreateMaybeMessage<PrivateClusterMasterGlobalAccessConfig>(nullptr);
  }

  PrivateClusterMasterGlobalAccessConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivateClusterMasterGlobalAccessConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivateClusterMasterGlobalAccessConfig& from);
  void MergeFrom(const PrivateClusterMasterGlobalAccessConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateClusterMasterGlobalAccessConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.PrivateClusterMasterGlobalAccessConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class PrivateClusterConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.PrivateClusterConfig) */ {
 public:
  PrivateClusterConfig();
  virtual ~PrivateClusterConfig();

  PrivateClusterConfig(const PrivateClusterConfig& from);

  inline PrivateClusterConfig& operator=(const PrivateClusterConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PrivateClusterConfig(PrivateClusterConfig&& from) noexcept
    : PrivateClusterConfig() {
    *this = ::std::move(from);
  }

  inline PrivateClusterConfig& operator=(PrivateClusterConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const PrivateClusterConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PrivateClusterConfig* internal_default_instance() {
    return reinterpret_cast<const PrivateClusterConfig*>(
               &_PrivateClusterConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(PrivateClusterConfig* other);
  friend void swap(PrivateClusterConfig& a, PrivateClusterConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PrivateClusterConfig* New() const final {
    return CreateMaybeMessage<PrivateClusterConfig>(nullptr);
  }

  PrivateClusterConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PrivateClusterConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PrivateClusterConfig& from);
  void MergeFrom(const PrivateClusterConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PrivateClusterConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string master_ipv4_cidr_block = 3;
  void clear_master_ipv4_cidr_block();
  static const int kMasterIpv4CidrBlockFieldNumber = 3;
  const ::std::string& master_ipv4_cidr_block() const;
  void set_master_ipv4_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_master_ipv4_cidr_block(::std::string&& value);
  #endif
  void set_master_ipv4_cidr_block(const char* value);
  void set_master_ipv4_cidr_block(const char* value, size_t size);
  ::std::string* mutable_master_ipv4_cidr_block();
  ::std::string* release_master_ipv4_cidr_block();
  void set_allocated_master_ipv4_cidr_block(::std::string* master_ipv4_cidr_block);

  // string private_endpoint = 4;
  void clear_private_endpoint();
  static const int kPrivateEndpointFieldNumber = 4;
  const ::std::string& private_endpoint() const;
  void set_private_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_private_endpoint(::std::string&& value);
  #endif
  void set_private_endpoint(const char* value);
  void set_private_endpoint(const char* value, size_t size);
  ::std::string* mutable_private_endpoint();
  ::std::string* release_private_endpoint();
  void set_allocated_private_endpoint(::std::string* private_endpoint);

  // string public_endpoint = 5;
  void clear_public_endpoint();
  static const int kPublicEndpointFieldNumber = 5;
  const ::std::string& public_endpoint() const;
  void set_public_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_public_endpoint(::std::string&& value);
  #endif
  void set_public_endpoint(const char* value);
  void set_public_endpoint(const char* value, size_t size);
  ::std::string* mutable_public_endpoint();
  ::std::string* release_public_endpoint();
  void set_allocated_public_endpoint(::std::string* public_endpoint);

  // string peering_name = 7;
  void clear_peering_name();
  static const int kPeeringNameFieldNumber = 7;
  const ::std::string& peering_name() const;
  void set_peering_name(const ::std::string& value);
  #if LANG_CXX11
  void set_peering_name(::std::string&& value);
  #endif
  void set_peering_name(const char* value);
  void set_peering_name(const char* value, size_t size);
  ::std::string* mutable_peering_name();
  ::std::string* release_peering_name();
  void set_allocated_peering_name(::std::string* peering_name);

  // .google.container.v1.PrivateClusterMasterGlobalAccessConfig master_global_access_config = 8;
  bool has_master_global_access_config() const;
  void clear_master_global_access_config();
  static const int kMasterGlobalAccessConfigFieldNumber = 8;
  const ::google::container::v1::PrivateClusterMasterGlobalAccessConfig& master_global_access_config() const;
  ::google::container::v1::PrivateClusterMasterGlobalAccessConfig* release_master_global_access_config();
  ::google::container::v1::PrivateClusterMasterGlobalAccessConfig* mutable_master_global_access_config();
  void set_allocated_master_global_access_config(::google::container::v1::PrivateClusterMasterGlobalAccessConfig* master_global_access_config);

  // bool enable_private_nodes = 1;
  void clear_enable_private_nodes();
  static const int kEnablePrivateNodesFieldNumber = 1;
  bool enable_private_nodes() const;
  void set_enable_private_nodes(bool value);

  // bool enable_private_endpoint = 2;
  void clear_enable_private_endpoint();
  static const int kEnablePrivateEndpointFieldNumber = 2;
  bool enable_private_endpoint() const;
  void set_enable_private_endpoint(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.PrivateClusterConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr master_ipv4_cidr_block_;
  ::google::protobuf::internal::ArenaStringPtr private_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr public_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr peering_name_;
  ::google::container::v1::PrivateClusterMasterGlobalAccessConfig* master_global_access_config_;
  bool enable_private_nodes_;
  bool enable_private_endpoint_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AuthenticatorGroupsConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.AuthenticatorGroupsConfig) */ {
 public:
  AuthenticatorGroupsConfig();
  virtual ~AuthenticatorGroupsConfig();

  AuthenticatorGroupsConfig(const AuthenticatorGroupsConfig& from);

  inline AuthenticatorGroupsConfig& operator=(const AuthenticatorGroupsConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthenticatorGroupsConfig(AuthenticatorGroupsConfig&& from) noexcept
    : AuthenticatorGroupsConfig() {
    *this = ::std::move(from);
  }

  inline AuthenticatorGroupsConfig& operator=(AuthenticatorGroupsConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AuthenticatorGroupsConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthenticatorGroupsConfig* internal_default_instance() {
    return reinterpret_cast<const AuthenticatorGroupsConfig*>(
               &_AuthenticatorGroupsConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(AuthenticatorGroupsConfig* other);
  friend void swap(AuthenticatorGroupsConfig& a, AuthenticatorGroupsConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthenticatorGroupsConfig* New() const final {
    return CreateMaybeMessage<AuthenticatorGroupsConfig>(nullptr);
  }

  AuthenticatorGroupsConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthenticatorGroupsConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AuthenticatorGroupsConfig& from);
  void MergeFrom(const AuthenticatorGroupsConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AuthenticatorGroupsConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string security_group = 2;
  void clear_security_group();
  static const int kSecurityGroupFieldNumber = 2;
  const ::std::string& security_group() const;
  void set_security_group(const ::std::string& value);
  #if LANG_CXX11
  void set_security_group(::std::string&& value);
  #endif
  void set_security_group(const char* value);
  void set_security_group(const char* value, size_t size);
  ::std::string* mutable_security_group();
  ::std::string* release_security_group();
  void set_allocated_security_group(::std::string* security_group);

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.AuthenticatorGroupsConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr security_group_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CloudRunConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CloudRunConfig) */ {
 public:
  CloudRunConfig();
  virtual ~CloudRunConfig();

  CloudRunConfig(const CloudRunConfig& from);

  inline CloudRunConfig& operator=(const CloudRunConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CloudRunConfig(CloudRunConfig&& from) noexcept
    : CloudRunConfig() {
    *this = ::std::move(from);
  }

  inline CloudRunConfig& operator=(CloudRunConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CloudRunConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CloudRunConfig* internal_default_instance() {
    return reinterpret_cast<const CloudRunConfig*>(
               &_CloudRunConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(CloudRunConfig* other);
  friend void swap(CloudRunConfig& a, CloudRunConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CloudRunConfig* New() const final {
    return CreateMaybeMessage<CloudRunConfig>(nullptr);
  }

  CloudRunConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CloudRunConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CloudRunConfig& from);
  void MergeFrom(const CloudRunConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CloudRunConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CloudRunConfig_LoadBalancerType LoadBalancerType;
  static const LoadBalancerType LOAD_BALANCER_TYPE_UNSPECIFIED =
    CloudRunConfig_LoadBalancerType_LOAD_BALANCER_TYPE_UNSPECIFIED;
  static const LoadBalancerType LOAD_BALANCER_TYPE_EXTERNAL =
    CloudRunConfig_LoadBalancerType_LOAD_BALANCER_TYPE_EXTERNAL;
  static const LoadBalancerType LOAD_BALANCER_TYPE_INTERNAL =
    CloudRunConfig_LoadBalancerType_LOAD_BALANCER_TYPE_INTERNAL;
  static inline bool LoadBalancerType_IsValid(int value) {
    return CloudRunConfig_LoadBalancerType_IsValid(value);
  }
  static const LoadBalancerType LoadBalancerType_MIN =
    CloudRunConfig_LoadBalancerType_LoadBalancerType_MIN;
  static const LoadBalancerType LoadBalancerType_MAX =
    CloudRunConfig_LoadBalancerType_LoadBalancerType_MAX;
  static const int LoadBalancerType_ARRAYSIZE =
    CloudRunConfig_LoadBalancerType_LoadBalancerType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  LoadBalancerType_descriptor() {
    return CloudRunConfig_LoadBalancerType_descriptor();
  }
  static inline const ::std::string& LoadBalancerType_Name(LoadBalancerType value) {
    return CloudRunConfig_LoadBalancerType_Name(value);
  }
  static inline bool LoadBalancerType_Parse(const ::std::string& name,
      LoadBalancerType* value) {
    return CloudRunConfig_LoadBalancerType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // .google.container.v1.CloudRunConfig.LoadBalancerType load_balancer_type = 3;
  void clear_load_balancer_type();
  static const int kLoadBalancerTypeFieldNumber = 3;
  ::google::container::v1::CloudRunConfig_LoadBalancerType load_balancer_type() const;
  void set_load_balancer_type(::google::container::v1::CloudRunConfig_LoadBalancerType value);

  // @@protoc_insertion_point(class_scope:google.container.v1.CloudRunConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  int load_balancer_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ConfigConnectorConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ConfigConnectorConfig) */ {
 public:
  ConfigConnectorConfig();
  virtual ~ConfigConnectorConfig();

  ConfigConnectorConfig(const ConfigConnectorConfig& from);

  inline ConfigConnectorConfig& operator=(const ConfigConnectorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfigConnectorConfig(ConfigConnectorConfig&& from) noexcept
    : ConfigConnectorConfig() {
    *this = ::std::move(from);
  }

  inline ConfigConnectorConfig& operator=(ConfigConnectorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ConfigConnectorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfigConnectorConfig* internal_default_instance() {
    return reinterpret_cast<const ConfigConnectorConfig*>(
               &_ConfigConnectorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ConfigConnectorConfig* other);
  friend void swap(ConfigConnectorConfig& a, ConfigConnectorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfigConnectorConfig* New() const final {
    return CreateMaybeMessage<ConfigConnectorConfig>(nullptr);
  }

  ConfigConnectorConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfigConnectorConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfigConnectorConfig& from);
  void MergeFrom(const ConfigConnectorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfigConnectorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ConfigConnectorConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MasterAuthorizedNetworksConfig_CidrBlock final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock) */ {
 public:
  MasterAuthorizedNetworksConfig_CidrBlock();
  virtual ~MasterAuthorizedNetworksConfig_CidrBlock();

  MasterAuthorizedNetworksConfig_CidrBlock(const MasterAuthorizedNetworksConfig_CidrBlock& from);

  inline MasterAuthorizedNetworksConfig_CidrBlock& operator=(const MasterAuthorizedNetworksConfig_CidrBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MasterAuthorizedNetworksConfig_CidrBlock(MasterAuthorizedNetworksConfig_CidrBlock&& from) noexcept
    : MasterAuthorizedNetworksConfig_CidrBlock() {
    *this = ::std::move(from);
  }

  inline MasterAuthorizedNetworksConfig_CidrBlock& operator=(MasterAuthorizedNetworksConfig_CidrBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MasterAuthorizedNetworksConfig_CidrBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterAuthorizedNetworksConfig_CidrBlock* internal_default_instance() {
    return reinterpret_cast<const MasterAuthorizedNetworksConfig_CidrBlock*>(
               &_MasterAuthorizedNetworksConfig_CidrBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(MasterAuthorizedNetworksConfig_CidrBlock* other);
  friend void swap(MasterAuthorizedNetworksConfig_CidrBlock& a, MasterAuthorizedNetworksConfig_CidrBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterAuthorizedNetworksConfig_CidrBlock* New() const final {
    return CreateMaybeMessage<MasterAuthorizedNetworksConfig_CidrBlock>(nullptr);
  }

  MasterAuthorizedNetworksConfig_CidrBlock* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MasterAuthorizedNetworksConfig_CidrBlock>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MasterAuthorizedNetworksConfig_CidrBlock& from);
  void MergeFrom(const MasterAuthorizedNetworksConfig_CidrBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterAuthorizedNetworksConfig_CidrBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string display_name = 1;
  void clear_display_name();
  static const int kDisplayNameFieldNumber = 1;
  const ::std::string& display_name() const;
  void set_display_name(const ::std::string& value);
  #if LANG_CXX11
  void set_display_name(::std::string&& value);
  #endif
  void set_display_name(const char* value);
  void set_display_name(const char* value, size_t size);
  ::std::string* mutable_display_name();
  ::std::string* release_display_name();
  void set_allocated_display_name(::std::string* display_name);

  // string cidr_block = 2;
  void clear_cidr_block();
  static const int kCidrBlockFieldNumber = 2;
  const ::std::string& cidr_block() const;
  void set_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_cidr_block(::std::string&& value);
  #endif
  void set_cidr_block(const char* value);
  void set_cidr_block(const char* value, size_t size);
  ::std::string* mutable_cidr_block();
  ::std::string* release_cidr_block();
  void set_allocated_cidr_block(::std::string* cidr_block);

  // @@protoc_insertion_point(class_scope:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr display_name_;
  ::google::protobuf::internal::ArenaStringPtr cidr_block_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MasterAuthorizedNetworksConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MasterAuthorizedNetworksConfig) */ {
 public:
  MasterAuthorizedNetworksConfig();
  virtual ~MasterAuthorizedNetworksConfig();

  MasterAuthorizedNetworksConfig(const MasterAuthorizedNetworksConfig& from);

  inline MasterAuthorizedNetworksConfig& operator=(const MasterAuthorizedNetworksConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MasterAuthorizedNetworksConfig(MasterAuthorizedNetworksConfig&& from) noexcept
    : MasterAuthorizedNetworksConfig() {
    *this = ::std::move(from);
  }

  inline MasterAuthorizedNetworksConfig& operator=(MasterAuthorizedNetworksConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MasterAuthorizedNetworksConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MasterAuthorizedNetworksConfig* internal_default_instance() {
    return reinterpret_cast<const MasterAuthorizedNetworksConfig*>(
               &_MasterAuthorizedNetworksConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(MasterAuthorizedNetworksConfig* other);
  friend void swap(MasterAuthorizedNetworksConfig& a, MasterAuthorizedNetworksConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MasterAuthorizedNetworksConfig* New() const final {
    return CreateMaybeMessage<MasterAuthorizedNetworksConfig>(nullptr);
  }

  MasterAuthorizedNetworksConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MasterAuthorizedNetworksConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MasterAuthorizedNetworksConfig& from);
  void MergeFrom(const MasterAuthorizedNetworksConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MasterAuthorizedNetworksConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MasterAuthorizedNetworksConfig_CidrBlock CidrBlock;

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
  int cidr_blocks_size() const;
  void clear_cidr_blocks();
  static const int kCidrBlocksFieldNumber = 2;
  ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* mutable_cidr_blocks(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >*
      mutable_cidr_blocks();
  const ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock& cidr_blocks(int index) const;
  ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* add_cidr_blocks();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >&
      cidr_blocks() const;

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.MasterAuthorizedNetworksConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock > cidr_blocks_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class LegacyAbac final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.LegacyAbac) */ {
 public:
  LegacyAbac();
  virtual ~LegacyAbac();

  LegacyAbac(const LegacyAbac& from);

  inline LegacyAbac& operator=(const LegacyAbac& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LegacyAbac(LegacyAbac&& from) noexcept
    : LegacyAbac() {
    *this = ::std::move(from);
  }

  inline LegacyAbac& operator=(LegacyAbac&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const LegacyAbac& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LegacyAbac* internal_default_instance() {
    return reinterpret_cast<const LegacyAbac*>(
               &_LegacyAbac_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(LegacyAbac* other);
  friend void swap(LegacyAbac& a, LegacyAbac& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LegacyAbac* New() const final {
    return CreateMaybeMessage<LegacyAbac>(nullptr);
  }

  LegacyAbac* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LegacyAbac>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LegacyAbac& from);
  void MergeFrom(const LegacyAbac& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LegacyAbac* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.LegacyAbac)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NetworkPolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NetworkPolicy) */ {
 public:
  NetworkPolicy();
  virtual ~NetworkPolicy();

  NetworkPolicy(const NetworkPolicy& from);

  inline NetworkPolicy& operator=(const NetworkPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkPolicy(NetworkPolicy&& from) noexcept
    : NetworkPolicy() {
    *this = ::std::move(from);
  }

  inline NetworkPolicy& operator=(NetworkPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NetworkPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkPolicy* internal_default_instance() {
    return reinterpret_cast<const NetworkPolicy*>(
               &_NetworkPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(NetworkPolicy* other);
  friend void swap(NetworkPolicy& a, NetworkPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkPolicy* New() const final {
    return CreateMaybeMessage<NetworkPolicy>(nullptr);
  }

  NetworkPolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkPolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkPolicy& from);
  void MergeFrom(const NetworkPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NetworkPolicy_Provider Provider;
  static const Provider PROVIDER_UNSPECIFIED =
    NetworkPolicy_Provider_PROVIDER_UNSPECIFIED;
  static const Provider CALICO =
    NetworkPolicy_Provider_CALICO;
  static inline bool Provider_IsValid(int value) {
    return NetworkPolicy_Provider_IsValid(value);
  }
  static const Provider Provider_MIN =
    NetworkPolicy_Provider_Provider_MIN;
  static const Provider Provider_MAX =
    NetworkPolicy_Provider_Provider_MAX;
  static const int Provider_ARRAYSIZE =
    NetworkPolicy_Provider_Provider_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Provider_descriptor() {
    return NetworkPolicy_Provider_descriptor();
  }
  static inline const ::std::string& Provider_Name(Provider value) {
    return NetworkPolicy_Provider_Name(value);
  }
  static inline bool Provider_Parse(const ::std::string& name,
      Provider* value) {
    return NetworkPolicy_Provider_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.container.v1.NetworkPolicy.Provider provider = 1;
  void clear_provider();
  static const int kProviderFieldNumber = 1;
  ::google::container::v1::NetworkPolicy_Provider provider() const;
  void set_provider(::google::container::v1::NetworkPolicy_Provider value);

  // bool enabled = 2;
  void clear_enabled();
  static const int kEnabledFieldNumber = 2;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NetworkPolicy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int provider_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BinaryAuthorization final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.BinaryAuthorization) */ {
 public:
  BinaryAuthorization();
  virtual ~BinaryAuthorization();

  BinaryAuthorization(const BinaryAuthorization& from);

  inline BinaryAuthorization& operator=(const BinaryAuthorization& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BinaryAuthorization(BinaryAuthorization&& from) noexcept
    : BinaryAuthorization() {
    *this = ::std::move(from);
  }

  inline BinaryAuthorization& operator=(BinaryAuthorization&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BinaryAuthorization& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BinaryAuthorization* internal_default_instance() {
    return reinterpret_cast<const BinaryAuthorization*>(
               &_BinaryAuthorization_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(BinaryAuthorization* other);
  friend void swap(BinaryAuthorization& a, BinaryAuthorization& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BinaryAuthorization* New() const final {
    return CreateMaybeMessage<BinaryAuthorization>(nullptr);
  }

  BinaryAuthorization* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BinaryAuthorization>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BinaryAuthorization& from);
  void MergeFrom(const BinaryAuthorization& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BinaryAuthorization* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.BinaryAuthorization)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class IPAllocationPolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.IPAllocationPolicy) */ {
 public:
  IPAllocationPolicy();
  virtual ~IPAllocationPolicy();

  IPAllocationPolicy(const IPAllocationPolicy& from);

  inline IPAllocationPolicy& operator=(const IPAllocationPolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IPAllocationPolicy(IPAllocationPolicy&& from) noexcept
    : IPAllocationPolicy() {
    *this = ::std::move(from);
  }

  inline IPAllocationPolicy& operator=(IPAllocationPolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IPAllocationPolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IPAllocationPolicy* internal_default_instance() {
    return reinterpret_cast<const IPAllocationPolicy*>(
               &_IPAllocationPolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(IPAllocationPolicy* other);
  friend void swap(IPAllocationPolicy& a, IPAllocationPolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IPAllocationPolicy* New() const final {
    return CreateMaybeMessage<IPAllocationPolicy>(nullptr);
  }

  IPAllocationPolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IPAllocationPolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IPAllocationPolicy& from);
  void MergeFrom(const IPAllocationPolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IPAllocationPolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string subnetwork_name = 3;
  void clear_subnetwork_name();
  static const int kSubnetworkNameFieldNumber = 3;
  const ::std::string& subnetwork_name() const;
  void set_subnetwork_name(const ::std::string& value);
  #if LANG_CXX11
  void set_subnetwork_name(::std::string&& value);
  #endif
  void set_subnetwork_name(const char* value);
  void set_subnetwork_name(const char* value, size_t size);
  ::std::string* mutable_subnetwork_name();
  ::std::string* release_subnetwork_name();
  void set_allocated_subnetwork_name(::std::string* subnetwork_name);

  // string cluster_ipv4_cidr = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_ipv4_cidr();
  PROTOBUF_DEPRECATED static const int kClusterIpv4CidrFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::std::string& cluster_ipv4_cidr() const;
  PROTOBUF_DEPRECATED void set_cluster_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_ipv4_cidr(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_ipv4_cidr(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_ipv4_cidr(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_ipv4_cidr();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_ipv4_cidr();
  PROTOBUF_DEPRECATED void set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr);

  // string node_ipv4_cidr = 5 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_node_ipv4_cidr();
  PROTOBUF_DEPRECATED static const int kNodeIpv4CidrFieldNumber = 5;
  PROTOBUF_DEPRECATED const ::std::string& node_ipv4_cidr() const;
  PROTOBUF_DEPRECATED void set_node_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_node_ipv4_cidr(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_node_ipv4_cidr(const char* value);
  PROTOBUF_DEPRECATED void set_node_ipv4_cidr(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_node_ipv4_cidr();
  PROTOBUF_DEPRECATED ::std::string* release_node_ipv4_cidr();
  PROTOBUF_DEPRECATED void set_allocated_node_ipv4_cidr(::std::string* node_ipv4_cidr);

  // string services_ipv4_cidr = 6 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_services_ipv4_cidr();
  PROTOBUF_DEPRECATED static const int kServicesIpv4CidrFieldNumber = 6;
  PROTOBUF_DEPRECATED const ::std::string& services_ipv4_cidr() const;
  PROTOBUF_DEPRECATED void set_services_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_services_ipv4_cidr(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_services_ipv4_cidr(const char* value);
  PROTOBUF_DEPRECATED void set_services_ipv4_cidr(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_services_ipv4_cidr();
  PROTOBUF_DEPRECATED ::std::string* release_services_ipv4_cidr();
  PROTOBUF_DEPRECATED void set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr);

  // string cluster_secondary_range_name = 7;
  void clear_cluster_secondary_range_name();
  static const int kClusterSecondaryRangeNameFieldNumber = 7;
  const ::std::string& cluster_secondary_range_name() const;
  void set_cluster_secondary_range_name(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_secondary_range_name(::std::string&& value);
  #endif
  void set_cluster_secondary_range_name(const char* value);
  void set_cluster_secondary_range_name(const char* value, size_t size);
  ::std::string* mutable_cluster_secondary_range_name();
  ::std::string* release_cluster_secondary_range_name();
  void set_allocated_cluster_secondary_range_name(::std::string* cluster_secondary_range_name);

  // string services_secondary_range_name = 8;
  void clear_services_secondary_range_name();
  static const int kServicesSecondaryRangeNameFieldNumber = 8;
  const ::std::string& services_secondary_range_name() const;
  void set_services_secondary_range_name(const ::std::string& value);
  #if LANG_CXX11
  void set_services_secondary_range_name(::std::string&& value);
  #endif
  void set_services_secondary_range_name(const char* value);
  void set_services_secondary_range_name(const char* value, size_t size);
  ::std::string* mutable_services_secondary_range_name();
  ::std::string* release_services_secondary_range_name();
  void set_allocated_services_secondary_range_name(::std::string* services_secondary_range_name);

  // string cluster_ipv4_cidr_block = 9;
  void clear_cluster_ipv4_cidr_block();
  static const int kClusterIpv4CidrBlockFieldNumber = 9;
  const ::std::string& cluster_ipv4_cidr_block() const;
  void set_cluster_ipv4_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_ipv4_cidr_block(::std::string&& value);
  #endif
  void set_cluster_ipv4_cidr_block(const char* value);
  void set_cluster_ipv4_cidr_block(const char* value, size_t size);
  ::std::string* mutable_cluster_ipv4_cidr_block();
  ::std::string* release_cluster_ipv4_cidr_block();
  void set_allocated_cluster_ipv4_cidr_block(::std::string* cluster_ipv4_cidr_block);

  // string node_ipv4_cidr_block = 10;
  void clear_node_ipv4_cidr_block();
  static const int kNodeIpv4CidrBlockFieldNumber = 10;
  const ::std::string& node_ipv4_cidr_block() const;
  void set_node_ipv4_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_node_ipv4_cidr_block(::std::string&& value);
  #endif
  void set_node_ipv4_cidr_block(const char* value);
  void set_node_ipv4_cidr_block(const char* value, size_t size);
  ::std::string* mutable_node_ipv4_cidr_block();
  ::std::string* release_node_ipv4_cidr_block();
  void set_allocated_node_ipv4_cidr_block(::std::string* node_ipv4_cidr_block);

  // string services_ipv4_cidr_block = 11;
  void clear_services_ipv4_cidr_block();
  static const int kServicesIpv4CidrBlockFieldNumber = 11;
  const ::std::string& services_ipv4_cidr_block() const;
  void set_services_ipv4_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_services_ipv4_cidr_block(::std::string&& value);
  #endif
  void set_services_ipv4_cidr_block(const char* value);
  void set_services_ipv4_cidr_block(const char* value, size_t size);
  ::std::string* mutable_services_ipv4_cidr_block();
  ::std::string* release_services_ipv4_cidr_block();
  void set_allocated_services_ipv4_cidr_block(::std::string* services_ipv4_cidr_block);

  // string tpu_ipv4_cidr_block = 13;
  void clear_tpu_ipv4_cidr_block();
  static const int kTpuIpv4CidrBlockFieldNumber = 13;
  const ::std::string& tpu_ipv4_cidr_block() const;
  void set_tpu_ipv4_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_tpu_ipv4_cidr_block(::std::string&& value);
  #endif
  void set_tpu_ipv4_cidr_block(const char* value);
  void set_tpu_ipv4_cidr_block(const char* value, size_t size);
  ::std::string* mutable_tpu_ipv4_cidr_block();
  ::std::string* release_tpu_ipv4_cidr_block();
  void set_allocated_tpu_ipv4_cidr_block(::std::string* tpu_ipv4_cidr_block);

  // bool use_ip_aliases = 1;
  void clear_use_ip_aliases();
  static const int kUseIpAliasesFieldNumber = 1;
  bool use_ip_aliases() const;
  void set_use_ip_aliases(bool value);

  // bool create_subnetwork = 2;
  void clear_create_subnetwork();
  static const int kCreateSubnetworkFieldNumber = 2;
  bool create_subnetwork() const;
  void set_create_subnetwork(bool value);

  // bool use_routes = 15;
  void clear_use_routes();
  static const int kUseRoutesFieldNumber = 15;
  bool use_routes() const;
  void set_use_routes(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.IPAllocationPolicy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr subnetwork_name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr node_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr services_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr cluster_secondary_range_name_;
  ::google::protobuf::internal::ArenaStringPtr services_secondary_range_name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ipv4_cidr_block_;
  ::google::protobuf::internal::ArenaStringPtr node_ipv4_cidr_block_;
  ::google::protobuf::internal::ArenaStringPtr services_ipv4_cidr_block_;
  ::google::protobuf::internal::ArenaStringPtr tpu_ipv4_cidr_block_;
  bool use_ip_aliases_;
  bool create_subnetwork_;
  bool use_routes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Cluster_ResourceLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<Cluster_ResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<Cluster_ResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  Cluster_ResourceLabelsEntry_DoNotUse();
  Cluster_ResourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const Cluster_ResourceLabelsEntry_DoNotUse& other);
  static const Cluster_ResourceLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Cluster_ResourceLabelsEntry_DoNotUse*>(&_Cluster_ResourceLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class Cluster final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.Cluster) */ {
 public:
  Cluster();
  virtual ~Cluster();

  Cluster(const Cluster& from);

  inline Cluster& operator=(const Cluster& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cluster(Cluster&& from) noexcept
    : Cluster() {
    *this = ::std::move(from);
  }

  inline Cluster& operator=(Cluster&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Cluster& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cluster* internal_default_instance() {
    return reinterpret_cast<const Cluster*>(
               &_Cluster_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(Cluster* other);
  friend void swap(Cluster& a, Cluster& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cluster* New() const final {
    return CreateMaybeMessage<Cluster>(nullptr);
  }

  Cluster* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Cluster>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Cluster& from);
  void MergeFrom(const Cluster& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Cluster* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  typedef Cluster_Status Status;
  static const Status STATUS_UNSPECIFIED =
    Cluster_Status_STATUS_UNSPECIFIED;
  static const Status PROVISIONING =
    Cluster_Status_PROVISIONING;
  static const Status RUNNING =
    Cluster_Status_RUNNING;
  static const Status RECONCILING =
    Cluster_Status_RECONCILING;
  static const Status STOPPING =
    Cluster_Status_STOPPING;
  static const Status ERROR =
    Cluster_Status_ERROR;
  static const Status DEGRADED =
    Cluster_Status_DEGRADED;
  static inline bool Status_IsValid(int value) {
    return Cluster_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Cluster_Status_Status_MIN;
  static const Status Status_MAX =
    Cluster_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Cluster_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Cluster_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Cluster_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Cluster_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.NodePool node_pools = 12;
  int node_pools_size() const;
  void clear_node_pools();
  static const int kNodePoolsFieldNumber = 12;
  ::google::container::v1::NodePool* mutable_node_pools(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
      mutable_node_pools();
  const ::google::container::v1::NodePool& node_pools(int index) const;
  ::google::container::v1::NodePool* add_node_pools();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
      node_pools() const;

  // repeated string locations = 13;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 13;
  const ::std::string& locations(int index) const;
  ::std::string* mutable_locations(int index);
  void set_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_locations(int index, ::std::string&& value);
  #endif
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  ::std::string* add_locations();
  void add_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_locations(::std::string&& value);
  #endif
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& locations() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_locations();

  // map<string, string> resource_labels = 15;
  int resource_labels_size() const;
  void clear_resource_labels();
  static const int kResourceLabelsFieldNumber = 15;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      resource_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_resource_labels();

  // repeated string instance_group_urls = 111 [deprecated = true];
  PROTOBUF_DEPRECATED int instance_group_urls_size() const;
  PROTOBUF_DEPRECATED void clear_instance_group_urls();
  PROTOBUF_DEPRECATED static const int kInstanceGroupUrlsFieldNumber = 111;
  PROTOBUF_DEPRECATED const ::std::string& instance_group_urls(int index) const;
  PROTOBUF_DEPRECATED ::std::string* mutable_instance_group_urls(int index);
  PROTOBUF_DEPRECATED void set_instance_group_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_instance_group_urls(int index, ::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_instance_group_urls(int index, const char* value);
  PROTOBUF_DEPRECATED void set_instance_group_urls(int index, const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* add_instance_group_urls();
  PROTOBUF_DEPRECATED void add_instance_group_urls(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void add_instance_group_urls(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void add_instance_group_urls(const char* value);
  PROTOBUF_DEPRECATED void add_instance_group_urls(const char* value, size_t size);
  PROTOBUF_DEPRECATED const ::google::protobuf::RepeatedPtrField<::std::string>& instance_group_urls() const;
  PROTOBUF_DEPRECATED ::google::protobuf::RepeatedPtrField<::std::string>* mutable_instance_group_urls();

  // repeated .google.container.v1.StatusCondition conditions = 118;
  int conditions_size() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 118;
  ::google::container::v1::StatusCondition* mutable_conditions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >*
      mutable_conditions();
  const ::google::container::v1::StatusCondition& conditions(int index) const;
  ::google::container::v1::StatusCondition* add_conditions();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >&
      conditions() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // string logging_service = 6;
  void clear_logging_service();
  static const int kLoggingServiceFieldNumber = 6;
  const ::std::string& logging_service() const;
  void set_logging_service(const ::std::string& value);
  #if LANG_CXX11
  void set_logging_service(::std::string&& value);
  #endif
  void set_logging_service(const char* value);
  void set_logging_service(const char* value, size_t size);
  ::std::string* mutable_logging_service();
  ::std::string* release_logging_service();
  void set_allocated_logging_service(::std::string* logging_service);

  // string monitoring_service = 7;
  void clear_monitoring_service();
  static const int kMonitoringServiceFieldNumber = 7;
  const ::std::string& monitoring_service() const;
  void set_monitoring_service(const ::std::string& value);
  #if LANG_CXX11
  void set_monitoring_service(::std::string&& value);
  #endif
  void set_monitoring_service(const char* value);
  void set_monitoring_service(const char* value, size_t size);
  ::std::string* mutable_monitoring_service();
  ::std::string* release_monitoring_service();
  void set_allocated_monitoring_service(::std::string* monitoring_service);

  // string network = 8;
  void clear_network();
  static const int kNetworkFieldNumber = 8;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  #if LANG_CXX11
  void set_network(::std::string&& value);
  #endif
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // string cluster_ipv4_cidr = 9;
  void clear_cluster_ipv4_cidr();
  static const int kClusterIpv4CidrFieldNumber = 9;
  const ::std::string& cluster_ipv4_cidr() const;
  void set_cluster_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_ipv4_cidr(::std::string&& value);
  #endif
  void set_cluster_ipv4_cidr(const char* value);
  void set_cluster_ipv4_cidr(const char* value, size_t size);
  ::std::string* mutable_cluster_ipv4_cidr();
  ::std::string* release_cluster_ipv4_cidr();
  void set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr);

  // string subnetwork = 11;
  void clear_subnetwork();
  static const int kSubnetworkFieldNumber = 11;
  const ::std::string& subnetwork() const;
  void set_subnetwork(const ::std::string& value);
  #if LANG_CXX11
  void set_subnetwork(::std::string&& value);
  #endif
  void set_subnetwork(const char* value);
  void set_subnetwork(const char* value, size_t size);
  ::std::string* mutable_subnetwork();
  ::std::string* release_subnetwork();
  void set_allocated_subnetwork(::std::string* subnetwork);

  // string label_fingerprint = 16;
  void clear_label_fingerprint();
  static const int kLabelFingerprintFieldNumber = 16;
  const ::std::string& label_fingerprint() const;
  void set_label_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_label_fingerprint(::std::string&& value);
  #endif
  void set_label_fingerprint(const char* value);
  void set_label_fingerprint(const char* value, size_t size);
  ::std::string* mutable_label_fingerprint();
  ::std::string* release_label_fingerprint();
  void set_allocated_label_fingerprint(::std::string* label_fingerprint);

  // string self_link = 100;
  void clear_self_link();
  static const int kSelfLinkFieldNumber = 100;
  const ::std::string& self_link() const;
  void set_self_link(const ::std::string& value);
  #if LANG_CXX11
  void set_self_link(::std::string&& value);
  #endif
  void set_self_link(const char* value);
  void set_self_link(const char* value, size_t size);
  ::std::string* mutable_self_link();
  ::std::string* release_self_link();
  void set_allocated_self_link(::std::string* self_link);

  // string zone = 101 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 101;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string endpoint = 102;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 102;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // string initial_cluster_version = 103;
  void clear_initial_cluster_version();
  static const int kInitialClusterVersionFieldNumber = 103;
  const ::std::string& initial_cluster_version() const;
  void set_initial_cluster_version(const ::std::string& value);
  #if LANG_CXX11
  void set_initial_cluster_version(::std::string&& value);
  #endif
  void set_initial_cluster_version(const char* value);
  void set_initial_cluster_version(const char* value, size_t size);
  ::std::string* mutable_initial_cluster_version();
  ::std::string* release_initial_cluster_version();
  void set_allocated_initial_cluster_version(::std::string* initial_cluster_version);

  // string current_master_version = 104;
  void clear_current_master_version();
  static const int kCurrentMasterVersionFieldNumber = 104;
  const ::std::string& current_master_version() const;
  void set_current_master_version(const ::std::string& value);
  #if LANG_CXX11
  void set_current_master_version(::std::string&& value);
  #endif
  void set_current_master_version(const char* value);
  void set_current_master_version(const char* value, size_t size);
  ::std::string* mutable_current_master_version();
  ::std::string* release_current_master_version();
  void set_allocated_current_master_version(::std::string* current_master_version);

  // string current_node_version = 105 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_current_node_version();
  PROTOBUF_DEPRECATED static const int kCurrentNodeVersionFieldNumber = 105;
  PROTOBUF_DEPRECATED const ::std::string& current_node_version() const;
  PROTOBUF_DEPRECATED void set_current_node_version(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_current_node_version(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_current_node_version(const char* value);
  PROTOBUF_DEPRECATED void set_current_node_version(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_current_node_version();
  PROTOBUF_DEPRECATED ::std::string* release_current_node_version();
  PROTOBUF_DEPRECATED void set_allocated_current_node_version(::std::string* current_node_version);

  // string create_time = 106;
  void clear_create_time();
  static const int kCreateTimeFieldNumber = 106;
  const ::std::string& create_time() const;
  void set_create_time(const ::std::string& value);
  #if LANG_CXX11
  void set_create_time(::std::string&& value);
  #endif
  void set_create_time(const char* value);
  void set_create_time(const char* value, size_t size);
  ::std::string* mutable_create_time();
  ::std::string* release_create_time();
  void set_allocated_create_time(::std::string* create_time);

  // string status_message = 108 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_status_message();
  PROTOBUF_DEPRECATED static const int kStatusMessageFieldNumber = 108;
  PROTOBUF_DEPRECATED const ::std::string& status_message() const;
  PROTOBUF_DEPRECATED void set_status_message(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_status_message(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_status_message(const char* value);
  PROTOBUF_DEPRECATED void set_status_message(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_status_message();
  PROTOBUF_DEPRECATED ::std::string* release_status_message();
  PROTOBUF_DEPRECATED void set_allocated_status_message(::std::string* status_message);

  // string services_ipv4_cidr = 110;
  void clear_services_ipv4_cidr();
  static const int kServicesIpv4CidrFieldNumber = 110;
  const ::std::string& services_ipv4_cidr() const;
  void set_services_ipv4_cidr(const ::std::string& value);
  #if LANG_CXX11
  void set_services_ipv4_cidr(::std::string&& value);
  #endif
  void set_services_ipv4_cidr(const char* value);
  void set_services_ipv4_cidr(const char* value, size_t size);
  ::std::string* mutable_services_ipv4_cidr();
  ::std::string* release_services_ipv4_cidr();
  void set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr);

  // string expire_time = 113;
  void clear_expire_time();
  static const int kExpireTimeFieldNumber = 113;
  const ::std::string& expire_time() const;
  void set_expire_time(const ::std::string& value);
  #if LANG_CXX11
  void set_expire_time(::std::string&& value);
  #endif
  void set_expire_time(const char* value);
  void set_expire_time(const char* value, size_t size);
  ::std::string* mutable_expire_time();
  ::std::string* release_expire_time();
  void set_allocated_expire_time(::std::string* expire_time);

  // string location = 114;
  void clear_location();
  static const int kLocationFieldNumber = 114;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string tpu_ipv4_cidr_block = 116;
  void clear_tpu_ipv4_cidr_block();
  static const int kTpuIpv4CidrBlockFieldNumber = 116;
  const ::std::string& tpu_ipv4_cidr_block() const;
  void set_tpu_ipv4_cidr_block(const ::std::string& value);
  #if LANG_CXX11
  void set_tpu_ipv4_cidr_block(::std::string&& value);
  #endif
  void set_tpu_ipv4_cidr_block(const char* value);
  void set_tpu_ipv4_cidr_block(const char* value, size_t size);
  ::std::string* mutable_tpu_ipv4_cidr_block();
  ::std::string* release_tpu_ipv4_cidr_block();
  void set_allocated_tpu_ipv4_cidr_block(::std::string* tpu_ipv4_cidr_block);

  // .google.container.v1.NodeConfig node_config = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_node_config() const;
  PROTOBUF_DEPRECATED void clear_node_config();
  PROTOBUF_DEPRECATED static const int kNodeConfigFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::google::container::v1::NodeConfig& node_config() const;
  PROTOBUF_DEPRECATED ::google::container::v1::NodeConfig* release_node_config();
  PROTOBUF_DEPRECATED ::google::container::v1::NodeConfig* mutable_node_config();
  PROTOBUF_DEPRECATED void set_allocated_node_config(::google::container::v1::NodeConfig* node_config);

  // .google.container.v1.MasterAuth master_auth = 5;
  bool has_master_auth() const;
  void clear_master_auth();
  static const int kMasterAuthFieldNumber = 5;
  const ::google::container::v1::MasterAuth& master_auth() const;
  ::google::container::v1::MasterAuth* release_master_auth();
  ::google::container::v1::MasterAuth* mutable_master_auth();
  void set_allocated_master_auth(::google::container::v1::MasterAuth* master_auth);

  // .google.container.v1.AddonsConfig addons_config = 10;
  bool has_addons_config() const;
  void clear_addons_config();
  static const int kAddonsConfigFieldNumber = 10;
  const ::google::container::v1::AddonsConfig& addons_config() const;
  ::google::container::v1::AddonsConfig* release_addons_config();
  ::google::container::v1::AddonsConfig* mutable_addons_config();
  void set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config);

  // .google.container.v1.LegacyAbac legacy_abac = 18;
  bool has_legacy_abac() const;
  void clear_legacy_abac();
  static const int kLegacyAbacFieldNumber = 18;
  const ::google::container::v1::LegacyAbac& legacy_abac() const;
  ::google::container::v1::LegacyAbac* release_legacy_abac();
  ::google::container::v1::LegacyAbac* mutable_legacy_abac();
  void set_allocated_legacy_abac(::google::container::v1::LegacyAbac* legacy_abac);

  // .google.container.v1.NetworkPolicy network_policy = 19;
  bool has_network_policy() const;
  void clear_network_policy();
  static const int kNetworkPolicyFieldNumber = 19;
  const ::google::container::v1::NetworkPolicy& network_policy() const;
  ::google::container::v1::NetworkPolicy* release_network_policy();
  ::google::container::v1::NetworkPolicy* mutable_network_policy();
  void set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy);

  // .google.container.v1.IPAllocationPolicy ip_allocation_policy = 20;
  bool has_ip_allocation_policy() const;
  void clear_ip_allocation_policy();
  static const int kIpAllocationPolicyFieldNumber = 20;
  const ::google::container::v1::IPAllocationPolicy& ip_allocation_policy() const;
  ::google::container::v1::IPAllocationPolicy* release_ip_allocation_policy();
  ::google::container::v1::IPAllocationPolicy* mutable_ip_allocation_policy();
  void set_allocated_ip_allocation_policy(::google::container::v1::IPAllocationPolicy* ip_allocation_policy);

  // .google.container.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 22;
  bool has_master_authorized_networks_config() const;
  void clear_master_authorized_networks_config();
  static const int kMasterAuthorizedNetworksConfigFieldNumber = 22;
  const ::google::container::v1::MasterAuthorizedNetworksConfig& master_authorized_networks_config() const;
  ::google::container::v1::MasterAuthorizedNetworksConfig* release_master_authorized_networks_config();
  ::google::container::v1::MasterAuthorizedNetworksConfig* mutable_master_authorized_networks_config();
  void set_allocated_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* master_authorized_networks_config);

  // .google.container.v1.MaintenancePolicy maintenance_policy = 23;
  bool has_maintenance_policy() const;
  void clear_maintenance_policy();
  static const int kMaintenancePolicyFieldNumber = 23;
  const ::google::container::v1::MaintenancePolicy& maintenance_policy() const;
  ::google::container::v1::MaintenancePolicy* release_maintenance_policy();
  ::google::container::v1::MaintenancePolicy* mutable_maintenance_policy();
  void set_allocated_maintenance_policy(::google::container::v1::MaintenancePolicy* maintenance_policy);

  // .google.container.v1.BinaryAuthorization binary_authorization = 24;
  bool has_binary_authorization() const;
  void clear_binary_authorization();
  static const int kBinaryAuthorizationFieldNumber = 24;
  const ::google::container::v1::BinaryAuthorization& binary_authorization() const;
  ::google::container::v1::BinaryAuthorization* release_binary_authorization();
  ::google::container::v1::BinaryAuthorization* mutable_binary_authorization();
  void set_allocated_binary_authorization(::google::container::v1::BinaryAuthorization* binary_authorization);

  // .google.container.v1.ClusterAutoscaling autoscaling = 26;
  bool has_autoscaling() const;
  void clear_autoscaling();
  static const int kAutoscalingFieldNumber = 26;
  const ::google::container::v1::ClusterAutoscaling& autoscaling() const;
  ::google::container::v1::ClusterAutoscaling* release_autoscaling();
  ::google::container::v1::ClusterAutoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::google::container::v1::ClusterAutoscaling* autoscaling);

  // .google.container.v1.NetworkConfig network_config = 27;
  bool has_network_config() const;
  void clear_network_config();
  static const int kNetworkConfigFieldNumber = 27;
  const ::google::container::v1::NetworkConfig& network_config() const;
  ::google::container::v1::NetworkConfig* release_network_config();
  ::google::container::v1::NetworkConfig* mutable_network_config();
  void set_allocated_network_config(::google::container::v1::NetworkConfig* network_config);

  // .google.container.v1.MaxPodsConstraint default_max_pods_constraint = 30;
  bool has_default_max_pods_constraint() const;
  void clear_default_max_pods_constraint();
  static const int kDefaultMaxPodsConstraintFieldNumber = 30;
  const ::google::container::v1::MaxPodsConstraint& default_max_pods_constraint() const;
  ::google::container::v1::MaxPodsConstraint* release_default_max_pods_constraint();
  ::google::container::v1::MaxPodsConstraint* mutable_default_max_pods_constraint();
  void set_allocated_default_max_pods_constraint(::google::container::v1::MaxPodsConstraint* default_max_pods_constraint);

  // .google.container.v1.ResourceUsageExportConfig resource_usage_export_config = 33;
  bool has_resource_usage_export_config() const;
  void clear_resource_usage_export_config();
  static const int kResourceUsageExportConfigFieldNumber = 33;
  const ::google::container::v1::ResourceUsageExportConfig& resource_usage_export_config() const;
  ::google::container::v1::ResourceUsageExportConfig* release_resource_usage_export_config();
  ::google::container::v1::ResourceUsageExportConfig* mutable_resource_usage_export_config();
  void set_allocated_resource_usage_export_config(::google::container::v1::ResourceUsageExportConfig* resource_usage_export_config);

  // .google.container.v1.AuthenticatorGroupsConfig authenticator_groups_config = 34;
  bool has_authenticator_groups_config() const;
  void clear_authenticator_groups_config();
  static const int kAuthenticatorGroupsConfigFieldNumber = 34;
  const ::google::container::v1::AuthenticatorGroupsConfig& authenticator_groups_config() const;
  ::google::container::v1::AuthenticatorGroupsConfig* release_authenticator_groups_config();
  ::google::container::v1::AuthenticatorGroupsConfig* mutable_authenticator_groups_config();
  void set_allocated_authenticator_groups_config(::google::container::v1::AuthenticatorGroupsConfig* authenticator_groups_config);

  // .google.container.v1.PrivateClusterConfig private_cluster_config = 37;
  bool has_private_cluster_config() const;
  void clear_private_cluster_config();
  static const int kPrivateClusterConfigFieldNumber = 37;
  const ::google::container::v1::PrivateClusterConfig& private_cluster_config() const;
  ::google::container::v1::PrivateClusterConfig* release_private_cluster_config();
  ::google::container::v1::PrivateClusterConfig* mutable_private_cluster_config();
  void set_allocated_private_cluster_config(::google::container::v1::PrivateClusterConfig* private_cluster_config);

  // .google.container.v1.DatabaseEncryption database_encryption = 38;
  bool has_database_encryption() const;
  void clear_database_encryption();
  static const int kDatabaseEncryptionFieldNumber = 38;
  const ::google::container::v1::DatabaseEncryption& database_encryption() const;
  ::google::container::v1::DatabaseEncryption* release_database_encryption();
  ::google::container::v1::DatabaseEncryption* mutable_database_encryption();
  void set_allocated_database_encryption(::google::container::v1::DatabaseEncryption* database_encryption);

  // .google.container.v1.VerticalPodAutoscaling vertical_pod_autoscaling = 39;
  bool has_vertical_pod_autoscaling() const;
  void clear_vertical_pod_autoscaling();
  static const int kVerticalPodAutoscalingFieldNumber = 39;
  const ::google::container::v1::VerticalPodAutoscaling& vertical_pod_autoscaling() const;
  ::google::container::v1::VerticalPodAutoscaling* release_vertical_pod_autoscaling();
  ::google::container::v1::VerticalPodAutoscaling* mutable_vertical_pod_autoscaling();
  void set_allocated_vertical_pod_autoscaling(::google::container::v1::VerticalPodAutoscaling* vertical_pod_autoscaling);

  // .google.container.v1.ShieldedNodes shielded_nodes = 40;
  bool has_shielded_nodes() const;
  void clear_shielded_nodes();
  static const int kShieldedNodesFieldNumber = 40;
  const ::google::container::v1::ShieldedNodes& shielded_nodes() const;
  ::google::container::v1::ShieldedNodes* release_shielded_nodes();
  ::google::container::v1::ShieldedNodes* mutable_shielded_nodes();
  void set_allocated_shielded_nodes(::google::container::v1::ShieldedNodes* shielded_nodes);

  // .google.container.v1.ReleaseChannel release_channel = 41;
  bool has_release_channel() const;
  void clear_release_channel();
  static const int kReleaseChannelFieldNumber = 41;
  const ::google::container::v1::ReleaseChannel& release_channel() const;
  ::google::container::v1::ReleaseChannel* release_release_channel();
  ::google::container::v1::ReleaseChannel* mutable_release_channel();
  void set_allocated_release_channel(::google::container::v1::ReleaseChannel* release_channel);

  // .google.container.v1.WorkloadIdentityConfig workload_identity_config = 43;
  bool has_workload_identity_config() const;
  void clear_workload_identity_config();
  static const int kWorkloadIdentityConfigFieldNumber = 43;
  const ::google::container::v1::WorkloadIdentityConfig& workload_identity_config() const;
  ::google::container::v1::WorkloadIdentityConfig* release_workload_identity_config();
  ::google::container::v1::WorkloadIdentityConfig* mutable_workload_identity_config();
  void set_allocated_workload_identity_config(::google::container::v1::WorkloadIdentityConfig* workload_identity_config);

  // int32 initial_node_count = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_initial_node_count();
  PROTOBUF_DEPRECATED static const int kInitialNodeCountFieldNumber = 3;
  PROTOBUF_DEPRECATED ::google::protobuf::int32 initial_node_count() const;
  PROTOBUF_DEPRECATED void set_initial_node_count(::google::protobuf::int32 value);

  // bool enable_kubernetes_alpha = 14;
  void clear_enable_kubernetes_alpha();
  static const int kEnableKubernetesAlphaFieldNumber = 14;
  bool enable_kubernetes_alpha() const;
  void set_enable_kubernetes_alpha(bool value);

  // bool enable_tpu = 115;
  void clear_enable_tpu();
  static const int kEnableTpuFieldNumber = 115;
  bool enable_tpu() const;
  void set_enable_tpu(bool value);

  // int32 current_node_count = 112 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_current_node_count();
  PROTOBUF_DEPRECATED static const int kCurrentNodeCountFieldNumber = 112;
  PROTOBUF_DEPRECATED ::google::protobuf::int32 current_node_count() const;
  PROTOBUF_DEPRECATED void set_current_node_count(::google::protobuf::int32 value);

  // .google.container.v1.Cluster.Status status = 107;
  void clear_status();
  static const int kStatusFieldNumber = 107;
  ::google::container::v1::Cluster_Status status() const;
  void set_status(::google::container::v1::Cluster_Status value);

  // int32 node_ipv4_cidr_size = 109;
  void clear_node_ipv4_cidr_size();
  static const int kNodeIpv4CidrSizeFieldNumber = 109;
  ::google::protobuf::int32 node_ipv4_cidr_size() const;
  void set_node_ipv4_cidr_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.Cluster)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool > node_pools_;
  ::google::protobuf::RepeatedPtrField<::std::string> locations_;
  ::google::protobuf::internal::MapField<
      Cluster_ResourceLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > resource_labels_;
  ::google::protobuf::RepeatedPtrField<::std::string> instance_group_urls_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition > conditions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  ::google::protobuf::internal::ArenaStringPtr logging_service_;
  ::google::protobuf::internal::ArenaStringPtr monitoring_service_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr cluster_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr subnetwork_;
  ::google::protobuf::internal::ArenaStringPtr label_fingerprint_;
  ::google::protobuf::internal::ArenaStringPtr self_link_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr initial_cluster_version_;
  ::google::protobuf::internal::ArenaStringPtr current_master_version_;
  ::google::protobuf::internal::ArenaStringPtr current_node_version_;
  ::google::protobuf::internal::ArenaStringPtr create_time_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::protobuf::internal::ArenaStringPtr services_ipv4_cidr_;
  ::google::protobuf::internal::ArenaStringPtr expire_time_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr tpu_ipv4_cidr_block_;
  ::google::container::v1::NodeConfig* node_config_;
  ::google::container::v1::MasterAuth* master_auth_;
  ::google::container::v1::AddonsConfig* addons_config_;
  ::google::container::v1::LegacyAbac* legacy_abac_;
  ::google::container::v1::NetworkPolicy* network_policy_;
  ::google::container::v1::IPAllocationPolicy* ip_allocation_policy_;
  ::google::container::v1::MasterAuthorizedNetworksConfig* master_authorized_networks_config_;
  ::google::container::v1::MaintenancePolicy* maintenance_policy_;
  ::google::container::v1::BinaryAuthorization* binary_authorization_;
  ::google::container::v1::ClusterAutoscaling* autoscaling_;
  ::google::container::v1::NetworkConfig* network_config_;
  ::google::container::v1::MaxPodsConstraint* default_max_pods_constraint_;
  ::google::container::v1::ResourceUsageExportConfig* resource_usage_export_config_;
  ::google::container::v1::AuthenticatorGroupsConfig* authenticator_groups_config_;
  ::google::container::v1::PrivateClusterConfig* private_cluster_config_;
  ::google::container::v1::DatabaseEncryption* database_encryption_;
  ::google::container::v1::VerticalPodAutoscaling* vertical_pod_autoscaling_;
  ::google::container::v1::ShieldedNodes* shielded_nodes_;
  ::google::container::v1::ReleaseChannel* release_channel_;
  ::google::container::v1::WorkloadIdentityConfig* workload_identity_config_;
  ::google::protobuf::int32 initial_node_count_;
  bool enable_kubernetes_alpha_;
  bool enable_tpu_;
  ::google::protobuf::int32 current_node_count_;
  int status_;
  ::google::protobuf::int32 node_ipv4_cidr_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ClusterUpdate final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ClusterUpdate) */ {
 public:
  ClusterUpdate();
  virtual ~ClusterUpdate();

  ClusterUpdate(const ClusterUpdate& from);

  inline ClusterUpdate& operator=(const ClusterUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterUpdate(ClusterUpdate&& from) noexcept
    : ClusterUpdate() {
    *this = ::std::move(from);
  }

  inline ClusterUpdate& operator=(ClusterUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClusterUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterUpdate* internal_default_instance() {
    return reinterpret_cast<const ClusterUpdate*>(
               &_ClusterUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(ClusterUpdate* other);
  friend void swap(ClusterUpdate& a, ClusterUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterUpdate* New() const final {
    return CreateMaybeMessage<ClusterUpdate>(nullptr);
  }

  ClusterUpdate* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClusterUpdate>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClusterUpdate& from);
  void MergeFrom(const ClusterUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string desired_locations = 10;
  int desired_locations_size() const;
  void clear_desired_locations();
  static const int kDesiredLocationsFieldNumber = 10;
  const ::std::string& desired_locations(int index) const;
  ::std::string* mutable_desired_locations(int index);
  void set_desired_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_desired_locations(int index, ::std::string&& value);
  #endif
  void set_desired_locations(int index, const char* value);
  void set_desired_locations(int index, const char* value, size_t size);
  ::std::string* add_desired_locations();
  void add_desired_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_desired_locations(::std::string&& value);
  #endif
  void add_desired_locations(const char* value);
  void add_desired_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& desired_locations() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_desired_locations();

  // string desired_node_version = 4;
  void clear_desired_node_version();
  static const int kDesiredNodeVersionFieldNumber = 4;
  const ::std::string& desired_node_version() const;
  void set_desired_node_version(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_node_version(::std::string&& value);
  #endif
  void set_desired_node_version(const char* value);
  void set_desired_node_version(const char* value, size_t size);
  ::std::string* mutable_desired_node_version();
  ::std::string* release_desired_node_version();
  void set_allocated_desired_node_version(::std::string* desired_node_version);

  // string desired_monitoring_service = 5;
  void clear_desired_monitoring_service();
  static const int kDesiredMonitoringServiceFieldNumber = 5;
  const ::std::string& desired_monitoring_service() const;
  void set_desired_monitoring_service(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_monitoring_service(::std::string&& value);
  #endif
  void set_desired_monitoring_service(const char* value);
  void set_desired_monitoring_service(const char* value, size_t size);
  ::std::string* mutable_desired_monitoring_service();
  ::std::string* release_desired_monitoring_service();
  void set_allocated_desired_monitoring_service(::std::string* desired_monitoring_service);

  // string desired_node_pool_id = 7;
  void clear_desired_node_pool_id();
  static const int kDesiredNodePoolIdFieldNumber = 7;
  const ::std::string& desired_node_pool_id() const;
  void set_desired_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_node_pool_id(::std::string&& value);
  #endif
  void set_desired_node_pool_id(const char* value);
  void set_desired_node_pool_id(const char* value, size_t size);
  ::std::string* mutable_desired_node_pool_id();
  ::std::string* release_desired_node_pool_id();
  void set_allocated_desired_node_pool_id(::std::string* desired_node_pool_id);

  // string desired_image_type = 8;
  void clear_desired_image_type();
  static const int kDesiredImageTypeFieldNumber = 8;
  const ::std::string& desired_image_type() const;
  void set_desired_image_type(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_image_type(::std::string&& value);
  #endif
  void set_desired_image_type(const char* value);
  void set_desired_image_type(const char* value, size_t size);
  ::std::string* mutable_desired_image_type();
  ::std::string* release_desired_image_type();
  void set_allocated_desired_image_type(::std::string* desired_image_type);

  // string desired_logging_service = 19;
  void clear_desired_logging_service();
  static const int kDesiredLoggingServiceFieldNumber = 19;
  const ::std::string& desired_logging_service() const;
  void set_desired_logging_service(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_logging_service(::std::string&& value);
  #endif
  void set_desired_logging_service(const char* value);
  void set_desired_logging_service(const char* value, size_t size);
  ::std::string* mutable_desired_logging_service();
  ::std::string* release_desired_logging_service();
  void set_allocated_desired_logging_service(::std::string* desired_logging_service);

  // string desired_master_version = 100;
  void clear_desired_master_version();
  static const int kDesiredMasterVersionFieldNumber = 100;
  const ::std::string& desired_master_version() const;
  void set_desired_master_version(const ::std::string& value);
  #if LANG_CXX11
  void set_desired_master_version(::std::string&& value);
  #endif
  void set_desired_master_version(const char* value);
  void set_desired_master_version(const char* value, size_t size);
  ::std::string* mutable_desired_master_version();
  ::std::string* release_desired_master_version();
  void set_allocated_desired_master_version(::std::string* desired_master_version);

  // .google.container.v1.AddonsConfig desired_addons_config = 6;
  bool has_desired_addons_config() const;
  void clear_desired_addons_config();
  static const int kDesiredAddonsConfigFieldNumber = 6;
  const ::google::container::v1::AddonsConfig& desired_addons_config() const;
  ::google::container::v1::AddonsConfig* release_desired_addons_config();
  ::google::container::v1::AddonsConfig* mutable_desired_addons_config();
  void set_allocated_desired_addons_config(::google::container::v1::AddonsConfig* desired_addons_config);

  // .google.container.v1.NodePoolAutoscaling desired_node_pool_autoscaling = 9;
  bool has_desired_node_pool_autoscaling() const;
  void clear_desired_node_pool_autoscaling();
  static const int kDesiredNodePoolAutoscalingFieldNumber = 9;
  const ::google::container::v1::NodePoolAutoscaling& desired_node_pool_autoscaling() const;
  ::google::container::v1::NodePoolAutoscaling* release_desired_node_pool_autoscaling();
  ::google::container::v1::NodePoolAutoscaling* mutable_desired_node_pool_autoscaling();
  void set_allocated_desired_node_pool_autoscaling(::google::container::v1::NodePoolAutoscaling* desired_node_pool_autoscaling);

  // .google.container.v1.MasterAuthorizedNetworksConfig desired_master_authorized_networks_config = 12;
  bool has_desired_master_authorized_networks_config() const;
  void clear_desired_master_authorized_networks_config();
  static const int kDesiredMasterAuthorizedNetworksConfigFieldNumber = 12;
  const ::google::container::v1::MasterAuthorizedNetworksConfig& desired_master_authorized_networks_config() const;
  ::google::container::v1::MasterAuthorizedNetworksConfig* release_desired_master_authorized_networks_config();
  ::google::container::v1::MasterAuthorizedNetworksConfig* mutable_desired_master_authorized_networks_config();
  void set_allocated_desired_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* desired_master_authorized_networks_config);

  // .google.container.v1.ClusterAutoscaling desired_cluster_autoscaling = 15;
  bool has_desired_cluster_autoscaling() const;
  void clear_desired_cluster_autoscaling();
  static const int kDesiredClusterAutoscalingFieldNumber = 15;
  const ::google::container::v1::ClusterAutoscaling& desired_cluster_autoscaling() const;
  ::google::container::v1::ClusterAutoscaling* release_desired_cluster_autoscaling();
  ::google::container::v1::ClusterAutoscaling* mutable_desired_cluster_autoscaling();
  void set_allocated_desired_cluster_autoscaling(::google::container::v1::ClusterAutoscaling* desired_cluster_autoscaling);

  // .google.container.v1.BinaryAuthorization desired_binary_authorization = 16;
  bool has_desired_binary_authorization() const;
  void clear_desired_binary_authorization();
  static const int kDesiredBinaryAuthorizationFieldNumber = 16;
  const ::google::container::v1::BinaryAuthorization& desired_binary_authorization() const;
  ::google::container::v1::BinaryAuthorization* release_desired_binary_authorization();
  ::google::container::v1::BinaryAuthorization* mutable_desired_binary_authorization();
  void set_allocated_desired_binary_authorization(::google::container::v1::BinaryAuthorization* desired_binary_authorization);

  // .google.container.v1.ResourceUsageExportConfig desired_resource_usage_export_config = 21;
  bool has_desired_resource_usage_export_config() const;
  void clear_desired_resource_usage_export_config();
  static const int kDesiredResourceUsageExportConfigFieldNumber = 21;
  const ::google::container::v1::ResourceUsageExportConfig& desired_resource_usage_export_config() const;
  ::google::container::v1::ResourceUsageExportConfig* release_desired_resource_usage_export_config();
  ::google::container::v1::ResourceUsageExportConfig* mutable_desired_resource_usage_export_config();
  void set_allocated_desired_resource_usage_export_config(::google::container::v1::ResourceUsageExportConfig* desired_resource_usage_export_config);

  // .google.container.v1.VerticalPodAutoscaling desired_vertical_pod_autoscaling = 22;
  bool has_desired_vertical_pod_autoscaling() const;
  void clear_desired_vertical_pod_autoscaling();
  static const int kDesiredVerticalPodAutoscalingFieldNumber = 22;
  const ::google::container::v1::VerticalPodAutoscaling& desired_vertical_pod_autoscaling() const;
  ::google::container::v1::VerticalPodAutoscaling* release_desired_vertical_pod_autoscaling();
  ::google::container::v1::VerticalPodAutoscaling* mutable_desired_vertical_pod_autoscaling();
  void set_allocated_desired_vertical_pod_autoscaling(::google::container::v1::VerticalPodAutoscaling* desired_vertical_pod_autoscaling);

  // .google.container.v1.PrivateClusterConfig desired_private_cluster_config = 25;
  bool has_desired_private_cluster_config() const;
  void clear_desired_private_cluster_config();
  static const int kDesiredPrivateClusterConfigFieldNumber = 25;
  const ::google::container::v1::PrivateClusterConfig& desired_private_cluster_config() const;
  ::google::container::v1::PrivateClusterConfig* release_desired_private_cluster_config();
  ::google::container::v1::PrivateClusterConfig* mutable_desired_private_cluster_config();
  void set_allocated_desired_private_cluster_config(::google::container::v1::PrivateClusterConfig* desired_private_cluster_config);

  // .google.container.v1.IntraNodeVisibilityConfig desired_intra_node_visibility_config = 26;
  bool has_desired_intra_node_visibility_config() const;
  void clear_desired_intra_node_visibility_config();
  static const int kDesiredIntraNodeVisibilityConfigFieldNumber = 26;
  const ::google::container::v1::IntraNodeVisibilityConfig& desired_intra_node_visibility_config() const;
  ::google::container::v1::IntraNodeVisibilityConfig* release_desired_intra_node_visibility_config();
  ::google::container::v1::IntraNodeVisibilityConfig* mutable_desired_intra_node_visibility_config();
  void set_allocated_desired_intra_node_visibility_config(::google::container::v1::IntraNodeVisibilityConfig* desired_intra_node_visibility_config);

  // .google.container.v1.DefaultSnatStatus desired_default_snat_status = 28;
  bool has_desired_default_snat_status() const;
  void clear_desired_default_snat_status();
  static const int kDesiredDefaultSnatStatusFieldNumber = 28;
  const ::google::container::v1::DefaultSnatStatus& desired_default_snat_status() const;
  ::google::container::v1::DefaultSnatStatus* release_desired_default_snat_status();
  ::google::container::v1::DefaultSnatStatus* mutable_desired_default_snat_status();
  void set_allocated_desired_default_snat_status(::google::container::v1::DefaultSnatStatus* desired_default_snat_status);

  // .google.container.v1.ReleaseChannel desired_release_channel = 31;
  bool has_desired_release_channel() const;
  void clear_desired_release_channel();
  static const int kDesiredReleaseChannelFieldNumber = 31;
  const ::google::container::v1::ReleaseChannel& desired_release_channel() const;
  ::google::container::v1::ReleaseChannel* release_desired_release_channel();
  ::google::container::v1::ReleaseChannel* mutable_desired_release_channel();
  void set_allocated_desired_release_channel(::google::container::v1::ReleaseChannel* desired_release_channel);

  // .google.container.v1.DatabaseEncryption desired_database_encryption = 46;
  bool has_desired_database_encryption() const;
  void clear_desired_database_encryption();
  static const int kDesiredDatabaseEncryptionFieldNumber = 46;
  const ::google::container::v1::DatabaseEncryption& desired_database_encryption() const;
  ::google::container::v1::DatabaseEncryption* release_desired_database_encryption();
  ::google::container::v1::DatabaseEncryption* mutable_desired_database_encryption();
  void set_allocated_desired_database_encryption(::google::container::v1::DatabaseEncryption* desired_database_encryption);

  // .google.container.v1.WorkloadIdentityConfig desired_workload_identity_config = 47;
  bool has_desired_workload_identity_config() const;
  void clear_desired_workload_identity_config();
  static const int kDesiredWorkloadIdentityConfigFieldNumber = 47;
  const ::google::container::v1::WorkloadIdentityConfig& desired_workload_identity_config() const;
  ::google::container::v1::WorkloadIdentityConfig* release_desired_workload_identity_config();
  ::google::container::v1::WorkloadIdentityConfig* mutable_desired_workload_identity_config();
  void set_allocated_desired_workload_identity_config(::google::container::v1::WorkloadIdentityConfig* desired_workload_identity_config);

  // .google.container.v1.ShieldedNodes desired_shielded_nodes = 48;
  bool has_desired_shielded_nodes() const;
  void clear_desired_shielded_nodes();
  static const int kDesiredShieldedNodesFieldNumber = 48;
  const ::google::container::v1::ShieldedNodes& desired_shielded_nodes() const;
  ::google::container::v1::ShieldedNodes* release_desired_shielded_nodes();
  ::google::container::v1::ShieldedNodes* mutable_desired_shielded_nodes();
  void set_allocated_desired_shielded_nodes(::google::container::v1::ShieldedNodes* desired_shielded_nodes);

  // @@protoc_insertion_point(class_scope:google.container.v1.ClusterUpdate)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> desired_locations_;
  ::google::protobuf::internal::ArenaStringPtr desired_node_version_;
  ::google::protobuf::internal::ArenaStringPtr desired_monitoring_service_;
  ::google::protobuf::internal::ArenaStringPtr desired_node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr desired_image_type_;
  ::google::protobuf::internal::ArenaStringPtr desired_logging_service_;
  ::google::protobuf::internal::ArenaStringPtr desired_master_version_;
  ::google::container::v1::AddonsConfig* desired_addons_config_;
  ::google::container::v1::NodePoolAutoscaling* desired_node_pool_autoscaling_;
  ::google::container::v1::MasterAuthorizedNetworksConfig* desired_master_authorized_networks_config_;
  ::google::container::v1::ClusterAutoscaling* desired_cluster_autoscaling_;
  ::google::container::v1::BinaryAuthorization* desired_binary_authorization_;
  ::google::container::v1::ResourceUsageExportConfig* desired_resource_usage_export_config_;
  ::google::container::v1::VerticalPodAutoscaling* desired_vertical_pod_autoscaling_;
  ::google::container::v1::PrivateClusterConfig* desired_private_cluster_config_;
  ::google::container::v1::IntraNodeVisibilityConfig* desired_intra_node_visibility_config_;
  ::google::container::v1::DefaultSnatStatus* desired_default_snat_status_;
  ::google::container::v1::ReleaseChannel* desired_release_channel_;
  ::google::container::v1::DatabaseEncryption* desired_database_encryption_;
  ::google::container::v1::WorkloadIdentityConfig* desired_workload_identity_config_;
  ::google::container::v1::ShieldedNodes* desired_shielded_nodes_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Operation final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.Operation) */ {
 public:
  Operation();
  virtual ~Operation();

  Operation(const Operation& from);

  inline Operation& operator=(const Operation& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Operation(Operation&& from) noexcept
    : Operation() {
    *this = ::std::move(from);
  }

  inline Operation& operator=(Operation&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Operation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Operation* internal_default_instance() {
    return reinterpret_cast<const Operation*>(
               &_Operation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(Operation* other);
  friend void swap(Operation& a, Operation& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Operation* New() const final {
    return CreateMaybeMessage<Operation>(nullptr);
  }

  Operation* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Operation>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Operation& from);
  void MergeFrom(const Operation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Operation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef Operation_Status Status;
  static const Status STATUS_UNSPECIFIED =
    Operation_Status_STATUS_UNSPECIFIED;
  static const Status PENDING =
    Operation_Status_PENDING;
  static const Status RUNNING =
    Operation_Status_RUNNING;
  static const Status DONE =
    Operation_Status_DONE;
  static const Status ABORTING =
    Operation_Status_ABORTING;
  static inline bool Status_IsValid(int value) {
    return Operation_Status_IsValid(value);
  }
  static const Status Status_MIN =
    Operation_Status_Status_MIN;
  static const Status Status_MAX =
    Operation_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    Operation_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return Operation_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return Operation_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return Operation_Status_Parse(name, value);
  }

  typedef Operation_Type Type;
  static const Type TYPE_UNSPECIFIED =
    Operation_Type_TYPE_UNSPECIFIED;
  static const Type CREATE_CLUSTER =
    Operation_Type_CREATE_CLUSTER;
  static const Type DELETE_CLUSTER =
    Operation_Type_DELETE_CLUSTER;
  static const Type UPGRADE_MASTER =
    Operation_Type_UPGRADE_MASTER;
  static const Type UPGRADE_NODES =
    Operation_Type_UPGRADE_NODES;
  static const Type REPAIR_CLUSTER =
    Operation_Type_REPAIR_CLUSTER;
  static const Type UPDATE_CLUSTER =
    Operation_Type_UPDATE_CLUSTER;
  static const Type CREATE_NODE_POOL =
    Operation_Type_CREATE_NODE_POOL;
  static const Type DELETE_NODE_POOL =
    Operation_Type_DELETE_NODE_POOL;
  static const Type SET_NODE_POOL_MANAGEMENT =
    Operation_Type_SET_NODE_POOL_MANAGEMENT;
  static const Type AUTO_REPAIR_NODES =
    Operation_Type_AUTO_REPAIR_NODES;
  static const Type AUTO_UPGRADE_NODES =
    Operation_Type_AUTO_UPGRADE_NODES;
  static const Type SET_LABELS =
    Operation_Type_SET_LABELS;
  static const Type SET_MASTER_AUTH =
    Operation_Type_SET_MASTER_AUTH;
  static const Type SET_NODE_POOL_SIZE =
    Operation_Type_SET_NODE_POOL_SIZE;
  static const Type SET_NETWORK_POLICY =
    Operation_Type_SET_NETWORK_POLICY;
  static const Type SET_MAINTENANCE_POLICY =
    Operation_Type_SET_MAINTENANCE_POLICY;
  static inline bool Type_IsValid(int value) {
    return Operation_Type_IsValid(value);
  }
  static const Type Type_MIN =
    Operation_Type_Type_MIN;
  static const Type Type_MAX =
    Operation_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    Operation_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return Operation_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return Operation_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return Operation_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.StatusCondition cluster_conditions = 13;
  int cluster_conditions_size() const;
  void clear_cluster_conditions();
  static const int kClusterConditionsFieldNumber = 13;
  ::google::container::v1::StatusCondition* mutable_cluster_conditions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >*
      mutable_cluster_conditions();
  const ::google::container::v1::StatusCondition& cluster_conditions(int index) const;
  ::google::container::v1::StatusCondition* add_cluster_conditions();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >&
      cluster_conditions() const;

  // repeated .google.container.v1.StatusCondition nodepool_conditions = 14;
  int nodepool_conditions_size() const;
  void clear_nodepool_conditions();
  static const int kNodepoolConditionsFieldNumber = 14;
  ::google::container::v1::StatusCondition* mutable_nodepool_conditions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >*
      mutable_nodepool_conditions();
  const ::google::container::v1::StatusCondition& nodepool_conditions(int index) const;
  ::google::container::v1::StatusCondition* add_nodepool_conditions();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >&
      nodepool_conditions() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string status_message = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
  void clear_status_message();
  static const int kStatusMessageFieldNumber = 5;
  const ::std::string& status_message() const;
  void set_status_message(const ::std::string& value);
  #if LANG_CXX11
  void set_status_message(::std::string&& value);
  #endif
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  ::std::string* mutable_status_message();
  ::std::string* release_status_message();
  void set_allocated_status_message(::std::string* status_message);

  // string self_link = 6;
  void clear_self_link();
  static const int kSelfLinkFieldNumber = 6;
  const ::std::string& self_link() const;
  void set_self_link(const ::std::string& value);
  #if LANG_CXX11
  void set_self_link(::std::string&& value);
  #endif
  void set_self_link(const char* value);
  void set_self_link(const char* value, size_t size);
  ::std::string* mutable_self_link();
  ::std::string* release_self_link();
  void set_allocated_self_link(::std::string* self_link);

  // string target_link = 7;
  void clear_target_link();
  static const int kTargetLinkFieldNumber = 7;
  const ::std::string& target_link() const;
  void set_target_link(const ::std::string& value);
  #if LANG_CXX11
  void set_target_link(::std::string&& value);
  #endif
  void set_target_link(const char* value);
  void set_target_link(const char* value, size_t size);
  ::std::string* mutable_target_link();
  ::std::string* release_target_link();
  void set_allocated_target_link(::std::string* target_link);

  // string detail = 8;
  void clear_detail();
  static const int kDetailFieldNumber = 8;
  const ::std::string& detail() const;
  void set_detail(const ::std::string& value);
  #if LANG_CXX11
  void set_detail(::std::string&& value);
  #endif
  void set_detail(const char* value);
  void set_detail(const char* value, size_t size);
  ::std::string* mutable_detail();
  ::std::string* release_detail();
  void set_allocated_detail(::std::string* detail);

  // string location = 9;
  void clear_location();
  static const int kLocationFieldNumber = 9;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string start_time = 10;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 10;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_start_time(::std::string&& value);
  #endif
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);

  // string end_time = 11;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 11;
  const ::std::string& end_time() const;
  void set_end_time(const ::std::string& value);
  #if LANG_CXX11
  void set_end_time(::std::string&& value);
  #endif
  void set_end_time(const char* value);
  void set_end_time(const char* value, size_t size);
  ::std::string* mutable_end_time();
  ::std::string* release_end_time();
  void set_allocated_end_time(::std::string* end_time);

  // .google.container.v1.OperationProgress progress = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 12;
  const ::google::container::v1::OperationProgress& progress() const;
  ::google::container::v1::OperationProgress* release_progress();
  ::google::container::v1::OperationProgress* mutable_progress();
  void set_allocated_progress(::google::container::v1::OperationProgress* progress);

  // .google.container.v1.Operation.Type operation_type = 3;
  void clear_operation_type();
  static const int kOperationTypeFieldNumber = 3;
  ::google::container::v1::Operation_Type operation_type() const;
  void set_operation_type(::google::container::v1::Operation_Type value);

  // .google.container.v1.Operation.Status status = 4;
  void clear_status();
  static const int kStatusFieldNumber = 4;
  ::google::container::v1::Operation_Status status() const;
  void set_status(::google::container::v1::Operation_Status value);

  // @@protoc_insertion_point(class_scope:google.container.v1.Operation)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition > cluster_conditions_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition > nodepool_conditions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::protobuf::internal::ArenaStringPtr self_link_;
  ::google::protobuf::internal::ArenaStringPtr target_link_;
  ::google::protobuf::internal::ArenaStringPtr detail_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  ::google::protobuf::internal::ArenaStringPtr end_time_;
  ::google::container::v1::OperationProgress* progress_;
  int operation_type_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OperationProgress_Metric final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.OperationProgress.Metric) */ {
 public:
  OperationProgress_Metric();
  virtual ~OperationProgress_Metric();

  OperationProgress_Metric(const OperationProgress_Metric& from);

  inline OperationProgress_Metric& operator=(const OperationProgress_Metric& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationProgress_Metric(OperationProgress_Metric&& from) noexcept
    : OperationProgress_Metric() {
    *this = ::std::move(from);
  }

  inline OperationProgress_Metric& operator=(OperationProgress_Metric&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OperationProgress_Metric& default_instance();

  enum ValueCase {
    kIntValue = 2,
    kDoubleValue = 3,
    kStringValue = 4,
    VALUE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationProgress_Metric* internal_default_instance() {
    return reinterpret_cast<const OperationProgress_Metric*>(
               &_OperationProgress_Metric_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(OperationProgress_Metric* other);
  friend void swap(OperationProgress_Metric& a, OperationProgress_Metric& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationProgress_Metric* New() const final {
    return CreateMaybeMessage<OperationProgress_Metric>(nullptr);
  }

  OperationProgress_Metric* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperationProgress_Metric>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperationProgress_Metric& from);
  void MergeFrom(const OperationProgress_Metric& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationProgress_Metric* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int64 int_value = 2;
  private:
  bool has_int_value() const;
  public:
  void clear_int_value();
  static const int kIntValueFieldNumber = 2;
  ::google::protobuf::int64 int_value() const;
  void set_int_value(::google::protobuf::int64 value);

  // double double_value = 3;
  private:
  bool has_double_value() const;
  public:
  void clear_double_value();
  static const int kDoubleValueFieldNumber = 3;
  double double_value() const;
  void set_double_value(double value);

  // string string_value = 4;
  private:
  bool has_string_value() const;
  public:
  void clear_string_value();
  static const int kStringValueFieldNumber = 4;
  const ::std::string& string_value() const;
  void set_string_value(const ::std::string& value);
  #if LANG_CXX11
  void set_string_value(::std::string&& value);
  #endif
  void set_string_value(const char* value);
  void set_string_value(const char* value, size_t size);
  ::std::string* mutable_string_value();
  ::std::string* release_string_value();
  void set_allocated_string_value(::std::string* string_value);

  void clear_value();
  ValueCase value_case() const;
  // @@protoc_insertion_point(class_scope:google.container.v1.OperationProgress.Metric)
 private:
  class HasBitSetters;
  void set_has_int_value();
  void set_has_double_value();
  void set_has_string_value();

  inline bool has_value() const;
  inline void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  union ValueUnion {
    ValueUnion() {}
    ::google::protobuf::int64 int_value_;
    double double_value_;
    ::google::protobuf::internal::ArenaStringPtr string_value_;
  } value_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class OperationProgress final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.OperationProgress) */ {
 public:
  OperationProgress();
  virtual ~OperationProgress();

  OperationProgress(const OperationProgress& from);

  inline OperationProgress& operator=(const OperationProgress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OperationProgress(OperationProgress&& from) noexcept
    : OperationProgress() {
    *this = ::std::move(from);
  }

  inline OperationProgress& operator=(OperationProgress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const OperationProgress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationProgress* internal_default_instance() {
    return reinterpret_cast<const OperationProgress*>(
               &_OperationProgress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(OperationProgress* other);
  friend void swap(OperationProgress& a, OperationProgress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OperationProgress* New() const final {
    return CreateMaybeMessage<OperationProgress>(nullptr);
  }

  OperationProgress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OperationProgress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OperationProgress& from);
  void MergeFrom(const OperationProgress& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationProgress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef OperationProgress_Metric Metric;

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.OperationProgress.Metric metrics = 3;
  int metrics_size() const;
  void clear_metrics();
  static const int kMetricsFieldNumber = 3;
  ::google::container::v1::OperationProgress_Metric* mutable_metrics(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress_Metric >*
      mutable_metrics();
  const ::google::container::v1::OperationProgress_Metric& metrics(int index) const;
  ::google::container::v1::OperationProgress_Metric* add_metrics();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress_Metric >&
      metrics() const;

  // repeated .google.container.v1.OperationProgress stages = 4;
  int stages_size() const;
  void clear_stages();
  static const int kStagesFieldNumber = 4;
  ::google::container::v1::OperationProgress* mutable_stages(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress >*
      mutable_stages();
  const ::google::container::v1::OperationProgress& stages(int index) const;
  ::google::container::v1::OperationProgress* add_stages();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress >&
      stages() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.container.v1.Operation.Status status = 2;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  ::google::container::v1::Operation_Status status() const;
  void set_status(::google::container::v1::Operation_Status value);

  // @@protoc_insertion_point(class_scope:google.container.v1.OperationProgress)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress_Metric > metrics_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress > stages_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateClusterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CreateClusterRequest) */ {
 public:
  CreateClusterRequest();
  virtual ~CreateClusterRequest();

  CreateClusterRequest(const CreateClusterRequest& from);

  inline CreateClusterRequest& operator=(const CreateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateClusterRequest(CreateClusterRequest&& from) noexcept
    : CreateClusterRequest() {
    *this = ::std::move(from);
  }

  inline CreateClusterRequest& operator=(CreateClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const CreateClusterRequest*>(
               &_CreateClusterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(CreateClusterRequest* other);
  friend void swap(CreateClusterRequest& a, CreateClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateClusterRequest* New() const final {
    return CreateMaybeMessage<CreateClusterRequest>(nullptr);
  }

  CreateClusterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateClusterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateClusterRequest& from);
  void MergeFrom(const CreateClusterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string parent = 5;
  void clear_parent();
  static const int kParentFieldNumber = 5;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.container.v1.Cluster cluster = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 3;
  const ::google::container::v1::Cluster& cluster() const;
  ::google::container::v1::Cluster* release_cluster();
  ::google::container::v1::Cluster* mutable_cluster();
  void set_allocated_cluster(::google::container::v1::Cluster* cluster);

  // @@protoc_insertion_point(class_scope:google.container.v1.CreateClusterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::container::v1::Cluster* cluster_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetClusterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetClusterRequest) */ {
 public:
  GetClusterRequest();
  virtual ~GetClusterRequest();

  GetClusterRequest(const GetClusterRequest& from);

  inline GetClusterRequest& operator=(const GetClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetClusterRequest(GetClusterRequest&& from) noexcept
    : GetClusterRequest() {
    *this = ::std::move(from);
  }

  inline GetClusterRequest& operator=(GetClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetClusterRequest* internal_default_instance() {
    return reinterpret_cast<const GetClusterRequest*>(
               &_GetClusterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(GetClusterRequest* other);
  friend void swap(GetClusterRequest& a, GetClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetClusterRequest* New() const final {
    return CreateMaybeMessage<GetClusterRequest>(nullptr);
  }

  GetClusterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetClusterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetClusterRequest& from);
  void MergeFrom(const GetClusterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetClusterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateClusterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.UpdateClusterRequest) */ {
 public:
  UpdateClusterRequest();
  virtual ~UpdateClusterRequest();

  UpdateClusterRequest(const UpdateClusterRequest& from);

  inline UpdateClusterRequest& operator=(const UpdateClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateClusterRequest(UpdateClusterRequest&& from) noexcept
    : UpdateClusterRequest() {
    *this = ::std::move(from);
  }

  inline UpdateClusterRequest& operator=(UpdateClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateClusterRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateClusterRequest*>(
               &_UpdateClusterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(UpdateClusterRequest* other);
  friend void swap(UpdateClusterRequest& a, UpdateClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateClusterRequest* New() const final {
    return CreateMaybeMessage<UpdateClusterRequest>(nullptr);
  }

  UpdateClusterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateClusterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateClusterRequest& from);
  void MergeFrom(const UpdateClusterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.container.v1.ClusterUpdate update = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 4;
  const ::google::container::v1::ClusterUpdate& update() const;
  ::google::container::v1::ClusterUpdate* release_update();
  ::google::container::v1::ClusterUpdate* mutable_update();
  void set_allocated_update(::google::container::v1::ClusterUpdate* update);

  // @@protoc_insertion_point(class_scope:google.container.v1.UpdateClusterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::container::v1::ClusterUpdate* update_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateNodePoolRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.UpdateNodePoolRequest) */ {
 public:
  UpdateNodePoolRequest();
  virtual ~UpdateNodePoolRequest();

  UpdateNodePoolRequest(const UpdateNodePoolRequest& from);

  inline UpdateNodePoolRequest& operator=(const UpdateNodePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateNodePoolRequest(UpdateNodePoolRequest&& from) noexcept
    : UpdateNodePoolRequest() {
    *this = ::std::move(from);
  }

  inline UpdateNodePoolRequest& operator=(UpdateNodePoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateNodePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateNodePoolRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateNodePoolRequest*>(
               &_UpdateNodePoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(UpdateNodePoolRequest* other);
  friend void swap(UpdateNodePoolRequest& a, UpdateNodePoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateNodePoolRequest* New() const final {
    return CreateMaybeMessage<UpdateNodePoolRequest>(nullptr);
  }

  UpdateNodePoolRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateNodePoolRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateNodePoolRequest& from);
  void MergeFrom(const UpdateNodePoolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateNodePoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string locations = 13;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 13;
  const ::std::string& locations(int index) const;
  ::std::string* mutable_locations(int index);
  void set_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_locations(int index, ::std::string&& value);
  #endif
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  ::std::string* add_locations();
  void add_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_locations(::std::string&& value);
  #endif
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& locations() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_locations();

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_node_pool_id();
  PROTOBUF_DEPRECATED static const int kNodePoolIdFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::std::string& node_pool_id() const;
  PROTOBUF_DEPRECATED void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_node_pool_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value);
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_node_pool_id();
  PROTOBUF_DEPRECATED ::std::string* release_node_pool_id();
  PROTOBUF_DEPRECATED void set_allocated_node_pool_id(::std::string* node_pool_id);

  // string node_version = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_node_version();
  static const int kNodeVersionFieldNumber = 5;
  const ::std::string& node_version() const;
  void set_node_version(const ::std::string& value);
  #if LANG_CXX11
  void set_node_version(::std::string&& value);
  #endif
  void set_node_version(const char* value);
  void set_node_version(const char* value, size_t size);
  ::std::string* mutable_node_version();
  ::std::string* release_node_version();
  void set_allocated_node_version(::std::string* node_version);

  // string image_type = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_image_type();
  static const int kImageTypeFieldNumber = 6;
  const ::std::string& image_type() const;
  void set_image_type(const ::std::string& value);
  #if LANG_CXX11
  void set_image_type(::std::string&& value);
  #endif
  void set_image_type(const char* value);
  void set_image_type(const char* value, size_t size);
  ::std::string* mutable_image_type();
  ::std::string* release_image_type();
  void set_allocated_image_type(::std::string* image_type);

  // string name = 8;
  void clear_name();
  static const int kNameFieldNumber = 8;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.container.v1.WorkloadMetadataConfig workload_metadata_config = 14;
  bool has_workload_metadata_config() const;
  void clear_workload_metadata_config();
  static const int kWorkloadMetadataConfigFieldNumber = 14;
  const ::google::container::v1::WorkloadMetadataConfig& workload_metadata_config() const;
  ::google::container::v1::WorkloadMetadataConfig* release_workload_metadata_config();
  ::google::container::v1::WorkloadMetadataConfig* mutable_workload_metadata_config();
  void set_allocated_workload_metadata_config(::google::container::v1::WorkloadMetadataConfig* workload_metadata_config);

  // .google.container.v1.NodePool.UpgradeSettings upgrade_settings = 15;
  bool has_upgrade_settings() const;
  void clear_upgrade_settings();
  static const int kUpgradeSettingsFieldNumber = 15;
  const ::google::container::v1::NodePool_UpgradeSettings& upgrade_settings() const;
  ::google::container::v1::NodePool_UpgradeSettings* release_upgrade_settings();
  ::google::container::v1::NodePool_UpgradeSettings* mutable_upgrade_settings();
  void set_allocated_upgrade_settings(::google::container::v1::NodePool_UpgradeSettings* upgrade_settings);

  // @@protoc_insertion_point(class_scope:google.container.v1.UpdateNodePoolRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> locations_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr node_version_;
  ::google::protobuf::internal::ArenaStringPtr image_type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::container::v1::WorkloadMetadataConfig* workload_metadata_config_;
  ::google::container::v1::NodePool_UpgradeSettings* upgrade_settings_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetNodePoolAutoscalingRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetNodePoolAutoscalingRequest) */ {
 public:
  SetNodePoolAutoscalingRequest();
  virtual ~SetNodePoolAutoscalingRequest();

  SetNodePoolAutoscalingRequest(const SetNodePoolAutoscalingRequest& from);

  inline SetNodePoolAutoscalingRequest& operator=(const SetNodePoolAutoscalingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNodePoolAutoscalingRequest(SetNodePoolAutoscalingRequest&& from) noexcept
    : SetNodePoolAutoscalingRequest() {
    *this = ::std::move(from);
  }

  inline SetNodePoolAutoscalingRequest& operator=(SetNodePoolAutoscalingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetNodePoolAutoscalingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNodePoolAutoscalingRequest* internal_default_instance() {
    return reinterpret_cast<const SetNodePoolAutoscalingRequest*>(
               &_SetNodePoolAutoscalingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(SetNodePoolAutoscalingRequest* other);
  friend void swap(SetNodePoolAutoscalingRequest& a, SetNodePoolAutoscalingRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNodePoolAutoscalingRequest* New() const final {
    return CreateMaybeMessage<SetNodePoolAutoscalingRequest>(nullptr);
  }

  SetNodePoolAutoscalingRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetNodePoolAutoscalingRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetNodePoolAutoscalingRequest& from);
  void MergeFrom(const SetNodePoolAutoscalingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNodePoolAutoscalingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_node_pool_id();
  PROTOBUF_DEPRECATED static const int kNodePoolIdFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::std::string& node_pool_id() const;
  PROTOBUF_DEPRECATED void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_node_pool_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value);
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_node_pool_id();
  PROTOBUF_DEPRECATED ::std::string* release_node_pool_id();
  PROTOBUF_DEPRECATED void set_allocated_node_pool_id(::std::string* node_pool_id);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.container.v1.NodePoolAutoscaling autoscaling = 5 [(.google.api.field_behavior) = REQUIRED];
  bool has_autoscaling() const;
  void clear_autoscaling();
  static const int kAutoscalingFieldNumber = 5;
  const ::google::container::v1::NodePoolAutoscaling& autoscaling() const;
  ::google::container::v1::NodePoolAutoscaling* release_autoscaling();
  ::google::container::v1::NodePoolAutoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetNodePoolAutoscalingRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::container::v1::NodePoolAutoscaling* autoscaling_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetLoggingServiceRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetLoggingServiceRequest) */ {
 public:
  SetLoggingServiceRequest();
  virtual ~SetLoggingServiceRequest();

  SetLoggingServiceRequest(const SetLoggingServiceRequest& from);

  inline SetLoggingServiceRequest& operator=(const SetLoggingServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetLoggingServiceRequest(SetLoggingServiceRequest&& from) noexcept
    : SetLoggingServiceRequest() {
    *this = ::std::move(from);
  }

  inline SetLoggingServiceRequest& operator=(SetLoggingServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetLoggingServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLoggingServiceRequest* internal_default_instance() {
    return reinterpret_cast<const SetLoggingServiceRequest*>(
               &_SetLoggingServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(SetLoggingServiceRequest* other);
  friend void swap(SetLoggingServiceRequest& a, SetLoggingServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetLoggingServiceRequest* New() const final {
    return CreateMaybeMessage<SetLoggingServiceRequest>(nullptr);
  }

  SetLoggingServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetLoggingServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetLoggingServiceRequest& from);
  void MergeFrom(const SetLoggingServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLoggingServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string logging_service = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_logging_service();
  static const int kLoggingServiceFieldNumber = 4;
  const ::std::string& logging_service() const;
  void set_logging_service(const ::std::string& value);
  #if LANG_CXX11
  void set_logging_service(::std::string&& value);
  #endif
  void set_logging_service(const char* value);
  void set_logging_service(const char* value, size_t size);
  ::std::string* mutable_logging_service();
  ::std::string* release_logging_service();
  void set_allocated_logging_service(::std::string* logging_service);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetLoggingServiceRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr logging_service_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetMonitoringServiceRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetMonitoringServiceRequest) */ {
 public:
  SetMonitoringServiceRequest();
  virtual ~SetMonitoringServiceRequest();

  SetMonitoringServiceRequest(const SetMonitoringServiceRequest& from);

  inline SetMonitoringServiceRequest& operator=(const SetMonitoringServiceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMonitoringServiceRequest(SetMonitoringServiceRequest&& from) noexcept
    : SetMonitoringServiceRequest() {
    *this = ::std::move(from);
  }

  inline SetMonitoringServiceRequest& operator=(SetMonitoringServiceRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetMonitoringServiceRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMonitoringServiceRequest* internal_default_instance() {
    return reinterpret_cast<const SetMonitoringServiceRequest*>(
               &_SetMonitoringServiceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(SetMonitoringServiceRequest* other);
  friend void swap(SetMonitoringServiceRequest& a, SetMonitoringServiceRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMonitoringServiceRequest* New() const final {
    return CreateMaybeMessage<SetMonitoringServiceRequest>(nullptr);
  }

  SetMonitoringServiceRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetMonitoringServiceRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetMonitoringServiceRequest& from);
  void MergeFrom(const SetMonitoringServiceRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMonitoringServiceRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string monitoring_service = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_monitoring_service();
  static const int kMonitoringServiceFieldNumber = 4;
  const ::std::string& monitoring_service() const;
  void set_monitoring_service(const ::std::string& value);
  #if LANG_CXX11
  void set_monitoring_service(::std::string&& value);
  #endif
  void set_monitoring_service(const char* value);
  void set_monitoring_service(const char* value, size_t size);
  ::std::string* mutable_monitoring_service();
  ::std::string* release_monitoring_service();
  void set_allocated_monitoring_service(::std::string* monitoring_service);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetMonitoringServiceRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr monitoring_service_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetAddonsConfigRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetAddonsConfigRequest) */ {
 public:
  SetAddonsConfigRequest();
  virtual ~SetAddonsConfigRequest();

  SetAddonsConfigRequest(const SetAddonsConfigRequest& from);

  inline SetAddonsConfigRequest& operator=(const SetAddonsConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetAddonsConfigRequest(SetAddonsConfigRequest&& from) noexcept
    : SetAddonsConfigRequest() {
    *this = ::std::move(from);
  }

  inline SetAddonsConfigRequest& operator=(SetAddonsConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetAddonsConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetAddonsConfigRequest* internal_default_instance() {
    return reinterpret_cast<const SetAddonsConfigRequest*>(
               &_SetAddonsConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(SetAddonsConfigRequest* other);
  friend void swap(SetAddonsConfigRequest& a, SetAddonsConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetAddonsConfigRequest* New() const final {
    return CreateMaybeMessage<SetAddonsConfigRequest>(nullptr);
  }

  SetAddonsConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetAddonsConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetAddonsConfigRequest& from);
  void MergeFrom(const SetAddonsConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetAddonsConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.container.v1.AddonsConfig addons_config = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_addons_config() const;
  void clear_addons_config();
  static const int kAddonsConfigFieldNumber = 4;
  const ::google::container::v1::AddonsConfig& addons_config() const;
  ::google::container::v1::AddonsConfig* release_addons_config();
  ::google::container::v1::AddonsConfig* mutable_addons_config();
  void set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetAddonsConfigRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::container::v1::AddonsConfig* addons_config_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetLocationsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetLocationsRequest) */ {
 public:
  SetLocationsRequest();
  virtual ~SetLocationsRequest();

  SetLocationsRequest(const SetLocationsRequest& from);

  inline SetLocationsRequest& operator=(const SetLocationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetLocationsRequest(SetLocationsRequest&& from) noexcept
    : SetLocationsRequest() {
    *this = ::std::move(from);
  }

  inline SetLocationsRequest& operator=(SetLocationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetLocationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLocationsRequest* internal_default_instance() {
    return reinterpret_cast<const SetLocationsRequest*>(
               &_SetLocationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(SetLocationsRequest* other);
  friend void swap(SetLocationsRequest& a, SetLocationsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetLocationsRequest* New() const final {
    return CreateMaybeMessage<SetLocationsRequest>(nullptr);
  }

  SetLocationsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetLocationsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetLocationsRequest& from);
  void MergeFrom(const SetLocationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLocationsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string locations = 4 [(.google.api.field_behavior) = REQUIRED];
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 4;
  const ::std::string& locations(int index) const;
  ::std::string* mutable_locations(int index);
  void set_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_locations(int index, ::std::string&& value);
  #endif
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  ::std::string* add_locations();
  void add_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_locations(::std::string&& value);
  #endif
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& locations() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_locations();

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetLocationsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> locations_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UpdateMasterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.UpdateMasterRequest) */ {
 public:
  UpdateMasterRequest();
  virtual ~UpdateMasterRequest();

  UpdateMasterRequest(const UpdateMasterRequest& from);

  inline UpdateMasterRequest& operator=(const UpdateMasterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateMasterRequest(UpdateMasterRequest&& from) noexcept
    : UpdateMasterRequest() {
    *this = ::std::move(from);
  }

  inline UpdateMasterRequest& operator=(UpdateMasterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UpdateMasterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateMasterRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateMasterRequest*>(
               &_UpdateMasterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(UpdateMasterRequest* other);
  friend void swap(UpdateMasterRequest& a, UpdateMasterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateMasterRequest* New() const final {
    return CreateMaybeMessage<UpdateMasterRequest>(nullptr);
  }

  UpdateMasterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateMasterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateMasterRequest& from);
  void MergeFrom(const UpdateMasterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateMasterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string master_version = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_master_version();
  static const int kMasterVersionFieldNumber = 4;
  const ::std::string& master_version() const;
  void set_master_version(const ::std::string& value);
  #if LANG_CXX11
  void set_master_version(::std::string&& value);
  #endif
  void set_master_version(const char* value);
  void set_master_version(const char* value, size_t size);
  ::std::string* mutable_master_version();
  ::std::string* release_master_version();
  void set_allocated_master_version(::std::string* master_version);

  // string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.UpdateMasterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr master_version_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetMasterAuthRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetMasterAuthRequest) */ {
 public:
  SetMasterAuthRequest();
  virtual ~SetMasterAuthRequest();

  SetMasterAuthRequest(const SetMasterAuthRequest& from);

  inline SetMasterAuthRequest& operator=(const SetMasterAuthRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMasterAuthRequest(SetMasterAuthRequest&& from) noexcept
    : SetMasterAuthRequest() {
    *this = ::std::move(from);
  }

  inline SetMasterAuthRequest& operator=(SetMasterAuthRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetMasterAuthRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMasterAuthRequest* internal_default_instance() {
    return reinterpret_cast<const SetMasterAuthRequest*>(
               &_SetMasterAuthRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(SetMasterAuthRequest* other);
  friend void swap(SetMasterAuthRequest& a, SetMasterAuthRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMasterAuthRequest* New() const final {
    return CreateMaybeMessage<SetMasterAuthRequest>(nullptr);
  }

  SetMasterAuthRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetMasterAuthRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetMasterAuthRequest& from);
  void MergeFrom(const SetMasterAuthRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMasterAuthRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef SetMasterAuthRequest_Action Action;
  static const Action UNKNOWN =
    SetMasterAuthRequest_Action_UNKNOWN;
  static const Action SET_PASSWORD =
    SetMasterAuthRequest_Action_SET_PASSWORD;
  static const Action GENERATE_PASSWORD =
    SetMasterAuthRequest_Action_GENERATE_PASSWORD;
  static const Action SET_USERNAME =
    SetMasterAuthRequest_Action_SET_USERNAME;
  static inline bool Action_IsValid(int value) {
    return SetMasterAuthRequest_Action_IsValid(value);
  }
  static const Action Action_MIN =
    SetMasterAuthRequest_Action_Action_MIN;
  static const Action Action_MAX =
    SetMasterAuthRequest_Action_Action_MAX;
  static const int Action_ARRAYSIZE =
    SetMasterAuthRequest_Action_Action_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Action_descriptor() {
    return SetMasterAuthRequest_Action_descriptor();
  }
  static inline const ::std::string& Action_Name(Action value) {
    return SetMasterAuthRequest_Action_Name(value);
  }
  static inline bool Action_Parse(const ::std::string& name,
      Action* value) {
    return SetMasterAuthRequest_Action_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.container.v1.MasterAuth update = 5 [(.google.api.field_behavior) = REQUIRED];
  bool has_update() const;
  void clear_update();
  static const int kUpdateFieldNumber = 5;
  const ::google::container::v1::MasterAuth& update() const;
  ::google::container::v1::MasterAuth* release_update();
  ::google::container::v1::MasterAuth* mutable_update();
  void set_allocated_update(::google::container::v1::MasterAuth* update);

  // .google.container.v1.SetMasterAuthRequest.Action action = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_action();
  static const int kActionFieldNumber = 4;
  ::google::container::v1::SetMasterAuthRequest_Action action() const;
  void set_action(::google::container::v1::SetMasterAuthRequest_Action value);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetMasterAuthRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::container::v1::MasterAuth* update_;
  int action_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteClusterRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DeleteClusterRequest) */ {
 public:
  DeleteClusterRequest();
  virtual ~DeleteClusterRequest();

  DeleteClusterRequest(const DeleteClusterRequest& from);

  inline DeleteClusterRequest& operator=(const DeleteClusterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteClusterRequest(DeleteClusterRequest&& from) noexcept
    : DeleteClusterRequest() {
    *this = ::std::move(from);
  }

  inline DeleteClusterRequest& operator=(DeleteClusterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteClusterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteClusterRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteClusterRequest*>(
               &_DeleteClusterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(DeleteClusterRequest* other);
  friend void swap(DeleteClusterRequest& a, DeleteClusterRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteClusterRequest* New() const final {
    return CreateMaybeMessage<DeleteClusterRequest>(nullptr);
  }

  DeleteClusterRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteClusterRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteClusterRequest& from);
  void MergeFrom(const DeleteClusterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteClusterRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.DeleteClusterRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListClustersRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListClustersRequest) */ {
 public:
  ListClustersRequest();
  virtual ~ListClustersRequest();

  ListClustersRequest(const ListClustersRequest& from);

  inline ListClustersRequest& operator=(const ListClustersRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClustersRequest(ListClustersRequest&& from) noexcept
    : ListClustersRequest() {
    *this = ::std::move(from);
  }

  inline ListClustersRequest& operator=(ListClustersRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListClustersRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListClustersRequest* internal_default_instance() {
    return reinterpret_cast<const ListClustersRequest*>(
               &_ListClustersRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(ListClustersRequest* other);
  friend void swap(ListClustersRequest& a, ListClustersRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClustersRequest* New() const final {
    return CreateMaybeMessage<ListClustersRequest>(nullptr);
  }

  ListClustersRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListClustersRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListClustersRequest& from);
  void MergeFrom(const ListClustersRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListClustersRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string parent = 4;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListClustersRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListClustersResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListClustersResponse) */ {
 public:
  ListClustersResponse();
  virtual ~ListClustersResponse();

  ListClustersResponse(const ListClustersResponse& from);

  inline ListClustersResponse& operator=(const ListClustersResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListClustersResponse(ListClustersResponse&& from) noexcept
    : ListClustersResponse() {
    *this = ::std::move(from);
  }

  inline ListClustersResponse& operator=(ListClustersResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListClustersResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListClustersResponse* internal_default_instance() {
    return reinterpret_cast<const ListClustersResponse*>(
               &_ListClustersResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(ListClustersResponse* other);
  friend void swap(ListClustersResponse& a, ListClustersResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListClustersResponse* New() const final {
    return CreateMaybeMessage<ListClustersResponse>(nullptr);
  }

  ListClustersResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListClustersResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListClustersResponse& from);
  void MergeFrom(const ListClustersResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListClustersResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.Cluster clusters = 1;
  int clusters_size() const;
  void clear_clusters();
  static const int kClustersFieldNumber = 1;
  ::google::container::v1::Cluster* mutable_clusters(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >*
      mutable_clusters();
  const ::google::container::v1::Cluster& clusters(int index) const;
  ::google::container::v1::Cluster* add_clusters();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >&
      clusters() const;

  // repeated string missing_zones = 2;
  int missing_zones_size() const;
  void clear_missing_zones();
  static const int kMissingZonesFieldNumber = 2;
  const ::std::string& missing_zones(int index) const;
  ::std::string* mutable_missing_zones(int index);
  void set_missing_zones(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_missing_zones(int index, ::std::string&& value);
  #endif
  void set_missing_zones(int index, const char* value);
  void set_missing_zones(int index, const char* value, size_t size);
  ::std::string* add_missing_zones();
  void add_missing_zones(const ::std::string& value);
  #if LANG_CXX11
  void add_missing_zones(::std::string&& value);
  #endif
  void add_missing_zones(const char* value);
  void add_missing_zones(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& missing_zones() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_missing_zones();

  // @@protoc_insertion_point(class_scope:google.container.v1.ListClustersResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster > clusters_;
  ::google::protobuf::RepeatedPtrField<::std::string> missing_zones_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOperationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetOperationRequest) */ {
 public:
  GetOperationRequest();
  virtual ~GetOperationRequest();

  GetOperationRequest(const GetOperationRequest& from);

  inline GetOperationRequest& operator=(const GetOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOperationRequest(GetOperationRequest&& from) noexcept
    : GetOperationRequest() {
    *this = ::std::move(from);
  }

  inline GetOperationRequest& operator=(GetOperationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetOperationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOperationRequest* internal_default_instance() {
    return reinterpret_cast<const GetOperationRequest*>(
               &_GetOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(GetOperationRequest* other);
  friend void swap(GetOperationRequest& a, GetOperationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOperationRequest* New() const final {
    return CreateMaybeMessage<GetOperationRequest>(nullptr);
  }

  GetOperationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetOperationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetOperationRequest& from);
  void MergeFrom(const GetOperationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string operation_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_operation_id();
  PROTOBUF_DEPRECATED static const int kOperationIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& operation_id() const;
  PROTOBUF_DEPRECATED void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_operation_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_operation_id(const char* value);
  PROTOBUF_DEPRECATED void set_operation_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_operation_id();
  PROTOBUF_DEPRECATED ::std::string* release_operation_id();
  PROTOBUF_DEPRECATED void set_allocated_operation_id(::std::string* operation_id);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetOperationRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListOperationsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListOperationsRequest) */ {
 public:
  ListOperationsRequest();
  virtual ~ListOperationsRequest();

  ListOperationsRequest(const ListOperationsRequest& from);

  inline ListOperationsRequest& operator=(const ListOperationsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOperationsRequest(ListOperationsRequest&& from) noexcept
    : ListOperationsRequest() {
    *this = ::std::move(from);
  }

  inline ListOperationsRequest& operator=(ListOperationsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListOperationsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOperationsRequest* internal_default_instance() {
    return reinterpret_cast<const ListOperationsRequest*>(
               &_ListOperationsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(ListOperationsRequest* other);
  friend void swap(ListOperationsRequest& a, ListOperationsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOperationsRequest* New() const final {
    return CreateMaybeMessage<ListOperationsRequest>(nullptr);
  }

  ListOperationsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOperationsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOperationsRequest& from);
  void MergeFrom(const ListOperationsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOperationsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string parent = 4;
  void clear_parent();
  static const int kParentFieldNumber = 4;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListOperationsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CancelOperationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CancelOperationRequest) */ {
 public:
  CancelOperationRequest();
  virtual ~CancelOperationRequest();

  CancelOperationRequest(const CancelOperationRequest& from);

  inline CancelOperationRequest& operator=(const CancelOperationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelOperationRequest(CancelOperationRequest&& from) noexcept
    : CancelOperationRequest() {
    *this = ::std::move(from);
  }

  inline CancelOperationRequest& operator=(CancelOperationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CancelOperationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOperationRequest* internal_default_instance() {
    return reinterpret_cast<const CancelOperationRequest*>(
               &_CancelOperationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(CancelOperationRequest* other);
  friend void swap(CancelOperationRequest& a, CancelOperationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelOperationRequest* New() const final {
    return CreateMaybeMessage<CancelOperationRequest>(nullptr);
  }

  CancelOperationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelOperationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelOperationRequest& from);
  void MergeFrom(const CancelOperationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOperationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string operation_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_operation_id();
  PROTOBUF_DEPRECATED static const int kOperationIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& operation_id() const;
  PROTOBUF_DEPRECATED void set_operation_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_operation_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_operation_id(const char* value);
  PROTOBUF_DEPRECATED void set_operation_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_operation_id();
  PROTOBUF_DEPRECATED ::std::string* release_operation_id();
  PROTOBUF_DEPRECATED void set_allocated_operation_id(::std::string* operation_id);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.CancelOperationRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr operation_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListOperationsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListOperationsResponse) */ {
 public:
  ListOperationsResponse();
  virtual ~ListOperationsResponse();

  ListOperationsResponse(const ListOperationsResponse& from);

  inline ListOperationsResponse& operator=(const ListOperationsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListOperationsResponse(ListOperationsResponse&& from) noexcept
    : ListOperationsResponse() {
    *this = ::std::move(from);
  }

  inline ListOperationsResponse& operator=(ListOperationsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListOperationsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListOperationsResponse* internal_default_instance() {
    return reinterpret_cast<const ListOperationsResponse*>(
               &_ListOperationsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(ListOperationsResponse* other);
  friend void swap(ListOperationsResponse& a, ListOperationsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListOperationsResponse* New() const final {
    return CreateMaybeMessage<ListOperationsResponse>(nullptr);
  }

  ListOperationsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListOperationsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListOperationsResponse& from);
  void MergeFrom(const ListOperationsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListOperationsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.Operation operations = 1;
  int operations_size() const;
  void clear_operations();
  static const int kOperationsFieldNumber = 1;
  ::google::container::v1::Operation* mutable_operations(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >*
      mutable_operations();
  const ::google::container::v1::Operation& operations(int index) const;
  ::google::container::v1::Operation* add_operations();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >&
      operations() const;

  // repeated string missing_zones = 2;
  int missing_zones_size() const;
  void clear_missing_zones();
  static const int kMissingZonesFieldNumber = 2;
  const ::std::string& missing_zones(int index) const;
  ::std::string* mutable_missing_zones(int index);
  void set_missing_zones(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_missing_zones(int index, ::std::string&& value);
  #endif
  void set_missing_zones(int index, const char* value);
  void set_missing_zones(int index, const char* value, size_t size);
  ::std::string* add_missing_zones();
  void add_missing_zones(const ::std::string& value);
  #if LANG_CXX11
  void add_missing_zones(::std::string&& value);
  #endif
  void add_missing_zones(const char* value);
  void add_missing_zones(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& missing_zones() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_missing_zones();

  // @@protoc_insertion_point(class_scope:google.container.v1.ListOperationsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation > operations_;
  ::google::protobuf::RepeatedPtrField<::std::string> missing_zones_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetServerConfigRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetServerConfigRequest) */ {
 public:
  GetServerConfigRequest();
  virtual ~GetServerConfigRequest();

  GetServerConfigRequest(const GetServerConfigRequest& from);

  inline GetServerConfigRequest& operator=(const GetServerConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetServerConfigRequest(GetServerConfigRequest&& from) noexcept
    : GetServerConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetServerConfigRequest& operator=(GetServerConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetServerConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetServerConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetServerConfigRequest*>(
               &_GetServerConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(GetServerConfigRequest* other);
  friend void swap(GetServerConfigRequest& a, GetServerConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetServerConfigRequest* New() const final {
    return CreateMaybeMessage<GetServerConfigRequest>(nullptr);
  }

  GetServerConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetServerConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetServerConfigRequest& from);
  void MergeFrom(const GetServerConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetServerConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string name = 4;
  void clear_name();
  static const int kNameFieldNumber = 4;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetServerConfigRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServerConfig_ReleaseChannelConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ServerConfig.ReleaseChannelConfig) */ {
 public:
  ServerConfig_ReleaseChannelConfig();
  virtual ~ServerConfig_ReleaseChannelConfig();

  ServerConfig_ReleaseChannelConfig(const ServerConfig_ReleaseChannelConfig& from);

  inline ServerConfig_ReleaseChannelConfig& operator=(const ServerConfig_ReleaseChannelConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerConfig_ReleaseChannelConfig(ServerConfig_ReleaseChannelConfig&& from) noexcept
    : ServerConfig_ReleaseChannelConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig_ReleaseChannelConfig& operator=(ServerConfig_ReleaseChannelConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerConfig_ReleaseChannelConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfig_ReleaseChannelConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig_ReleaseChannelConfig*>(
               &_ServerConfig_ReleaseChannelConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(ServerConfig_ReleaseChannelConfig* other);
  friend void swap(ServerConfig_ReleaseChannelConfig& a, ServerConfig_ReleaseChannelConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerConfig_ReleaseChannelConfig* New() const final {
    return CreateMaybeMessage<ServerConfig_ReleaseChannelConfig>(nullptr);
  }

  ServerConfig_ReleaseChannelConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfig_ReleaseChannelConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerConfig_ReleaseChannelConfig& from);
  void MergeFrom(const ServerConfig_ReleaseChannelConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfig_ReleaseChannelConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string valid_versions = 4;
  int valid_versions_size() const;
  void clear_valid_versions();
  static const int kValidVersionsFieldNumber = 4;
  const ::std::string& valid_versions(int index) const;
  ::std::string* mutable_valid_versions(int index);
  void set_valid_versions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_valid_versions(int index, ::std::string&& value);
  #endif
  void set_valid_versions(int index, const char* value);
  void set_valid_versions(int index, const char* value, size_t size);
  ::std::string* add_valid_versions();
  void add_valid_versions(const ::std::string& value);
  #if LANG_CXX11
  void add_valid_versions(::std::string&& value);
  #endif
  void add_valid_versions(const char* value);
  void add_valid_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& valid_versions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_valid_versions();

  // string default_version = 2;
  void clear_default_version();
  static const int kDefaultVersionFieldNumber = 2;
  const ::std::string& default_version() const;
  void set_default_version(const ::std::string& value);
  #if LANG_CXX11
  void set_default_version(::std::string&& value);
  #endif
  void set_default_version(const char* value);
  void set_default_version(const char* value, size_t size);
  ::std::string* mutable_default_version();
  ::std::string* release_default_version();
  void set_allocated_default_version(::std::string* default_version);

  // .google.container.v1.ReleaseChannel.Channel channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::container::v1::ReleaseChannel_Channel channel() const;
  void set_channel(::google::container::v1::ReleaseChannel_Channel value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ServerConfig.ReleaseChannelConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> valid_versions_;
  ::google::protobuf::internal::ArenaStringPtr default_version_;
  int channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ServerConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ServerConfig) */ {
 public:
  ServerConfig();
  virtual ~ServerConfig();

  ServerConfig(const ServerConfig& from);

  inline ServerConfig& operator=(const ServerConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ServerConfig(ServerConfig&& from) noexcept
    : ServerConfig() {
    *this = ::std::move(from);
  }

  inline ServerConfig& operator=(ServerConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ServerConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServerConfig* internal_default_instance() {
    return reinterpret_cast<const ServerConfig*>(
               &_ServerConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(ServerConfig* other);
  friend void swap(ServerConfig& a, ServerConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ServerConfig* New() const final {
    return CreateMaybeMessage<ServerConfig>(nullptr);
  }

  ServerConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ServerConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ServerConfig& from);
  void MergeFrom(const ServerConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ServerConfig_ReleaseChannelConfig ReleaseChannelConfig;

  // accessors -------------------------------------------------------

  // repeated string valid_node_versions = 3;
  int valid_node_versions_size() const;
  void clear_valid_node_versions();
  static const int kValidNodeVersionsFieldNumber = 3;
  const ::std::string& valid_node_versions(int index) const;
  ::std::string* mutable_valid_node_versions(int index);
  void set_valid_node_versions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_valid_node_versions(int index, ::std::string&& value);
  #endif
  void set_valid_node_versions(int index, const char* value);
  void set_valid_node_versions(int index, const char* value, size_t size);
  ::std::string* add_valid_node_versions();
  void add_valid_node_versions(const ::std::string& value);
  #if LANG_CXX11
  void add_valid_node_versions(::std::string&& value);
  #endif
  void add_valid_node_versions(const char* value);
  void add_valid_node_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& valid_node_versions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_valid_node_versions();

  // repeated string valid_image_types = 5;
  int valid_image_types_size() const;
  void clear_valid_image_types();
  static const int kValidImageTypesFieldNumber = 5;
  const ::std::string& valid_image_types(int index) const;
  ::std::string* mutable_valid_image_types(int index);
  void set_valid_image_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_valid_image_types(int index, ::std::string&& value);
  #endif
  void set_valid_image_types(int index, const char* value);
  void set_valid_image_types(int index, const char* value, size_t size);
  ::std::string* add_valid_image_types();
  void add_valid_image_types(const ::std::string& value);
  #if LANG_CXX11
  void add_valid_image_types(::std::string&& value);
  #endif
  void add_valid_image_types(const char* value);
  void add_valid_image_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& valid_image_types() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_valid_image_types();

  // repeated string valid_master_versions = 6;
  int valid_master_versions_size() const;
  void clear_valid_master_versions();
  static const int kValidMasterVersionsFieldNumber = 6;
  const ::std::string& valid_master_versions(int index) const;
  ::std::string* mutable_valid_master_versions(int index);
  void set_valid_master_versions(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_valid_master_versions(int index, ::std::string&& value);
  #endif
  void set_valid_master_versions(int index, const char* value);
  void set_valid_master_versions(int index, const char* value, size_t size);
  ::std::string* add_valid_master_versions();
  void add_valid_master_versions(const ::std::string& value);
  #if LANG_CXX11
  void add_valid_master_versions(::std::string&& value);
  #endif
  void add_valid_master_versions(const char* value);
  void add_valid_master_versions(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& valid_master_versions() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_valid_master_versions();

  // repeated .google.container.v1.ServerConfig.ReleaseChannelConfig channels = 9;
  int channels_size() const;
  void clear_channels();
  static const int kChannelsFieldNumber = 9;
  ::google::container::v1::ServerConfig_ReleaseChannelConfig* mutable_channels(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::ServerConfig_ReleaseChannelConfig >*
      mutable_channels();
  const ::google::container::v1::ServerConfig_ReleaseChannelConfig& channels(int index) const;
  ::google::container::v1::ServerConfig_ReleaseChannelConfig* add_channels();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::ServerConfig_ReleaseChannelConfig >&
      channels() const;

  // string default_cluster_version = 1;
  void clear_default_cluster_version();
  static const int kDefaultClusterVersionFieldNumber = 1;
  const ::std::string& default_cluster_version() const;
  void set_default_cluster_version(const ::std::string& value);
  #if LANG_CXX11
  void set_default_cluster_version(::std::string&& value);
  #endif
  void set_default_cluster_version(const char* value);
  void set_default_cluster_version(const char* value, size_t size);
  ::std::string* mutable_default_cluster_version();
  ::std::string* release_default_cluster_version();
  void set_allocated_default_cluster_version(::std::string* default_cluster_version);

  // string default_image_type = 4;
  void clear_default_image_type();
  static const int kDefaultImageTypeFieldNumber = 4;
  const ::std::string& default_image_type() const;
  void set_default_image_type(const ::std::string& value);
  #if LANG_CXX11
  void set_default_image_type(::std::string&& value);
  #endif
  void set_default_image_type(const char* value);
  void set_default_image_type(const char* value, size_t size);
  ::std::string* mutable_default_image_type();
  ::std::string* release_default_image_type();
  void set_allocated_default_image_type(::std::string* default_image_type);

  // @@protoc_insertion_point(class_scope:google.container.v1.ServerConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> valid_node_versions_;
  ::google::protobuf::RepeatedPtrField<::std::string> valid_image_types_;
  ::google::protobuf::RepeatedPtrField<::std::string> valid_master_versions_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::ServerConfig_ReleaseChannelConfig > channels_;
  ::google::protobuf::internal::ArenaStringPtr default_cluster_version_;
  ::google::protobuf::internal::ArenaStringPtr default_image_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CreateNodePoolRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CreateNodePoolRequest) */ {
 public:
  CreateNodePoolRequest();
  virtual ~CreateNodePoolRequest();

  CreateNodePoolRequest(const CreateNodePoolRequest& from);

  inline CreateNodePoolRequest& operator=(const CreateNodePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateNodePoolRequest(CreateNodePoolRequest&& from) noexcept
    : CreateNodePoolRequest() {
    *this = ::std::move(from);
  }

  inline CreateNodePoolRequest& operator=(CreateNodePoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CreateNodePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateNodePoolRequest* internal_default_instance() {
    return reinterpret_cast<const CreateNodePoolRequest*>(
               &_CreateNodePoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(CreateNodePoolRequest* other);
  friend void swap(CreateNodePoolRequest& a, CreateNodePoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateNodePoolRequest* New() const final {
    return CreateMaybeMessage<CreateNodePoolRequest>(nullptr);
  }

  CreateNodePoolRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateNodePoolRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateNodePoolRequest& from);
  void MergeFrom(const CreateNodePoolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateNodePoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string parent = 6;
  void clear_parent();
  static const int kParentFieldNumber = 6;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // .google.container.v1.NodePool node_pool = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_node_pool() const;
  void clear_node_pool();
  static const int kNodePoolFieldNumber = 4;
  const ::google::container::v1::NodePool& node_pool() const;
  ::google::container::v1::NodePool* release_node_pool();
  ::google::container::v1::NodePool* mutable_node_pool();
  void set_allocated_node_pool(::google::container::v1::NodePool* node_pool);

  // @@protoc_insertion_point(class_scope:google.container.v1.CreateNodePoolRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::container::v1::NodePool* node_pool_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DeleteNodePoolRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DeleteNodePoolRequest) */ {
 public:
  DeleteNodePoolRequest();
  virtual ~DeleteNodePoolRequest();

  DeleteNodePoolRequest(const DeleteNodePoolRequest& from);

  inline DeleteNodePoolRequest& operator=(const DeleteNodePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteNodePoolRequest(DeleteNodePoolRequest&& from) noexcept
    : DeleteNodePoolRequest() {
    *this = ::std::move(from);
  }

  inline DeleteNodePoolRequest& operator=(DeleteNodePoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DeleteNodePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteNodePoolRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteNodePoolRequest*>(
               &_DeleteNodePoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(DeleteNodePoolRequest* other);
  friend void swap(DeleteNodePoolRequest& a, DeleteNodePoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteNodePoolRequest* New() const final {
    return CreateMaybeMessage<DeleteNodePoolRequest>(nullptr);
  }

  DeleteNodePoolRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteNodePoolRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteNodePoolRequest& from);
  void MergeFrom(const DeleteNodePoolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteNodePoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_node_pool_id();
  PROTOBUF_DEPRECATED static const int kNodePoolIdFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::std::string& node_pool_id() const;
  PROTOBUF_DEPRECATED void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_node_pool_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value);
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_node_pool_id();
  PROTOBUF_DEPRECATED ::std::string* release_node_pool_id();
  PROTOBUF_DEPRECATED void set_allocated_node_pool_id(::std::string* node_pool_id);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.DeleteNodePoolRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListNodePoolsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListNodePoolsRequest) */ {
 public:
  ListNodePoolsRequest();
  virtual ~ListNodePoolsRequest();

  ListNodePoolsRequest(const ListNodePoolsRequest& from);

  inline ListNodePoolsRequest& operator=(const ListNodePoolsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNodePoolsRequest(ListNodePoolsRequest&& from) noexcept
    : ListNodePoolsRequest() {
    *this = ::std::move(from);
  }

  inline ListNodePoolsRequest& operator=(ListNodePoolsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListNodePoolsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNodePoolsRequest* internal_default_instance() {
    return reinterpret_cast<const ListNodePoolsRequest*>(
               &_ListNodePoolsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(ListNodePoolsRequest* other);
  friend void swap(ListNodePoolsRequest& a, ListNodePoolsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNodePoolsRequest* New() const final {
    return CreateMaybeMessage<ListNodePoolsRequest>(nullptr);
  }

  ListNodePoolsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNodePoolsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNodePoolsRequest& from);
  void MergeFrom(const ListNodePoolsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodePoolsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string parent = 5;
  void clear_parent();
  static const int kParentFieldNumber = 5;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListNodePoolsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetNodePoolRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetNodePoolRequest) */ {
 public:
  GetNodePoolRequest();
  virtual ~GetNodePoolRequest();

  GetNodePoolRequest(const GetNodePoolRequest& from);

  inline GetNodePoolRequest& operator=(const GetNodePoolRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetNodePoolRequest(GetNodePoolRequest&& from) noexcept
    : GetNodePoolRequest() {
    *this = ::std::move(from);
  }

  inline GetNodePoolRequest& operator=(GetNodePoolRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetNodePoolRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetNodePoolRequest* internal_default_instance() {
    return reinterpret_cast<const GetNodePoolRequest*>(
               &_GetNodePoolRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(GetNodePoolRequest* other);
  friend void swap(GetNodePoolRequest& a, GetNodePoolRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetNodePoolRequest* New() const final {
    return CreateMaybeMessage<GetNodePoolRequest>(nullptr);
  }

  GetNodePoolRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetNodePoolRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetNodePoolRequest& from);
  void MergeFrom(const GetNodePoolRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetNodePoolRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_node_pool_id();
  PROTOBUF_DEPRECATED static const int kNodePoolIdFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::std::string& node_pool_id() const;
  PROTOBUF_DEPRECATED void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_node_pool_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value);
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_node_pool_id();
  PROTOBUF_DEPRECATED ::std::string* release_node_pool_id();
  PROTOBUF_DEPRECATED void set_allocated_node_pool_id(::std::string* node_pool_id);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetNodePoolRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NodePool_UpgradeSettings final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodePool.UpgradeSettings) */ {
 public:
  NodePool_UpgradeSettings();
  virtual ~NodePool_UpgradeSettings();

  NodePool_UpgradeSettings(const NodePool_UpgradeSettings& from);

  inline NodePool_UpgradeSettings& operator=(const NodePool_UpgradeSettings& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodePool_UpgradeSettings(NodePool_UpgradeSettings&& from) noexcept
    : NodePool_UpgradeSettings() {
    *this = ::std::move(from);
  }

  inline NodePool_UpgradeSettings& operator=(NodePool_UpgradeSettings&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodePool_UpgradeSettings& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodePool_UpgradeSettings* internal_default_instance() {
    return reinterpret_cast<const NodePool_UpgradeSettings*>(
               &_NodePool_UpgradeSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(NodePool_UpgradeSettings* other);
  friend void swap(NodePool_UpgradeSettings& a, NodePool_UpgradeSettings& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodePool_UpgradeSettings* New() const final {
    return CreateMaybeMessage<NodePool_UpgradeSettings>(nullptr);
  }

  NodePool_UpgradeSettings* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodePool_UpgradeSettings>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodePool_UpgradeSettings& from);
  void MergeFrom(const NodePool_UpgradeSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodePool_UpgradeSettings* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 max_surge = 1;
  void clear_max_surge();
  static const int kMaxSurgeFieldNumber = 1;
  ::google::protobuf::int32 max_surge() const;
  void set_max_surge(::google::protobuf::int32 value);

  // int32 max_unavailable = 2;
  void clear_max_unavailable();
  static const int kMaxUnavailableFieldNumber = 2;
  ::google::protobuf::int32 max_unavailable() const;
  void set_max_unavailable(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodePool.UpgradeSettings)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 max_surge_;
  ::google::protobuf::int32 max_unavailable_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NodePool final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodePool) */ {
 public:
  NodePool();
  virtual ~NodePool();

  NodePool(const NodePool& from);

  inline NodePool& operator=(const NodePool& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodePool(NodePool&& from) noexcept
    : NodePool() {
    *this = ::std::move(from);
  }

  inline NodePool& operator=(NodePool&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodePool& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodePool* internal_default_instance() {
    return reinterpret_cast<const NodePool*>(
               &_NodePool_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(NodePool* other);
  friend void swap(NodePool& a, NodePool& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodePool* New() const final {
    return CreateMaybeMessage<NodePool>(nullptr);
  }

  NodePool* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodePool>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodePool& from);
  void MergeFrom(const NodePool& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodePool* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef NodePool_UpgradeSettings UpgradeSettings;

  typedef NodePool_Status Status;
  static const Status STATUS_UNSPECIFIED =
    NodePool_Status_STATUS_UNSPECIFIED;
  static const Status PROVISIONING =
    NodePool_Status_PROVISIONING;
  static const Status RUNNING =
    NodePool_Status_RUNNING;
  static const Status RUNNING_WITH_ERROR =
    NodePool_Status_RUNNING_WITH_ERROR;
  static const Status RECONCILING =
    NodePool_Status_RECONCILING;
  static const Status STOPPING =
    NodePool_Status_STOPPING;
  static const Status ERROR =
    NodePool_Status_ERROR;
  static inline bool Status_IsValid(int value) {
    return NodePool_Status_IsValid(value);
  }
  static const Status Status_MIN =
    NodePool_Status_Status_MIN;
  static const Status Status_MAX =
    NodePool_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    NodePool_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return NodePool_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return NodePool_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return NodePool_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // repeated string locations = 13;
  int locations_size() const;
  void clear_locations();
  static const int kLocationsFieldNumber = 13;
  const ::std::string& locations(int index) const;
  ::std::string* mutable_locations(int index);
  void set_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_locations(int index, ::std::string&& value);
  #endif
  void set_locations(int index, const char* value);
  void set_locations(int index, const char* value, size_t size);
  ::std::string* add_locations();
  void add_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_locations(::std::string&& value);
  #endif
  void add_locations(const char* value);
  void add_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& locations() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_locations();

  // repeated string instance_group_urls = 102;
  int instance_group_urls_size() const;
  void clear_instance_group_urls();
  static const int kInstanceGroupUrlsFieldNumber = 102;
  const ::std::string& instance_group_urls(int index) const;
  ::std::string* mutable_instance_group_urls(int index);
  void set_instance_group_urls(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_instance_group_urls(int index, ::std::string&& value);
  #endif
  void set_instance_group_urls(int index, const char* value);
  void set_instance_group_urls(int index, const char* value, size_t size);
  ::std::string* add_instance_group_urls();
  void add_instance_group_urls(const ::std::string& value);
  #if LANG_CXX11
  void add_instance_group_urls(::std::string&& value);
  #endif
  void add_instance_group_urls(const char* value);
  void add_instance_group_urls(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& instance_group_urls() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_instance_group_urls();

  // repeated .google.container.v1.StatusCondition conditions = 105;
  int conditions_size() const;
  void clear_conditions();
  static const int kConditionsFieldNumber = 105;
  ::google::container::v1::StatusCondition* mutable_conditions(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >*
      mutable_conditions();
  const ::google::container::v1::StatusCondition& conditions(int index) const;
  ::google::container::v1::StatusCondition* add_conditions();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >&
      conditions() const;

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string self_link = 100;
  void clear_self_link();
  static const int kSelfLinkFieldNumber = 100;
  const ::std::string& self_link() const;
  void set_self_link(const ::std::string& value);
  #if LANG_CXX11
  void set_self_link(::std::string&& value);
  #endif
  void set_self_link(const char* value);
  void set_self_link(const char* value, size_t size);
  ::std::string* mutable_self_link();
  ::std::string* release_self_link();
  void set_allocated_self_link(::std::string* self_link);

  // string version = 101;
  void clear_version();
  static const int kVersionFieldNumber = 101;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string status_message = 104 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_status_message();
  PROTOBUF_DEPRECATED static const int kStatusMessageFieldNumber = 104;
  PROTOBUF_DEPRECATED const ::std::string& status_message() const;
  PROTOBUF_DEPRECATED void set_status_message(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_status_message(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_status_message(const char* value);
  PROTOBUF_DEPRECATED void set_status_message(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_status_message();
  PROTOBUF_DEPRECATED ::std::string* release_status_message();
  PROTOBUF_DEPRECATED void set_allocated_status_message(::std::string* status_message);

  // .google.container.v1.NodeConfig config = 2;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 2;
  const ::google::container::v1::NodeConfig& config() const;
  ::google::container::v1::NodeConfig* release_config();
  ::google::container::v1::NodeConfig* mutable_config();
  void set_allocated_config(::google::container::v1::NodeConfig* config);

  // .google.container.v1.NodePoolAutoscaling autoscaling = 4;
  bool has_autoscaling() const;
  void clear_autoscaling();
  static const int kAutoscalingFieldNumber = 4;
  const ::google::container::v1::NodePoolAutoscaling& autoscaling() const;
  ::google::container::v1::NodePoolAutoscaling* release_autoscaling();
  ::google::container::v1::NodePoolAutoscaling* mutable_autoscaling();
  void set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling);

  // .google.container.v1.NodeManagement management = 5;
  bool has_management() const;
  void clear_management();
  static const int kManagementFieldNumber = 5;
  const ::google::container::v1::NodeManagement& management() const;
  ::google::container::v1::NodeManagement* release_management();
  ::google::container::v1::NodeManagement* mutable_management();
  void set_allocated_management(::google::container::v1::NodeManagement* management);

  // .google.container.v1.MaxPodsConstraint max_pods_constraint = 6;
  bool has_max_pods_constraint() const;
  void clear_max_pods_constraint();
  static const int kMaxPodsConstraintFieldNumber = 6;
  const ::google::container::v1::MaxPodsConstraint& max_pods_constraint() const;
  ::google::container::v1::MaxPodsConstraint* release_max_pods_constraint();
  ::google::container::v1::MaxPodsConstraint* mutable_max_pods_constraint();
  void set_allocated_max_pods_constraint(::google::container::v1::MaxPodsConstraint* max_pods_constraint);

  // .google.container.v1.NodePool.UpgradeSettings upgrade_settings = 107;
  bool has_upgrade_settings() const;
  void clear_upgrade_settings();
  static const int kUpgradeSettingsFieldNumber = 107;
  const ::google::container::v1::NodePool_UpgradeSettings& upgrade_settings() const;
  ::google::container::v1::NodePool_UpgradeSettings* release_upgrade_settings();
  ::google::container::v1::NodePool_UpgradeSettings* mutable_upgrade_settings();
  void set_allocated_upgrade_settings(::google::container::v1::NodePool_UpgradeSettings* upgrade_settings);

  // int32 initial_node_count = 3;
  void clear_initial_node_count();
  static const int kInitialNodeCountFieldNumber = 3;
  ::google::protobuf::int32 initial_node_count() const;
  void set_initial_node_count(::google::protobuf::int32 value);

  // int32 pod_ipv4_cidr_size = 7;
  void clear_pod_ipv4_cidr_size();
  static const int kPodIpv4CidrSizeFieldNumber = 7;
  ::google::protobuf::int32 pod_ipv4_cidr_size() const;
  void set_pod_ipv4_cidr_size(::google::protobuf::int32 value);

  // .google.container.v1.NodePool.Status status = 103;
  void clear_status();
  static const int kStatusFieldNumber = 103;
  ::google::container::v1::NodePool_Status status() const;
  void set_status(::google::container::v1::NodePool_Status value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodePool)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> locations_;
  ::google::protobuf::RepeatedPtrField<::std::string> instance_group_urls_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition > conditions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr self_link_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  ::google::container::v1::NodeConfig* config_;
  ::google::container::v1::NodePoolAutoscaling* autoscaling_;
  ::google::container::v1::NodeManagement* management_;
  ::google::container::v1::MaxPodsConstraint* max_pods_constraint_;
  ::google::container::v1::NodePool_UpgradeSettings* upgrade_settings_;
  ::google::protobuf::int32 initial_node_count_;
  ::google::protobuf::int32 pod_ipv4_cidr_size_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NodeManagement final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodeManagement) */ {
 public:
  NodeManagement();
  virtual ~NodeManagement();

  NodeManagement(const NodeManagement& from);

  inline NodeManagement& operator=(const NodeManagement& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeManagement(NodeManagement&& from) noexcept
    : NodeManagement() {
    *this = ::std::move(from);
  }

  inline NodeManagement& operator=(NodeManagement&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodeManagement& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeManagement* internal_default_instance() {
    return reinterpret_cast<const NodeManagement*>(
               &_NodeManagement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(NodeManagement* other);
  friend void swap(NodeManagement& a, NodeManagement& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeManagement* New() const final {
    return CreateMaybeMessage<NodeManagement>(nullptr);
  }

  NodeManagement* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeManagement>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeManagement& from);
  void MergeFrom(const NodeManagement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeManagement* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.container.v1.AutoUpgradeOptions upgrade_options = 10;
  bool has_upgrade_options() const;
  void clear_upgrade_options();
  static const int kUpgradeOptionsFieldNumber = 10;
  const ::google::container::v1::AutoUpgradeOptions& upgrade_options() const;
  ::google::container::v1::AutoUpgradeOptions* release_upgrade_options();
  ::google::container::v1::AutoUpgradeOptions* mutable_upgrade_options();
  void set_allocated_upgrade_options(::google::container::v1::AutoUpgradeOptions* upgrade_options);

  // bool auto_upgrade = 1;
  void clear_auto_upgrade();
  static const int kAutoUpgradeFieldNumber = 1;
  bool auto_upgrade() const;
  void set_auto_upgrade(bool value);

  // bool auto_repair = 2;
  void clear_auto_repair();
  static const int kAutoRepairFieldNumber = 2;
  bool auto_repair() const;
  void set_auto_repair(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodeManagement)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::container::v1::AutoUpgradeOptions* upgrade_options_;
  bool auto_upgrade_;
  bool auto_repair_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AutoUpgradeOptions final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.AutoUpgradeOptions) */ {
 public:
  AutoUpgradeOptions();
  virtual ~AutoUpgradeOptions();

  AutoUpgradeOptions(const AutoUpgradeOptions& from);

  inline AutoUpgradeOptions& operator=(const AutoUpgradeOptions& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AutoUpgradeOptions(AutoUpgradeOptions&& from) noexcept
    : AutoUpgradeOptions() {
    *this = ::std::move(from);
  }

  inline AutoUpgradeOptions& operator=(AutoUpgradeOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AutoUpgradeOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoUpgradeOptions* internal_default_instance() {
    return reinterpret_cast<const AutoUpgradeOptions*>(
               &_AutoUpgradeOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(AutoUpgradeOptions* other);
  friend void swap(AutoUpgradeOptions& a, AutoUpgradeOptions& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AutoUpgradeOptions* New() const final {
    return CreateMaybeMessage<AutoUpgradeOptions>(nullptr);
  }

  AutoUpgradeOptions* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AutoUpgradeOptions>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AutoUpgradeOptions& from);
  void MergeFrom(const AutoUpgradeOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoUpgradeOptions* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string auto_upgrade_start_time = 1;
  void clear_auto_upgrade_start_time();
  static const int kAutoUpgradeStartTimeFieldNumber = 1;
  const ::std::string& auto_upgrade_start_time() const;
  void set_auto_upgrade_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_auto_upgrade_start_time(::std::string&& value);
  #endif
  void set_auto_upgrade_start_time(const char* value);
  void set_auto_upgrade_start_time(const char* value, size_t size);
  ::std::string* mutable_auto_upgrade_start_time();
  ::std::string* release_auto_upgrade_start_time();
  void set_allocated_auto_upgrade_start_time(::std::string* auto_upgrade_start_time);

  // string description = 2;
  void clear_description();
  static const int kDescriptionFieldNumber = 2;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  #if LANG_CXX11
  void set_description(::std::string&& value);
  #endif
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:google.container.v1.AutoUpgradeOptions)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr auto_upgrade_start_time_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MaintenancePolicy final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MaintenancePolicy) */ {
 public:
  MaintenancePolicy();
  virtual ~MaintenancePolicy();

  MaintenancePolicy(const MaintenancePolicy& from);

  inline MaintenancePolicy& operator=(const MaintenancePolicy& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaintenancePolicy(MaintenancePolicy&& from) noexcept
    : MaintenancePolicy() {
    *this = ::std::move(from);
  }

  inline MaintenancePolicy& operator=(MaintenancePolicy&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MaintenancePolicy& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaintenancePolicy* internal_default_instance() {
    return reinterpret_cast<const MaintenancePolicy*>(
               &_MaintenancePolicy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(MaintenancePolicy* other);
  friend void swap(MaintenancePolicy& a, MaintenancePolicy& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaintenancePolicy* New() const final {
    return CreateMaybeMessage<MaintenancePolicy>(nullptr);
  }

  MaintenancePolicy* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaintenancePolicy>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaintenancePolicy& from);
  void MergeFrom(const MaintenancePolicy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaintenancePolicy* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string resource_version = 3;
  void clear_resource_version();
  static const int kResourceVersionFieldNumber = 3;
  const ::std::string& resource_version() const;
  void set_resource_version(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_version(::std::string&& value);
  #endif
  void set_resource_version(const char* value);
  void set_resource_version(const char* value, size_t size);
  ::std::string* mutable_resource_version();
  ::std::string* release_resource_version();
  void set_allocated_resource_version(::std::string* resource_version);

  // .google.container.v1.MaintenanceWindow window = 1;
  bool has_window() const;
  void clear_window();
  static const int kWindowFieldNumber = 1;
  const ::google::container::v1::MaintenanceWindow& window() const;
  ::google::container::v1::MaintenanceWindow* release_window();
  ::google::container::v1::MaintenanceWindow* mutable_window();
  void set_allocated_window(::google::container::v1::MaintenanceWindow* window);

  // @@protoc_insertion_point(class_scope:google.container.v1.MaintenancePolicy)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resource_version_;
  ::google::container::v1::MaintenanceWindow* window_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse, 
    ::std::string, ::google::container::v1::TimeWindow,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse, 
    ::std::string, ::google::container::v1::TimeWindow,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse();
  MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse& other);
  static const MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse*>(&_MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class MaintenanceWindow final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MaintenanceWindow) */ {
 public:
  MaintenanceWindow();
  virtual ~MaintenanceWindow();

  MaintenanceWindow(const MaintenanceWindow& from);

  inline MaintenanceWindow& operator=(const MaintenanceWindow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaintenanceWindow(MaintenanceWindow&& from) noexcept
    : MaintenanceWindow() {
    *this = ::std::move(from);
  }

  inline MaintenanceWindow& operator=(MaintenanceWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MaintenanceWindow& default_instance();

  enum PolicyCase {
    kDailyMaintenanceWindow = 2,
    kRecurringWindow = 3,
    POLICY_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaintenanceWindow* internal_default_instance() {
    return reinterpret_cast<const MaintenanceWindow*>(
               &_MaintenanceWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(MaintenanceWindow* other);
  friend void swap(MaintenanceWindow& a, MaintenanceWindow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaintenanceWindow* New() const final {
    return CreateMaybeMessage<MaintenanceWindow>(nullptr);
  }

  MaintenanceWindow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaintenanceWindow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaintenanceWindow& from);
  void MergeFrom(const MaintenanceWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaintenanceWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .google.container.v1.TimeWindow> maintenance_exclusions = 4;
  int maintenance_exclusions_size() const;
  void clear_maintenance_exclusions();
  static const int kMaintenanceExclusionsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::google::container::v1::TimeWindow >&
      maintenance_exclusions() const;
  ::google::protobuf::Map< ::std::string, ::google::container::v1::TimeWindow >*
      mutable_maintenance_exclusions();

  // .google.container.v1.DailyMaintenanceWindow daily_maintenance_window = 2;
  bool has_daily_maintenance_window() const;
  void clear_daily_maintenance_window();
  static const int kDailyMaintenanceWindowFieldNumber = 2;
  const ::google::container::v1::DailyMaintenanceWindow& daily_maintenance_window() const;
  ::google::container::v1::DailyMaintenanceWindow* release_daily_maintenance_window();
  ::google::container::v1::DailyMaintenanceWindow* mutable_daily_maintenance_window();
  void set_allocated_daily_maintenance_window(::google::container::v1::DailyMaintenanceWindow* daily_maintenance_window);

  // .google.container.v1.RecurringTimeWindow recurring_window = 3;
  bool has_recurring_window() const;
  void clear_recurring_window();
  static const int kRecurringWindowFieldNumber = 3;
  const ::google::container::v1::RecurringTimeWindow& recurring_window() const;
  ::google::container::v1::RecurringTimeWindow* release_recurring_window();
  ::google::container::v1::RecurringTimeWindow* mutable_recurring_window();
  void set_allocated_recurring_window(::google::container::v1::RecurringTimeWindow* recurring_window);

  void clear_policy();
  PolicyCase policy_case() const;
  // @@protoc_insertion_point(class_scope:google.container.v1.MaintenanceWindow)
 private:
  class HasBitSetters;
  void set_has_daily_maintenance_window();
  void set_has_recurring_window();

  inline bool has_policy() const;
  inline void clear_has_policy();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      MaintenanceWindow_MaintenanceExclusionsEntry_DoNotUse,
      ::std::string, ::google::container::v1::TimeWindow,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > maintenance_exclusions_;
  union PolicyUnion {
    PolicyUnion() {}
    ::google::container::v1::DailyMaintenanceWindow* daily_maintenance_window_;
    ::google::container::v1::RecurringTimeWindow* recurring_window_;
  } policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class TimeWindow final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.TimeWindow) */ {
 public:
  TimeWindow();
  virtual ~TimeWindow();

  TimeWindow(const TimeWindow& from);

  inline TimeWindow& operator=(const TimeWindow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TimeWindow(TimeWindow&& from) noexcept
    : TimeWindow() {
    *this = ::std::move(from);
  }

  inline TimeWindow& operator=(TimeWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const TimeWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TimeWindow* internal_default_instance() {
    return reinterpret_cast<const TimeWindow*>(
               &_TimeWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(TimeWindow* other);
  friend void swap(TimeWindow& a, TimeWindow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TimeWindow* New() const final {
    return CreateMaybeMessage<TimeWindow>(nullptr);
  }

  TimeWindow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TimeWindow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TimeWindow& from);
  void MergeFrom(const TimeWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TimeWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .google.protobuf.Timestamp start_time = 1;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  const ::google::protobuf::Timestamp& start_time() const;
  ::google::protobuf::Timestamp* release_start_time();
  ::google::protobuf::Timestamp* mutable_start_time();
  void set_allocated_start_time(::google::protobuf::Timestamp* start_time);

  // .google.protobuf.Timestamp end_time = 2;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 2;
  const ::google::protobuf::Timestamp& end_time() const;
  ::google::protobuf::Timestamp* release_end_time();
  ::google::protobuf::Timestamp* mutable_end_time();
  void set_allocated_end_time(::google::protobuf::Timestamp* end_time);

  // @@protoc_insertion_point(class_scope:google.container.v1.TimeWindow)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::Timestamp* start_time_;
  ::google::protobuf::Timestamp* end_time_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RecurringTimeWindow final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.RecurringTimeWindow) */ {
 public:
  RecurringTimeWindow();
  virtual ~RecurringTimeWindow();

  RecurringTimeWindow(const RecurringTimeWindow& from);

  inline RecurringTimeWindow& operator=(const RecurringTimeWindow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecurringTimeWindow(RecurringTimeWindow&& from) noexcept
    : RecurringTimeWindow() {
    *this = ::std::move(from);
  }

  inline RecurringTimeWindow& operator=(RecurringTimeWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RecurringTimeWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecurringTimeWindow* internal_default_instance() {
    return reinterpret_cast<const RecurringTimeWindow*>(
               &_RecurringTimeWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(RecurringTimeWindow* other);
  friend void swap(RecurringTimeWindow& a, RecurringTimeWindow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecurringTimeWindow* New() const final {
    return CreateMaybeMessage<RecurringTimeWindow>(nullptr);
  }

  RecurringTimeWindow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecurringTimeWindow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecurringTimeWindow& from);
  void MergeFrom(const RecurringTimeWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecurringTimeWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string recurrence = 2;
  void clear_recurrence();
  static const int kRecurrenceFieldNumber = 2;
  const ::std::string& recurrence() const;
  void set_recurrence(const ::std::string& value);
  #if LANG_CXX11
  void set_recurrence(::std::string&& value);
  #endif
  void set_recurrence(const char* value);
  void set_recurrence(const char* value, size_t size);
  ::std::string* mutable_recurrence();
  ::std::string* release_recurrence();
  void set_allocated_recurrence(::std::string* recurrence);

  // .google.container.v1.TimeWindow window = 1;
  bool has_window() const;
  void clear_window();
  static const int kWindowFieldNumber = 1;
  const ::google::container::v1::TimeWindow& window() const;
  ::google::container::v1::TimeWindow* release_window();
  ::google::container::v1::TimeWindow* mutable_window();
  void set_allocated_window(::google::container::v1::TimeWindow* window);

  // @@protoc_insertion_point(class_scope:google.container.v1.RecurringTimeWindow)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr recurrence_;
  ::google::container::v1::TimeWindow* window_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DailyMaintenanceWindow final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DailyMaintenanceWindow) */ {
 public:
  DailyMaintenanceWindow();
  virtual ~DailyMaintenanceWindow();

  DailyMaintenanceWindow(const DailyMaintenanceWindow& from);

  inline DailyMaintenanceWindow& operator=(const DailyMaintenanceWindow& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DailyMaintenanceWindow(DailyMaintenanceWindow&& from) noexcept
    : DailyMaintenanceWindow() {
    *this = ::std::move(from);
  }

  inline DailyMaintenanceWindow& operator=(DailyMaintenanceWindow&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DailyMaintenanceWindow& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DailyMaintenanceWindow* internal_default_instance() {
    return reinterpret_cast<const DailyMaintenanceWindow*>(
               &_DailyMaintenanceWindow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(DailyMaintenanceWindow* other);
  friend void swap(DailyMaintenanceWindow& a, DailyMaintenanceWindow& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DailyMaintenanceWindow* New() const final {
    return CreateMaybeMessage<DailyMaintenanceWindow>(nullptr);
  }

  DailyMaintenanceWindow* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DailyMaintenanceWindow>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DailyMaintenanceWindow& from);
  void MergeFrom(const DailyMaintenanceWindow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DailyMaintenanceWindow* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string start_time = 2;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  const ::std::string& start_time() const;
  void set_start_time(const ::std::string& value);
  #if LANG_CXX11
  void set_start_time(::std::string&& value);
  #endif
  void set_start_time(const char* value);
  void set_start_time(const char* value, size_t size);
  ::std::string* mutable_start_time();
  ::std::string* release_start_time();
  void set_allocated_start_time(::std::string* start_time);

  // string duration = 3;
  void clear_duration();
  static const int kDurationFieldNumber = 3;
  const ::std::string& duration() const;
  void set_duration(const ::std::string& value);
  #if LANG_CXX11
  void set_duration(::std::string&& value);
  #endif
  void set_duration(const char* value);
  void set_duration(const char* value, size_t size);
  ::std::string* mutable_duration();
  ::std::string* release_duration();
  void set_allocated_duration(::std::string* duration);

  // @@protoc_insertion_point(class_scope:google.container.v1.DailyMaintenanceWindow)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr start_time_;
  ::google::protobuf::internal::ArenaStringPtr duration_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetNodePoolManagementRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetNodePoolManagementRequest) */ {
 public:
  SetNodePoolManagementRequest();
  virtual ~SetNodePoolManagementRequest();

  SetNodePoolManagementRequest(const SetNodePoolManagementRequest& from);

  inline SetNodePoolManagementRequest& operator=(const SetNodePoolManagementRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNodePoolManagementRequest(SetNodePoolManagementRequest&& from) noexcept
    : SetNodePoolManagementRequest() {
    *this = ::std::move(from);
  }

  inline SetNodePoolManagementRequest& operator=(SetNodePoolManagementRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetNodePoolManagementRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNodePoolManagementRequest* internal_default_instance() {
    return reinterpret_cast<const SetNodePoolManagementRequest*>(
               &_SetNodePoolManagementRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(SetNodePoolManagementRequest* other);
  friend void swap(SetNodePoolManagementRequest& a, SetNodePoolManagementRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNodePoolManagementRequest* New() const final {
    return CreateMaybeMessage<SetNodePoolManagementRequest>(nullptr);
  }

  SetNodePoolManagementRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetNodePoolManagementRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetNodePoolManagementRequest& from);
  void MergeFrom(const SetNodePoolManagementRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNodePoolManagementRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_node_pool_id();
  PROTOBUF_DEPRECATED static const int kNodePoolIdFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::std::string& node_pool_id() const;
  PROTOBUF_DEPRECATED void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_node_pool_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value);
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_node_pool_id();
  PROTOBUF_DEPRECATED ::std::string* release_node_pool_id();
  PROTOBUF_DEPRECATED void set_allocated_node_pool_id(::std::string* node_pool_id);

  // string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.container.v1.NodeManagement management = 5 [(.google.api.field_behavior) = REQUIRED];
  bool has_management() const;
  void clear_management();
  static const int kManagementFieldNumber = 5;
  const ::google::container::v1::NodeManagement& management() const;
  ::google::container::v1::NodeManagement* release_management();
  ::google::container::v1::NodeManagement* mutable_management();
  void set_allocated_management(::google::container::v1::NodeManagement* management);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetNodePoolManagementRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::container::v1::NodeManagement* management_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetNodePoolSizeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetNodePoolSizeRequest) */ {
 public:
  SetNodePoolSizeRequest();
  virtual ~SetNodePoolSizeRequest();

  SetNodePoolSizeRequest(const SetNodePoolSizeRequest& from);

  inline SetNodePoolSizeRequest& operator=(const SetNodePoolSizeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNodePoolSizeRequest(SetNodePoolSizeRequest&& from) noexcept
    : SetNodePoolSizeRequest() {
    *this = ::std::move(from);
  }

  inline SetNodePoolSizeRequest& operator=(SetNodePoolSizeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetNodePoolSizeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNodePoolSizeRequest* internal_default_instance() {
    return reinterpret_cast<const SetNodePoolSizeRequest*>(
               &_SetNodePoolSizeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(SetNodePoolSizeRequest* other);
  friend void swap(SetNodePoolSizeRequest& a, SetNodePoolSizeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNodePoolSizeRequest* New() const final {
    return CreateMaybeMessage<SetNodePoolSizeRequest>(nullptr);
  }

  SetNodePoolSizeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetNodePoolSizeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetNodePoolSizeRequest& from);
  void MergeFrom(const SetNodePoolSizeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNodePoolSizeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_node_pool_id();
  PROTOBUF_DEPRECATED static const int kNodePoolIdFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::std::string& node_pool_id() const;
  PROTOBUF_DEPRECATED void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_node_pool_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value);
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_node_pool_id();
  PROTOBUF_DEPRECATED ::std::string* release_node_pool_id();
  PROTOBUF_DEPRECATED void set_allocated_node_pool_id(::std::string* node_pool_id);

  // string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // int32 node_count = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_node_count();
  static const int kNodeCountFieldNumber = 5;
  ::google::protobuf::int32 node_count() const;
  void set_node_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetNodePoolSizeRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::int32 node_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class RollbackNodePoolUpgradeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.RollbackNodePoolUpgradeRequest) */ {
 public:
  RollbackNodePoolUpgradeRequest();
  virtual ~RollbackNodePoolUpgradeRequest();

  RollbackNodePoolUpgradeRequest(const RollbackNodePoolUpgradeRequest& from);

  inline RollbackNodePoolUpgradeRequest& operator=(const RollbackNodePoolUpgradeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RollbackNodePoolUpgradeRequest(RollbackNodePoolUpgradeRequest&& from) noexcept
    : RollbackNodePoolUpgradeRequest() {
    *this = ::std::move(from);
  }

  inline RollbackNodePoolUpgradeRequest& operator=(RollbackNodePoolUpgradeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const RollbackNodePoolUpgradeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RollbackNodePoolUpgradeRequest* internal_default_instance() {
    return reinterpret_cast<const RollbackNodePoolUpgradeRequest*>(
               &_RollbackNodePoolUpgradeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(RollbackNodePoolUpgradeRequest* other);
  friend void swap(RollbackNodePoolUpgradeRequest& a, RollbackNodePoolUpgradeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RollbackNodePoolUpgradeRequest* New() const final {
    return CreateMaybeMessage<RollbackNodePoolUpgradeRequest>(nullptr);
  }

  RollbackNodePoolUpgradeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RollbackNodePoolUpgradeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RollbackNodePoolUpgradeRequest& from);
  void MergeFrom(const RollbackNodePoolUpgradeRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RollbackNodePoolUpgradeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string node_pool_id = 4 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_node_pool_id();
  PROTOBUF_DEPRECATED static const int kNodePoolIdFieldNumber = 4;
  PROTOBUF_DEPRECATED const ::std::string& node_pool_id() const;
  PROTOBUF_DEPRECATED void set_node_pool_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_node_pool_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value);
  PROTOBUF_DEPRECATED void set_node_pool_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_node_pool_id();
  PROTOBUF_DEPRECATED ::std::string* release_node_pool_id();
  PROTOBUF_DEPRECATED void set_allocated_node_pool_id(::std::string* node_pool_id);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.RollbackNodePoolUpgradeRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr node_pool_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListNodePoolsResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListNodePoolsResponse) */ {
 public:
  ListNodePoolsResponse();
  virtual ~ListNodePoolsResponse();

  ListNodePoolsResponse(const ListNodePoolsResponse& from);

  inline ListNodePoolsResponse& operator=(const ListNodePoolsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListNodePoolsResponse(ListNodePoolsResponse&& from) noexcept
    : ListNodePoolsResponse() {
    *this = ::std::move(from);
  }

  inline ListNodePoolsResponse& operator=(ListNodePoolsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListNodePoolsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListNodePoolsResponse* internal_default_instance() {
    return reinterpret_cast<const ListNodePoolsResponse*>(
               &_ListNodePoolsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(ListNodePoolsResponse* other);
  friend void swap(ListNodePoolsResponse& a, ListNodePoolsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListNodePoolsResponse* New() const final {
    return CreateMaybeMessage<ListNodePoolsResponse>(nullptr);
  }

  ListNodePoolsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListNodePoolsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListNodePoolsResponse& from);
  void MergeFrom(const ListNodePoolsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListNodePoolsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.NodePool node_pools = 1;
  int node_pools_size() const;
  void clear_node_pools();
  static const int kNodePoolsFieldNumber = 1;
  ::google::container::v1::NodePool* mutable_node_pools(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
      mutable_node_pools();
  const ::google::container::v1::NodePool& node_pools(int index) const;
  ::google::container::v1::NodePool* add_node_pools();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
      node_pools() const;

  // @@protoc_insertion_point(class_scope:google.container.v1.ListNodePoolsResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool > node_pools_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ClusterAutoscaling final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ClusterAutoscaling) */ {
 public:
  ClusterAutoscaling();
  virtual ~ClusterAutoscaling();

  ClusterAutoscaling(const ClusterAutoscaling& from);

  inline ClusterAutoscaling& operator=(const ClusterAutoscaling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterAutoscaling(ClusterAutoscaling&& from) noexcept
    : ClusterAutoscaling() {
    *this = ::std::move(from);
  }

  inline ClusterAutoscaling& operator=(ClusterAutoscaling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ClusterAutoscaling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterAutoscaling* internal_default_instance() {
    return reinterpret_cast<const ClusterAutoscaling*>(
               &_ClusterAutoscaling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(ClusterAutoscaling* other);
  friend void swap(ClusterAutoscaling& a, ClusterAutoscaling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterAutoscaling* New() const final {
    return CreateMaybeMessage<ClusterAutoscaling>(nullptr);
  }

  ClusterAutoscaling* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClusterAutoscaling>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClusterAutoscaling& from);
  void MergeFrom(const ClusterAutoscaling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterAutoscaling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.ResourceLimit resource_limits = 2;
  int resource_limits_size() const;
  void clear_resource_limits();
  static const int kResourceLimitsFieldNumber = 2;
  ::google::container::v1::ResourceLimit* mutable_resource_limits(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::ResourceLimit >*
      mutable_resource_limits();
  const ::google::container::v1::ResourceLimit& resource_limits(int index) const;
  ::google::container::v1::ResourceLimit* add_resource_limits();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::ResourceLimit >&
      resource_limits() const;

  // repeated string autoprovisioning_locations = 5;
  int autoprovisioning_locations_size() const;
  void clear_autoprovisioning_locations();
  static const int kAutoprovisioningLocationsFieldNumber = 5;
  const ::std::string& autoprovisioning_locations(int index) const;
  ::std::string* mutable_autoprovisioning_locations(int index);
  void set_autoprovisioning_locations(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_autoprovisioning_locations(int index, ::std::string&& value);
  #endif
  void set_autoprovisioning_locations(int index, const char* value);
  void set_autoprovisioning_locations(int index, const char* value, size_t size);
  ::std::string* add_autoprovisioning_locations();
  void add_autoprovisioning_locations(const ::std::string& value);
  #if LANG_CXX11
  void add_autoprovisioning_locations(::std::string&& value);
  #endif
  void add_autoprovisioning_locations(const char* value);
  void add_autoprovisioning_locations(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& autoprovisioning_locations() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_autoprovisioning_locations();

  // .google.container.v1.AutoprovisioningNodePoolDefaults autoprovisioning_node_pool_defaults = 4;
  bool has_autoprovisioning_node_pool_defaults() const;
  void clear_autoprovisioning_node_pool_defaults();
  static const int kAutoprovisioningNodePoolDefaultsFieldNumber = 4;
  const ::google::container::v1::AutoprovisioningNodePoolDefaults& autoprovisioning_node_pool_defaults() const;
  ::google::container::v1::AutoprovisioningNodePoolDefaults* release_autoprovisioning_node_pool_defaults();
  ::google::container::v1::AutoprovisioningNodePoolDefaults* mutable_autoprovisioning_node_pool_defaults();
  void set_allocated_autoprovisioning_node_pool_defaults(::google::container::v1::AutoprovisioningNodePoolDefaults* autoprovisioning_node_pool_defaults);

  // bool enable_node_autoprovisioning = 1;
  void clear_enable_node_autoprovisioning();
  static const int kEnableNodeAutoprovisioningFieldNumber = 1;
  bool enable_node_autoprovisioning() const;
  void set_enable_node_autoprovisioning(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ClusterAutoscaling)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::ResourceLimit > resource_limits_;
  ::google::protobuf::RepeatedPtrField<::std::string> autoprovisioning_locations_;
  ::google::container::v1::AutoprovisioningNodePoolDefaults* autoprovisioning_node_pool_defaults_;
  bool enable_node_autoprovisioning_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AutoprovisioningNodePoolDefaults final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.AutoprovisioningNodePoolDefaults) */ {
 public:
  AutoprovisioningNodePoolDefaults();
  virtual ~AutoprovisioningNodePoolDefaults();

  AutoprovisioningNodePoolDefaults(const AutoprovisioningNodePoolDefaults& from);

  inline AutoprovisioningNodePoolDefaults& operator=(const AutoprovisioningNodePoolDefaults& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AutoprovisioningNodePoolDefaults(AutoprovisioningNodePoolDefaults&& from) noexcept
    : AutoprovisioningNodePoolDefaults() {
    *this = ::std::move(from);
  }

  inline AutoprovisioningNodePoolDefaults& operator=(AutoprovisioningNodePoolDefaults&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AutoprovisioningNodePoolDefaults& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AutoprovisioningNodePoolDefaults* internal_default_instance() {
    return reinterpret_cast<const AutoprovisioningNodePoolDefaults*>(
               &_AutoprovisioningNodePoolDefaults_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(AutoprovisioningNodePoolDefaults* other);
  friend void swap(AutoprovisioningNodePoolDefaults& a, AutoprovisioningNodePoolDefaults& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AutoprovisioningNodePoolDefaults* New() const final {
    return CreateMaybeMessage<AutoprovisioningNodePoolDefaults>(nullptr);
  }

  AutoprovisioningNodePoolDefaults* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AutoprovisioningNodePoolDefaults>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AutoprovisioningNodePoolDefaults& from);
  void MergeFrom(const AutoprovisioningNodePoolDefaults& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AutoprovisioningNodePoolDefaults* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string oauth_scopes = 1;
  int oauth_scopes_size() const;
  void clear_oauth_scopes();
  static const int kOauthScopesFieldNumber = 1;
  const ::std::string& oauth_scopes(int index) const;
  ::std::string* mutable_oauth_scopes(int index);
  void set_oauth_scopes(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_oauth_scopes(int index, ::std::string&& value);
  #endif
  void set_oauth_scopes(int index, const char* value);
  void set_oauth_scopes(int index, const char* value, size_t size);
  ::std::string* add_oauth_scopes();
  void add_oauth_scopes(const ::std::string& value);
  #if LANG_CXX11
  void add_oauth_scopes(::std::string&& value);
  #endif
  void add_oauth_scopes(const char* value);
  void add_oauth_scopes(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& oauth_scopes() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_oauth_scopes();

  // string service_account = 2;
  void clear_service_account();
  static const int kServiceAccountFieldNumber = 2;
  const ::std::string& service_account() const;
  void set_service_account(const ::std::string& value);
  #if LANG_CXX11
  void set_service_account(::std::string&& value);
  #endif
  void set_service_account(const char* value);
  void set_service_account(const char* value, size_t size);
  ::std::string* mutable_service_account();
  ::std::string* release_service_account();
  void set_allocated_service_account(::std::string* service_account);

  // string min_cpu_platform = 5;
  void clear_min_cpu_platform();
  static const int kMinCpuPlatformFieldNumber = 5;
  const ::std::string& min_cpu_platform() const;
  void set_min_cpu_platform(const ::std::string& value);
  #if LANG_CXX11
  void set_min_cpu_platform(::std::string&& value);
  #endif
  void set_min_cpu_platform(const char* value);
  void set_min_cpu_platform(const char* value, size_t size);
  ::std::string* mutable_min_cpu_platform();
  ::std::string* release_min_cpu_platform();
  void set_allocated_min_cpu_platform(::std::string* min_cpu_platform);

  // string disk_type = 7;
  void clear_disk_type();
  static const int kDiskTypeFieldNumber = 7;
  const ::std::string& disk_type() const;
  void set_disk_type(const ::std::string& value);
  #if LANG_CXX11
  void set_disk_type(::std::string&& value);
  #endif
  void set_disk_type(const char* value);
  void set_disk_type(const char* value, size_t size);
  ::std::string* mutable_disk_type();
  ::std::string* release_disk_type();
  void set_allocated_disk_type(::std::string* disk_type);

  // string boot_disk_kms_key = 9;
  void clear_boot_disk_kms_key();
  static const int kBootDiskKmsKeyFieldNumber = 9;
  const ::std::string& boot_disk_kms_key() const;
  void set_boot_disk_kms_key(const ::std::string& value);
  #if LANG_CXX11
  void set_boot_disk_kms_key(::std::string&& value);
  #endif
  void set_boot_disk_kms_key(const char* value);
  void set_boot_disk_kms_key(const char* value, size_t size);
  ::std::string* mutable_boot_disk_kms_key();
  ::std::string* release_boot_disk_kms_key();
  void set_allocated_boot_disk_kms_key(::std::string* boot_disk_kms_key);

  // string image_type = 10;
  void clear_image_type();
  static const int kImageTypeFieldNumber = 10;
  const ::std::string& image_type() const;
  void set_image_type(const ::std::string& value);
  #if LANG_CXX11
  void set_image_type(::std::string&& value);
  #endif
  void set_image_type(const char* value);
  void set_image_type(const char* value, size_t size);
  ::std::string* mutable_image_type();
  ::std::string* release_image_type();
  void set_allocated_image_type(::std::string* image_type);

  // .google.container.v1.NodePool.UpgradeSettings upgrade_settings = 3;
  bool has_upgrade_settings() const;
  void clear_upgrade_settings();
  static const int kUpgradeSettingsFieldNumber = 3;
  const ::google::container::v1::NodePool_UpgradeSettings& upgrade_settings() const;
  ::google::container::v1::NodePool_UpgradeSettings* release_upgrade_settings();
  ::google::container::v1::NodePool_UpgradeSettings* mutable_upgrade_settings();
  void set_allocated_upgrade_settings(::google::container::v1::NodePool_UpgradeSettings* upgrade_settings);

  // .google.container.v1.NodeManagement management = 4;
  bool has_management() const;
  void clear_management();
  static const int kManagementFieldNumber = 4;
  const ::google::container::v1::NodeManagement& management() const;
  ::google::container::v1::NodeManagement* release_management();
  ::google::container::v1::NodeManagement* mutable_management();
  void set_allocated_management(::google::container::v1::NodeManagement* management);

  // .google.container.v1.ShieldedInstanceConfig shielded_instance_config = 8;
  bool has_shielded_instance_config() const;
  void clear_shielded_instance_config();
  static const int kShieldedInstanceConfigFieldNumber = 8;
  const ::google::container::v1::ShieldedInstanceConfig& shielded_instance_config() const;
  ::google::container::v1::ShieldedInstanceConfig* release_shielded_instance_config();
  ::google::container::v1::ShieldedInstanceConfig* mutable_shielded_instance_config();
  void set_allocated_shielded_instance_config(::google::container::v1::ShieldedInstanceConfig* shielded_instance_config);

  // int32 disk_size_gb = 6;
  void clear_disk_size_gb();
  static const int kDiskSizeGbFieldNumber = 6;
  ::google::protobuf::int32 disk_size_gb() const;
  void set_disk_size_gb(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.AutoprovisioningNodePoolDefaults)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> oauth_scopes_;
  ::google::protobuf::internal::ArenaStringPtr service_account_;
  ::google::protobuf::internal::ArenaStringPtr min_cpu_platform_;
  ::google::protobuf::internal::ArenaStringPtr disk_type_;
  ::google::protobuf::internal::ArenaStringPtr boot_disk_kms_key_;
  ::google::protobuf::internal::ArenaStringPtr image_type_;
  ::google::container::v1::NodePool_UpgradeSettings* upgrade_settings_;
  ::google::container::v1::NodeManagement* management_;
  ::google::container::v1::ShieldedInstanceConfig* shielded_instance_config_;
  ::google::protobuf::int32 disk_size_gb_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResourceLimit final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ResourceLimit) */ {
 public:
  ResourceLimit();
  virtual ~ResourceLimit();

  ResourceLimit(const ResourceLimit& from);

  inline ResourceLimit& operator=(const ResourceLimit& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceLimit(ResourceLimit&& from) noexcept
    : ResourceLimit() {
    *this = ::std::move(from);
  }

  inline ResourceLimit& operator=(ResourceLimit&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResourceLimit& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceLimit* internal_default_instance() {
    return reinterpret_cast<const ResourceLimit*>(
               &_ResourceLimit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(ResourceLimit* other);
  friend void swap(ResourceLimit& a, ResourceLimit& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceLimit* New() const final {
    return CreateMaybeMessage<ResourceLimit>(nullptr);
  }

  ResourceLimit* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceLimit>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceLimit& from);
  void MergeFrom(const ResourceLimit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceLimit* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string resource_type = 1;
  void clear_resource_type();
  static const int kResourceTypeFieldNumber = 1;
  const ::std::string& resource_type() const;
  void set_resource_type(const ::std::string& value);
  #if LANG_CXX11
  void set_resource_type(::std::string&& value);
  #endif
  void set_resource_type(const char* value);
  void set_resource_type(const char* value, size_t size);
  ::std::string* mutable_resource_type();
  ::std::string* release_resource_type();
  void set_allocated_resource_type(::std::string* resource_type);

  // int64 minimum = 2;
  void clear_minimum();
  static const int kMinimumFieldNumber = 2;
  ::google::protobuf::int64 minimum() const;
  void set_minimum(::google::protobuf::int64 value);

  // int64 maximum = 3;
  void clear_maximum();
  static const int kMaximumFieldNumber = 3;
  ::google::protobuf::int64 maximum() const;
  void set_maximum(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ResourceLimit)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr resource_type_;
  ::google::protobuf::int64 minimum_;
  ::google::protobuf::int64 maximum_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NodePoolAutoscaling final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NodePoolAutoscaling) */ {
 public:
  NodePoolAutoscaling();
  virtual ~NodePoolAutoscaling();

  NodePoolAutoscaling(const NodePoolAutoscaling& from);

  inline NodePoolAutoscaling& operator=(const NodePoolAutoscaling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodePoolAutoscaling(NodePoolAutoscaling&& from) noexcept
    : NodePoolAutoscaling() {
    *this = ::std::move(from);
  }

  inline NodePoolAutoscaling& operator=(NodePoolAutoscaling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NodePoolAutoscaling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodePoolAutoscaling* internal_default_instance() {
    return reinterpret_cast<const NodePoolAutoscaling*>(
               &_NodePoolAutoscaling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(NodePoolAutoscaling* other);
  friend void swap(NodePoolAutoscaling& a, NodePoolAutoscaling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodePoolAutoscaling* New() const final {
    return CreateMaybeMessage<NodePoolAutoscaling>(nullptr);
  }

  NodePoolAutoscaling* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodePoolAutoscaling>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodePoolAutoscaling& from);
  void MergeFrom(const NodePoolAutoscaling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodePoolAutoscaling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 min_node_count = 2;
  void clear_min_node_count();
  static const int kMinNodeCountFieldNumber = 2;
  ::google::protobuf::int32 min_node_count() const;
  void set_min_node_count(::google::protobuf::int32 value);

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // bool autoprovisioned = 4;
  void clear_autoprovisioned();
  static const int kAutoprovisionedFieldNumber = 4;
  bool autoprovisioned() const;
  void set_autoprovisioned(bool value);

  // int32 max_node_count = 3;
  void clear_max_node_count();
  static const int kMaxNodeCountFieldNumber = 3;
  ::google::protobuf::int32 max_node_count() const;
  void set_max_node_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NodePoolAutoscaling)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 min_node_count_;
  bool enabled_;
  bool autoprovisioned_;
  ::google::protobuf::int32 max_node_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetLabelsRequest_ResourceLabelsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<SetLabelsRequest_ResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
static bool _ParseMap(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  typedef ::google::protobuf::internal::MapEntry<SetLabelsRequest_ResourceLabelsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  SetLabelsRequest_ResourceLabelsEntry_DoNotUse();
  SetLabelsRequest_ResourceLabelsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const SetLabelsRequest_ResourceLabelsEntry_DoNotUse& other);
  static const SetLabelsRequest_ResourceLabelsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const SetLabelsRequest_ResourceLabelsEntry_DoNotUse*>(&_SetLabelsRequest_ResourceLabelsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class SetLabelsRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetLabelsRequest) */ {
 public:
  SetLabelsRequest();
  virtual ~SetLabelsRequest();

  SetLabelsRequest(const SetLabelsRequest& from);

  inline SetLabelsRequest& operator=(const SetLabelsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetLabelsRequest(SetLabelsRequest&& from) noexcept
    : SetLabelsRequest() {
    *this = ::std::move(from);
  }

  inline SetLabelsRequest& operator=(SetLabelsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetLabelsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLabelsRequest* internal_default_instance() {
    return reinterpret_cast<const SetLabelsRequest*>(
               &_SetLabelsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  void Swap(SetLabelsRequest* other);
  friend void swap(SetLabelsRequest& a, SetLabelsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetLabelsRequest* New() const final {
    return CreateMaybeMessage<SetLabelsRequest>(nullptr);
  }

  SetLabelsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetLabelsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetLabelsRequest& from);
  void MergeFrom(const SetLabelsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLabelsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> resource_labels = 4 [(.google.api.field_behavior) = REQUIRED];
  int resource_labels_size() const;
  void clear_resource_labels();
  static const int kResourceLabelsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      resource_labels() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_resource_labels();

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string label_fingerprint = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_label_fingerprint();
  static const int kLabelFingerprintFieldNumber = 5;
  const ::std::string& label_fingerprint() const;
  void set_label_fingerprint(const ::std::string& value);
  #if LANG_CXX11
  void set_label_fingerprint(::std::string&& value);
  #endif
  void set_label_fingerprint(const char* value);
  void set_label_fingerprint(const char* value, size_t size);
  ::std::string* mutable_label_fingerprint();
  ::std::string* release_label_fingerprint();
  void set_allocated_label_fingerprint(::std::string* label_fingerprint);

  // string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetLabelsRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::MapField<
      SetLabelsRequest_ResourceLabelsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > resource_labels_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr label_fingerprint_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetLegacyAbacRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetLegacyAbacRequest) */ {
 public:
  SetLegacyAbacRequest();
  virtual ~SetLegacyAbacRequest();

  SetLegacyAbacRequest(const SetLegacyAbacRequest& from);

  inline SetLegacyAbacRequest& operator=(const SetLegacyAbacRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetLegacyAbacRequest(SetLegacyAbacRequest&& from) noexcept
    : SetLegacyAbacRequest() {
    *this = ::std::move(from);
  }

  inline SetLegacyAbacRequest& operator=(SetLegacyAbacRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetLegacyAbacRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetLegacyAbacRequest* internal_default_instance() {
    return reinterpret_cast<const SetLegacyAbacRequest*>(
               &_SetLegacyAbacRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  void Swap(SetLegacyAbacRequest* other);
  friend void swap(SetLegacyAbacRequest& a, SetLegacyAbacRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetLegacyAbacRequest* New() const final {
    return CreateMaybeMessage<SetLegacyAbacRequest>(nullptr);
  }

  SetLegacyAbacRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetLegacyAbacRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetLegacyAbacRequest& from);
  void MergeFrom(const SetLegacyAbacRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetLegacyAbacRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool enabled = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_enabled();
  static const int kEnabledFieldNumber = 4;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetLegacyAbacRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StartIPRotationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.StartIPRotationRequest) */ {
 public:
  StartIPRotationRequest();
  virtual ~StartIPRotationRequest();

  StartIPRotationRequest(const StartIPRotationRequest& from);

  inline StartIPRotationRequest& operator=(const StartIPRotationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartIPRotationRequest(StartIPRotationRequest&& from) noexcept
    : StartIPRotationRequest() {
    *this = ::std::move(from);
  }

  inline StartIPRotationRequest& operator=(StartIPRotationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StartIPRotationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartIPRotationRequest* internal_default_instance() {
    return reinterpret_cast<const StartIPRotationRequest*>(
               &_StartIPRotationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  void Swap(StartIPRotationRequest* other);
  friend void swap(StartIPRotationRequest& a, StartIPRotationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartIPRotationRequest* New() const final {
    return CreateMaybeMessage<StartIPRotationRequest>(nullptr);
  }

  StartIPRotationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartIPRotationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartIPRotationRequest& from);
  void MergeFrom(const StartIPRotationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartIPRotationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bool rotate_credentials = 7;
  void clear_rotate_credentials();
  static const int kRotateCredentialsFieldNumber = 7;
  bool rotate_credentials() const;
  void set_rotate_credentials(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.StartIPRotationRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool rotate_credentials_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class CompleteIPRotationRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.CompleteIPRotationRequest) */ {
 public:
  CompleteIPRotationRequest();
  virtual ~CompleteIPRotationRequest();

  CompleteIPRotationRequest(const CompleteIPRotationRequest& from);

  inline CompleteIPRotationRequest& operator=(const CompleteIPRotationRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CompleteIPRotationRequest(CompleteIPRotationRequest&& from) noexcept
    : CompleteIPRotationRequest() {
    *this = ::std::move(from);
  }

  inline CompleteIPRotationRequest& operator=(CompleteIPRotationRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const CompleteIPRotationRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CompleteIPRotationRequest* internal_default_instance() {
    return reinterpret_cast<const CompleteIPRotationRequest*>(
               &_CompleteIPRotationRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  void Swap(CompleteIPRotationRequest* other);
  friend void swap(CompleteIPRotationRequest& a, CompleteIPRotationRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CompleteIPRotationRequest* New() const final {
    return CreateMaybeMessage<CompleteIPRotationRequest>(nullptr);
  }

  CompleteIPRotationRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CompleteIPRotationRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CompleteIPRotationRequest& from);
  void MergeFrom(const CompleteIPRotationRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CompleteIPRotationRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 7;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.container.v1.CompleteIPRotationRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class AcceleratorConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.AcceleratorConfig) */ {
 public:
  AcceleratorConfig();
  virtual ~AcceleratorConfig();

  AcceleratorConfig(const AcceleratorConfig& from);

  inline AcceleratorConfig& operator=(const AcceleratorConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AcceleratorConfig(AcceleratorConfig&& from) noexcept
    : AcceleratorConfig() {
    *this = ::std::move(from);
  }

  inline AcceleratorConfig& operator=(AcceleratorConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const AcceleratorConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcceleratorConfig* internal_default_instance() {
    return reinterpret_cast<const AcceleratorConfig*>(
               &_AcceleratorConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  void Swap(AcceleratorConfig* other);
  friend void swap(AcceleratorConfig& a, AcceleratorConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AcceleratorConfig* New() const final {
    return CreateMaybeMessage<AcceleratorConfig>(nullptr);
  }

  AcceleratorConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AcceleratorConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AcceleratorConfig& from);
  void MergeFrom(const AcceleratorConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcceleratorConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string accelerator_type = 2;
  void clear_accelerator_type();
  static const int kAcceleratorTypeFieldNumber = 2;
  const ::std::string& accelerator_type() const;
  void set_accelerator_type(const ::std::string& value);
  #if LANG_CXX11
  void set_accelerator_type(::std::string&& value);
  #endif
  void set_accelerator_type(const char* value);
  void set_accelerator_type(const char* value, size_t size);
  ::std::string* mutable_accelerator_type();
  ::std::string* release_accelerator_type();
  void set_allocated_accelerator_type(::std::string* accelerator_type);

  // int64 accelerator_count = 1;
  void clear_accelerator_count();
  static const int kAcceleratorCountFieldNumber = 1;
  ::google::protobuf::int64 accelerator_count() const;
  void set_accelerator_count(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.AcceleratorConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr accelerator_type_;
  ::google::protobuf::int64 accelerator_count_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WorkloadMetadataConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.WorkloadMetadataConfig) */ {
 public:
  WorkloadMetadataConfig();
  virtual ~WorkloadMetadataConfig();

  WorkloadMetadataConfig(const WorkloadMetadataConfig& from);

  inline WorkloadMetadataConfig& operator=(const WorkloadMetadataConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkloadMetadataConfig(WorkloadMetadataConfig&& from) noexcept
    : WorkloadMetadataConfig() {
    *this = ::std::move(from);
  }

  inline WorkloadMetadataConfig& operator=(WorkloadMetadataConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkloadMetadataConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkloadMetadataConfig* internal_default_instance() {
    return reinterpret_cast<const WorkloadMetadataConfig*>(
               &_WorkloadMetadataConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  void Swap(WorkloadMetadataConfig* other);
  friend void swap(WorkloadMetadataConfig& a, WorkloadMetadataConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkloadMetadataConfig* New() const final {
    return CreateMaybeMessage<WorkloadMetadataConfig>(nullptr);
  }

  WorkloadMetadataConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkloadMetadataConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkloadMetadataConfig& from);
  void MergeFrom(const WorkloadMetadataConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkloadMetadataConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef WorkloadMetadataConfig_Mode Mode;
  static const Mode MODE_UNSPECIFIED =
    WorkloadMetadataConfig_Mode_MODE_UNSPECIFIED;
  static const Mode GCE_METADATA =
    WorkloadMetadataConfig_Mode_GCE_METADATA;
  static const Mode GKE_METADATA =
    WorkloadMetadataConfig_Mode_GKE_METADATA;
  static inline bool Mode_IsValid(int value) {
    return WorkloadMetadataConfig_Mode_IsValid(value);
  }
  static const Mode Mode_MIN =
    WorkloadMetadataConfig_Mode_Mode_MIN;
  static const Mode Mode_MAX =
    WorkloadMetadataConfig_Mode_Mode_MAX;
  static const int Mode_ARRAYSIZE =
    WorkloadMetadataConfig_Mode_Mode_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Mode_descriptor() {
    return WorkloadMetadataConfig_Mode_descriptor();
  }
  static inline const ::std::string& Mode_Name(Mode value) {
    return WorkloadMetadataConfig_Mode_Name(value);
  }
  static inline bool Mode_Parse(const ::std::string& name,
      Mode* value) {
    return WorkloadMetadataConfig_Mode_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.container.v1.WorkloadMetadataConfig.Mode mode = 2;
  void clear_mode();
  static const int kModeFieldNumber = 2;
  ::google::container::v1::WorkloadMetadataConfig_Mode mode() const;
  void set_mode(::google::container::v1::WorkloadMetadataConfig_Mode value);

  // @@protoc_insertion_point(class_scope:google.container.v1.WorkloadMetadataConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int mode_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetNetworkPolicyRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetNetworkPolicyRequest) */ {
 public:
  SetNetworkPolicyRequest();
  virtual ~SetNetworkPolicyRequest();

  SetNetworkPolicyRequest(const SetNetworkPolicyRequest& from);

  inline SetNetworkPolicyRequest& operator=(const SetNetworkPolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetNetworkPolicyRequest(SetNetworkPolicyRequest&& from) noexcept
    : SetNetworkPolicyRequest() {
    *this = ::std::move(from);
  }

  inline SetNetworkPolicyRequest& operator=(SetNetworkPolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetNetworkPolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetNetworkPolicyRequest* internal_default_instance() {
    return reinterpret_cast<const SetNetworkPolicyRequest*>(
               &_SetNetworkPolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  void Swap(SetNetworkPolicyRequest* other);
  friend void swap(SetNetworkPolicyRequest& a, SetNetworkPolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetNetworkPolicyRequest* New() const final {
    return CreateMaybeMessage<SetNetworkPolicyRequest>(nullptr);
  }

  SetNetworkPolicyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetNetworkPolicyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetNetworkPolicyRequest& from);
  void MergeFrom(const SetNetworkPolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetNetworkPolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_project_id();
  PROTOBUF_DEPRECATED static const int kProjectIdFieldNumber = 1;
  PROTOBUF_DEPRECATED const ::std::string& project_id() const;
  PROTOBUF_DEPRECATED void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_project_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_project_id(const char* value);
  PROTOBUF_DEPRECATED void set_project_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_project_id();
  PROTOBUF_DEPRECATED ::std::string* release_project_id();
  PROTOBUF_DEPRECATED void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_zone();
  PROTOBUF_DEPRECATED static const int kZoneFieldNumber = 2;
  PROTOBUF_DEPRECATED const ::std::string& zone() const;
  PROTOBUF_DEPRECATED void set_zone(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_zone(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_zone(const char* value);
  PROTOBUF_DEPRECATED void set_zone(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_zone();
  PROTOBUF_DEPRECATED ::std::string* release_zone();
  PROTOBUF_DEPRECATED void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [deprecated = true];
  PROTOBUF_DEPRECATED void clear_cluster_id();
  PROTOBUF_DEPRECATED static const int kClusterIdFieldNumber = 3;
  PROTOBUF_DEPRECATED const ::std::string& cluster_id() const;
  PROTOBUF_DEPRECATED void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  PROTOBUF_DEPRECATED void set_cluster_id(::std::string&& value);
  #endif
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value);
  PROTOBUF_DEPRECATED void set_cluster_id(const char* value, size_t size);
  PROTOBUF_DEPRECATED ::std::string* mutable_cluster_id();
  PROTOBUF_DEPRECATED ::std::string* release_cluster_id();
  PROTOBUF_DEPRECATED void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 6;
  void clear_name();
  static const int kNameFieldNumber = 6;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.container.v1.NetworkPolicy network_policy = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_network_policy() const;
  void clear_network_policy();
  static const int kNetworkPolicyFieldNumber = 4;
  const ::google::container::v1::NetworkPolicy& network_policy() const;
  ::google::container::v1::NetworkPolicy* release_network_policy();
  ::google::container::v1::NetworkPolicy* mutable_network_policy();
  void set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetNetworkPolicyRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::container::v1::NetworkPolicy* network_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class SetMaintenancePolicyRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.SetMaintenancePolicyRequest) */ {
 public:
  SetMaintenancePolicyRequest();
  virtual ~SetMaintenancePolicyRequest();

  SetMaintenancePolicyRequest(const SetMaintenancePolicyRequest& from);

  inline SetMaintenancePolicyRequest& operator=(const SetMaintenancePolicyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetMaintenancePolicyRequest(SetMaintenancePolicyRequest&& from) noexcept
    : SetMaintenancePolicyRequest() {
    *this = ::std::move(from);
  }

  inline SetMaintenancePolicyRequest& operator=(SetMaintenancePolicyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const SetMaintenancePolicyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetMaintenancePolicyRequest* internal_default_instance() {
    return reinterpret_cast<const SetMaintenancePolicyRequest*>(
               &_SetMaintenancePolicyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  void Swap(SetMaintenancePolicyRequest* other);
  friend void swap(SetMaintenancePolicyRequest& a, SetMaintenancePolicyRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetMaintenancePolicyRequest* New() const final {
    return CreateMaybeMessage<SetMaintenancePolicyRequest>(nullptr);
  }

  SetMaintenancePolicyRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetMaintenancePolicyRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetMaintenancePolicyRequest& from);
  void MergeFrom(const SetMaintenancePolicyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetMaintenancePolicyRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string project_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_project_id();
  static const int kProjectIdFieldNumber = 1;
  const ::std::string& project_id() const;
  void set_project_id(const ::std::string& value);
  #if LANG_CXX11
  void set_project_id(::std::string&& value);
  #endif
  void set_project_id(const char* value);
  void set_project_id(const char* value, size_t size);
  ::std::string* mutable_project_id();
  ::std::string* release_project_id();
  void set_allocated_project_id(::std::string* project_id);

  // string zone = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_zone();
  static const int kZoneFieldNumber = 2;
  const ::std::string& zone() const;
  void set_zone(const ::std::string& value);
  #if LANG_CXX11
  void set_zone(::std::string&& value);
  #endif
  void set_zone(const char* value);
  void set_zone(const char* value, size_t size);
  ::std::string* mutable_zone();
  ::std::string* release_zone();
  void set_allocated_zone(::std::string* zone);

  // string cluster_id = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_cluster_id();
  static const int kClusterIdFieldNumber = 3;
  const ::std::string& cluster_id() const;
  void set_cluster_id(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_id(::std::string&& value);
  #endif
  void set_cluster_id(const char* value);
  void set_cluster_id(const char* value, size_t size);
  ::std::string* mutable_cluster_id();
  ::std::string* release_cluster_id();
  void set_allocated_cluster_id(::std::string* cluster_id);

  // string name = 5;
  void clear_name();
  static const int kNameFieldNumber = 5;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .google.container.v1.MaintenancePolicy maintenance_policy = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_maintenance_policy() const;
  void clear_maintenance_policy();
  static const int kMaintenancePolicyFieldNumber = 4;
  const ::google::container::v1::MaintenancePolicy& maintenance_policy() const;
  ::google::container::v1::MaintenancePolicy* release_maintenance_policy();
  ::google::container::v1::MaintenancePolicy* mutable_maintenance_policy();
  void set_allocated_maintenance_policy(::google::container::v1::MaintenancePolicy* maintenance_policy);

  // @@protoc_insertion_point(class_scope:google.container.v1.SetMaintenancePolicyRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr project_id_;
  ::google::protobuf::internal::ArenaStringPtr zone_;
  ::google::protobuf::internal::ArenaStringPtr cluster_id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::container::v1::MaintenancePolicy* maintenance_policy_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class StatusCondition final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.StatusCondition) */ {
 public:
  StatusCondition();
  virtual ~StatusCondition();

  StatusCondition(const StatusCondition& from);

  inline StatusCondition& operator=(const StatusCondition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StatusCondition(StatusCondition&& from) noexcept
    : StatusCondition() {
    *this = ::std::move(from);
  }

  inline StatusCondition& operator=(StatusCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const StatusCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StatusCondition* internal_default_instance() {
    return reinterpret_cast<const StatusCondition*>(
               &_StatusCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  void Swap(StatusCondition* other);
  friend void swap(StatusCondition& a, StatusCondition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StatusCondition* New() const final {
    return CreateMaybeMessage<StatusCondition>(nullptr);
  }

  StatusCondition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StatusCondition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StatusCondition& from);
  void MergeFrom(const StatusCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StatusCondition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef StatusCondition_Code Code;
  static const Code UNKNOWN =
    StatusCondition_Code_UNKNOWN;
  static const Code GCE_STOCKOUT =
    StatusCondition_Code_GCE_STOCKOUT;
  static const Code GKE_SERVICE_ACCOUNT_DELETED =
    StatusCondition_Code_GKE_SERVICE_ACCOUNT_DELETED;
  static const Code GCE_QUOTA_EXCEEDED =
    StatusCondition_Code_GCE_QUOTA_EXCEEDED;
  static const Code SET_BY_OPERATOR =
    StatusCondition_Code_SET_BY_OPERATOR;
  static const Code CLOUD_KMS_KEY_ERROR =
    StatusCondition_Code_CLOUD_KMS_KEY_ERROR;
  static inline bool Code_IsValid(int value) {
    return StatusCondition_Code_IsValid(value);
  }
  static const Code Code_MIN =
    StatusCondition_Code_Code_MIN;
  static const Code Code_MAX =
    StatusCondition_Code_Code_MAX;
  static const int Code_ARRAYSIZE =
    StatusCondition_Code_Code_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Code_descriptor() {
    return StatusCondition_Code_descriptor();
  }
  static inline const ::std::string& Code_Name(Code value) {
    return StatusCondition_Code_Name(value);
  }
  static inline bool Code_Parse(const ::std::string& name,
      Code* value) {
    return StatusCondition_Code_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string message = 2;
  void clear_message();
  static const int kMessageFieldNumber = 2;
  const ::std::string& message() const;
  void set_message(const ::std::string& value);
  #if LANG_CXX11
  void set_message(::std::string&& value);
  #endif
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  ::std::string* mutable_message();
  ::std::string* release_message();
  void set_allocated_message(::std::string* message);

  // .google.container.v1.StatusCondition.Code code = 1;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::container::v1::StatusCondition_Code code() const;
  void set_code(::google::container::v1::StatusCondition_Code value);

  // @@protoc_insertion_point(class_scope:google.container.v1.StatusCondition)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr message_;
  int code_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class NetworkConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.NetworkConfig) */ {
 public:
  NetworkConfig();
  virtual ~NetworkConfig();

  NetworkConfig(const NetworkConfig& from);

  inline NetworkConfig& operator=(const NetworkConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NetworkConfig(NetworkConfig&& from) noexcept
    : NetworkConfig() {
    *this = ::std::move(from);
  }

  inline NetworkConfig& operator=(NetworkConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const NetworkConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NetworkConfig* internal_default_instance() {
    return reinterpret_cast<const NetworkConfig*>(
               &_NetworkConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  void Swap(NetworkConfig* other);
  friend void swap(NetworkConfig& a, NetworkConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NetworkConfig* New() const final {
    return CreateMaybeMessage<NetworkConfig>(nullptr);
  }

  NetworkConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NetworkConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NetworkConfig& from);
  void MergeFrom(const NetworkConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NetworkConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string network = 1;
  void clear_network();
  static const int kNetworkFieldNumber = 1;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  #if LANG_CXX11
  void set_network(::std::string&& value);
  #endif
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // string subnetwork = 2;
  void clear_subnetwork();
  static const int kSubnetworkFieldNumber = 2;
  const ::std::string& subnetwork() const;
  void set_subnetwork(const ::std::string& value);
  #if LANG_CXX11
  void set_subnetwork(::std::string&& value);
  #endif
  void set_subnetwork(const char* value);
  void set_subnetwork(const char* value, size_t size);
  ::std::string* mutable_subnetwork();
  ::std::string* release_subnetwork();
  void set_allocated_subnetwork(::std::string* subnetwork);

  // .google.container.v1.DefaultSnatStatus default_snat_status = 7;
  bool has_default_snat_status() const;
  void clear_default_snat_status();
  static const int kDefaultSnatStatusFieldNumber = 7;
  const ::google::container::v1::DefaultSnatStatus& default_snat_status() const;
  ::google::container::v1::DefaultSnatStatus* release_default_snat_status();
  ::google::container::v1::DefaultSnatStatus* mutable_default_snat_status();
  void set_allocated_default_snat_status(::google::container::v1::DefaultSnatStatus* default_snat_status);

  // bool enable_intra_node_visibility = 5;
  void clear_enable_intra_node_visibility();
  static const int kEnableIntraNodeVisibilityFieldNumber = 5;
  bool enable_intra_node_visibility() const;
  void set_enable_intra_node_visibility(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.NetworkConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr subnetwork_;
  ::google::container::v1::DefaultSnatStatus* default_snat_status_;
  bool enable_intra_node_visibility_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOpenIDConfigRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetOpenIDConfigRequest) */ {
 public:
  GetOpenIDConfigRequest();
  virtual ~GetOpenIDConfigRequest();

  GetOpenIDConfigRequest(const GetOpenIDConfigRequest& from);

  inline GetOpenIDConfigRequest& operator=(const GetOpenIDConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOpenIDConfigRequest(GetOpenIDConfigRequest&& from) noexcept
    : GetOpenIDConfigRequest() {
    *this = ::std::move(from);
  }

  inline GetOpenIDConfigRequest& operator=(GetOpenIDConfigRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetOpenIDConfigRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOpenIDConfigRequest* internal_default_instance() {
    return reinterpret_cast<const GetOpenIDConfigRequest*>(
               &_GetOpenIDConfigRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  void Swap(GetOpenIDConfigRequest* other);
  friend void swap(GetOpenIDConfigRequest& a, GetOpenIDConfigRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOpenIDConfigRequest* New() const final {
    return CreateMaybeMessage<GetOpenIDConfigRequest>(nullptr);
  }

  GetOpenIDConfigRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetOpenIDConfigRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetOpenIDConfigRequest& from);
  void MergeFrom(const GetOpenIDConfigRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOpenIDConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetOpenIDConfigRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetOpenIDConfigResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetOpenIDConfigResponse) */ {
 public:
  GetOpenIDConfigResponse();
  virtual ~GetOpenIDConfigResponse();

  GetOpenIDConfigResponse(const GetOpenIDConfigResponse& from);

  inline GetOpenIDConfigResponse& operator=(const GetOpenIDConfigResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetOpenIDConfigResponse(GetOpenIDConfigResponse&& from) noexcept
    : GetOpenIDConfigResponse() {
    *this = ::std::move(from);
  }

  inline GetOpenIDConfigResponse& operator=(GetOpenIDConfigResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetOpenIDConfigResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetOpenIDConfigResponse* internal_default_instance() {
    return reinterpret_cast<const GetOpenIDConfigResponse*>(
               &_GetOpenIDConfigResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  void Swap(GetOpenIDConfigResponse* other);
  friend void swap(GetOpenIDConfigResponse& a, GetOpenIDConfigResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetOpenIDConfigResponse* New() const final {
    return CreateMaybeMessage<GetOpenIDConfigResponse>(nullptr);
  }

  GetOpenIDConfigResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetOpenIDConfigResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetOpenIDConfigResponse& from);
  void MergeFrom(const GetOpenIDConfigResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetOpenIDConfigResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string response_types_supported = 3;
  int response_types_supported_size() const;
  void clear_response_types_supported();
  static const int kResponseTypesSupportedFieldNumber = 3;
  const ::std::string& response_types_supported(int index) const;
  ::std::string* mutable_response_types_supported(int index);
  void set_response_types_supported(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_response_types_supported(int index, ::std::string&& value);
  #endif
  void set_response_types_supported(int index, const char* value);
  void set_response_types_supported(int index, const char* value, size_t size);
  ::std::string* add_response_types_supported();
  void add_response_types_supported(const ::std::string& value);
  #if LANG_CXX11
  void add_response_types_supported(::std::string&& value);
  #endif
  void add_response_types_supported(const char* value);
  void add_response_types_supported(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& response_types_supported() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_response_types_supported();

  // repeated string subject_types_supported = 4;
  int subject_types_supported_size() const;
  void clear_subject_types_supported();
  static const int kSubjectTypesSupportedFieldNumber = 4;
  const ::std::string& subject_types_supported(int index) const;
  ::std::string* mutable_subject_types_supported(int index);
  void set_subject_types_supported(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subject_types_supported(int index, ::std::string&& value);
  #endif
  void set_subject_types_supported(int index, const char* value);
  void set_subject_types_supported(int index, const char* value, size_t size);
  ::std::string* add_subject_types_supported();
  void add_subject_types_supported(const ::std::string& value);
  #if LANG_CXX11
  void add_subject_types_supported(::std::string&& value);
  #endif
  void add_subject_types_supported(const char* value);
  void add_subject_types_supported(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& subject_types_supported() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_subject_types_supported();

  // repeated string id_token_signing_alg_values_supported = 5;
  int id_token_signing_alg_values_supported_size() const;
  void clear_id_token_signing_alg_values_supported();
  static const int kIdTokenSigningAlgValuesSupportedFieldNumber = 5;
  const ::std::string& id_token_signing_alg_values_supported(int index) const;
  ::std::string* mutable_id_token_signing_alg_values_supported(int index);
  void set_id_token_signing_alg_values_supported(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_id_token_signing_alg_values_supported(int index, ::std::string&& value);
  #endif
  void set_id_token_signing_alg_values_supported(int index, const char* value);
  void set_id_token_signing_alg_values_supported(int index, const char* value, size_t size);
  ::std::string* add_id_token_signing_alg_values_supported();
  void add_id_token_signing_alg_values_supported(const ::std::string& value);
  #if LANG_CXX11
  void add_id_token_signing_alg_values_supported(::std::string&& value);
  #endif
  void add_id_token_signing_alg_values_supported(const char* value);
  void add_id_token_signing_alg_values_supported(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& id_token_signing_alg_values_supported() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_id_token_signing_alg_values_supported();

  // repeated string claims_supported = 6;
  int claims_supported_size() const;
  void clear_claims_supported();
  static const int kClaimsSupportedFieldNumber = 6;
  const ::std::string& claims_supported(int index) const;
  ::std::string* mutable_claims_supported(int index);
  void set_claims_supported(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_claims_supported(int index, ::std::string&& value);
  #endif
  void set_claims_supported(int index, const char* value);
  void set_claims_supported(int index, const char* value, size_t size);
  ::std::string* add_claims_supported();
  void add_claims_supported(const ::std::string& value);
  #if LANG_CXX11
  void add_claims_supported(::std::string&& value);
  #endif
  void add_claims_supported(const char* value);
  void add_claims_supported(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& claims_supported() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_claims_supported();

  // repeated string grant_types = 7;
  int grant_types_size() const;
  void clear_grant_types();
  static const int kGrantTypesFieldNumber = 7;
  const ::std::string& grant_types(int index) const;
  ::std::string* mutable_grant_types(int index);
  void set_grant_types(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_grant_types(int index, ::std::string&& value);
  #endif
  void set_grant_types(int index, const char* value);
  void set_grant_types(int index, const char* value, size_t size);
  ::std::string* add_grant_types();
  void add_grant_types(const ::std::string& value);
  #if LANG_CXX11
  void add_grant_types(::std::string&& value);
  #endif
  void add_grant_types(const char* value);
  void add_grant_types(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& grant_types() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_grant_types();

  // string issuer = 1;
  void clear_issuer();
  static const int kIssuerFieldNumber = 1;
  const ::std::string& issuer() const;
  void set_issuer(const ::std::string& value);
  #if LANG_CXX11
  void set_issuer(::std::string&& value);
  #endif
  void set_issuer(const char* value);
  void set_issuer(const char* value, size_t size);
  ::std::string* mutable_issuer();
  ::std::string* release_issuer();
  void set_allocated_issuer(::std::string* issuer);

  // string jwks_uri = 2;
  void clear_jwks_uri();
  static const int kJwksUriFieldNumber = 2;
  const ::std::string& jwks_uri() const;
  void set_jwks_uri(const ::std::string& value);
  #if LANG_CXX11
  void set_jwks_uri(::std::string&& value);
  #endif
  void set_jwks_uri(const char* value);
  void set_jwks_uri(const char* value, size_t size);
  ::std::string* mutable_jwks_uri();
  ::std::string* release_jwks_uri();
  void set_allocated_jwks_uri(::std::string* jwks_uri);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetOpenIDConfigResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> response_types_supported_;
  ::google::protobuf::RepeatedPtrField<::std::string> subject_types_supported_;
  ::google::protobuf::RepeatedPtrField<::std::string> id_token_signing_alg_values_supported_;
  ::google::protobuf::RepeatedPtrField<::std::string> claims_supported_;
  ::google::protobuf::RepeatedPtrField<::std::string> grant_types_;
  ::google::protobuf::internal::ArenaStringPtr issuer_;
  ::google::protobuf::internal::ArenaStringPtr jwks_uri_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetJSONWebKeysRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetJSONWebKeysRequest) */ {
 public:
  GetJSONWebKeysRequest();
  virtual ~GetJSONWebKeysRequest();

  GetJSONWebKeysRequest(const GetJSONWebKeysRequest& from);

  inline GetJSONWebKeysRequest& operator=(const GetJSONWebKeysRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetJSONWebKeysRequest(GetJSONWebKeysRequest&& from) noexcept
    : GetJSONWebKeysRequest() {
    *this = ::std::move(from);
  }

  inline GetJSONWebKeysRequest& operator=(GetJSONWebKeysRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetJSONWebKeysRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJSONWebKeysRequest* internal_default_instance() {
    return reinterpret_cast<const GetJSONWebKeysRequest*>(
               &_GetJSONWebKeysRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  void Swap(GetJSONWebKeysRequest* other);
  friend void swap(GetJSONWebKeysRequest& a, GetJSONWebKeysRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetJSONWebKeysRequest* New() const final {
    return CreateMaybeMessage<GetJSONWebKeysRequest>(nullptr);
  }

  GetJSONWebKeysRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetJSONWebKeysRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetJSONWebKeysRequest& from);
  void MergeFrom(const GetJSONWebKeysRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJSONWebKeysRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // @@protoc_insertion_point(class_scope:google.container.v1.GetJSONWebKeysRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Jwk final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.Jwk) */ {
 public:
  Jwk();
  virtual ~Jwk();

  Jwk(const Jwk& from);

  inline Jwk& operator=(const Jwk& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Jwk(Jwk&& from) noexcept
    : Jwk() {
    *this = ::std::move(from);
  }

  inline Jwk& operator=(Jwk&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Jwk& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Jwk* internal_default_instance() {
    return reinterpret_cast<const Jwk*>(
               &_Jwk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  void Swap(Jwk* other);
  friend void swap(Jwk& a, Jwk& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Jwk* New() const final {
    return CreateMaybeMessage<Jwk>(nullptr);
  }

  Jwk* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Jwk>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Jwk& from);
  void MergeFrom(const Jwk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Jwk* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string kty = 1;
  void clear_kty();
  static const int kKtyFieldNumber = 1;
  const ::std::string& kty() const;
  void set_kty(const ::std::string& value);
  #if LANG_CXX11
  void set_kty(::std::string&& value);
  #endif
  void set_kty(const char* value);
  void set_kty(const char* value, size_t size);
  ::std::string* mutable_kty();
  ::std::string* release_kty();
  void set_allocated_kty(::std::string* kty);

  // string alg = 2;
  void clear_alg();
  static const int kAlgFieldNumber = 2;
  const ::std::string& alg() const;
  void set_alg(const ::std::string& value);
  #if LANG_CXX11
  void set_alg(::std::string&& value);
  #endif
  void set_alg(const char* value);
  void set_alg(const char* value, size_t size);
  ::std::string* mutable_alg();
  ::std::string* release_alg();
  void set_allocated_alg(::std::string* alg);

  // string use = 3;
  void clear_use();
  static const int kUseFieldNumber = 3;
  const ::std::string& use() const;
  void set_use(const ::std::string& value);
  #if LANG_CXX11
  void set_use(::std::string&& value);
  #endif
  void set_use(const char* value);
  void set_use(const char* value, size_t size);
  ::std::string* mutable_use();
  ::std::string* release_use();
  void set_allocated_use(::std::string* use);

  // string kid = 4;
  void clear_kid();
  static const int kKidFieldNumber = 4;
  const ::std::string& kid() const;
  void set_kid(const ::std::string& value);
  #if LANG_CXX11
  void set_kid(::std::string&& value);
  #endif
  void set_kid(const char* value);
  void set_kid(const char* value, size_t size);
  ::std::string* mutable_kid();
  ::std::string* release_kid();
  void set_allocated_kid(::std::string* kid);

  // string n = 5;
  void clear_n();
  static const int kNFieldNumber = 5;
  const ::std::string& n() const;
  void set_n(const ::std::string& value);
  #if LANG_CXX11
  void set_n(::std::string&& value);
  #endif
  void set_n(const char* value);
  void set_n(const char* value, size_t size);
  ::std::string* mutable_n();
  ::std::string* release_n();
  void set_allocated_n(::std::string* n);

  // string e = 6;
  void clear_e();
  static const int kEFieldNumber = 6;
  const ::std::string& e() const;
  void set_e(const ::std::string& value);
  #if LANG_CXX11
  void set_e(::std::string&& value);
  #endif
  void set_e(const char* value);
  void set_e(const char* value, size_t size);
  ::std::string* mutable_e();
  ::std::string* release_e();
  void set_allocated_e(::std::string* e);

  // string x = 7;
  void clear_x();
  static const int kXFieldNumber = 7;
  const ::std::string& x() const;
  void set_x(const ::std::string& value);
  #if LANG_CXX11
  void set_x(::std::string&& value);
  #endif
  void set_x(const char* value);
  void set_x(const char* value, size_t size);
  ::std::string* mutable_x();
  ::std::string* release_x();
  void set_allocated_x(::std::string* x);

  // string y = 8;
  void clear_y();
  static const int kYFieldNumber = 8;
  const ::std::string& y() const;
  void set_y(const ::std::string& value);
  #if LANG_CXX11
  void set_y(::std::string&& value);
  #endif
  void set_y(const char* value);
  void set_y(const char* value, size_t size);
  ::std::string* mutable_y();
  ::std::string* release_y();
  void set_allocated_y(::std::string* y);

  // string crv = 9;
  void clear_crv();
  static const int kCrvFieldNumber = 9;
  const ::std::string& crv() const;
  void set_crv(const ::std::string& value);
  #if LANG_CXX11
  void set_crv(::std::string&& value);
  #endif
  void set_crv(const char* value);
  void set_crv(const char* value, size_t size);
  ::std::string* mutable_crv();
  ::std::string* release_crv();
  void set_allocated_crv(::std::string* crv);

  // @@protoc_insertion_point(class_scope:google.container.v1.Jwk)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr kty_;
  ::google::protobuf::internal::ArenaStringPtr alg_;
  ::google::protobuf::internal::ArenaStringPtr use_;
  ::google::protobuf::internal::ArenaStringPtr kid_;
  ::google::protobuf::internal::ArenaStringPtr n_;
  ::google::protobuf::internal::ArenaStringPtr e_;
  ::google::protobuf::internal::ArenaStringPtr x_;
  ::google::protobuf::internal::ArenaStringPtr y_;
  ::google::protobuf::internal::ArenaStringPtr crv_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class GetJSONWebKeysResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.GetJSONWebKeysResponse) */ {
 public:
  GetJSONWebKeysResponse();
  virtual ~GetJSONWebKeysResponse();

  GetJSONWebKeysResponse(const GetJSONWebKeysResponse& from);

  inline GetJSONWebKeysResponse& operator=(const GetJSONWebKeysResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetJSONWebKeysResponse(GetJSONWebKeysResponse&& from) noexcept
    : GetJSONWebKeysResponse() {
    *this = ::std::move(from);
  }

  inline GetJSONWebKeysResponse& operator=(GetJSONWebKeysResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const GetJSONWebKeysResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJSONWebKeysResponse* internal_default_instance() {
    return reinterpret_cast<const GetJSONWebKeysResponse*>(
               &_GetJSONWebKeysResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  void Swap(GetJSONWebKeysResponse* other);
  friend void swap(GetJSONWebKeysResponse& a, GetJSONWebKeysResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetJSONWebKeysResponse* New() const final {
    return CreateMaybeMessage<GetJSONWebKeysResponse>(nullptr);
  }

  GetJSONWebKeysResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetJSONWebKeysResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetJSONWebKeysResponse& from);
  void MergeFrom(const GetJSONWebKeysResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJSONWebKeysResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.Jwk keys = 1;
  int keys_size() const;
  void clear_keys();
  static const int kKeysFieldNumber = 1;
  ::google::container::v1::Jwk* mutable_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Jwk >*
      mutable_keys();
  const ::google::container::v1::Jwk& keys(int index) const;
  ::google::container::v1::Jwk* add_keys();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Jwk >&
      keys() const;

  // @@protoc_insertion_point(class_scope:google.container.v1.GetJSONWebKeysResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::Jwk > keys_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ReleaseChannel final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ReleaseChannel) */ {
 public:
  ReleaseChannel();
  virtual ~ReleaseChannel();

  ReleaseChannel(const ReleaseChannel& from);

  inline ReleaseChannel& operator=(const ReleaseChannel& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReleaseChannel(ReleaseChannel&& from) noexcept
    : ReleaseChannel() {
    *this = ::std::move(from);
  }

  inline ReleaseChannel& operator=(ReleaseChannel&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ReleaseChannel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReleaseChannel* internal_default_instance() {
    return reinterpret_cast<const ReleaseChannel*>(
               &_ReleaseChannel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  void Swap(ReleaseChannel* other);
  friend void swap(ReleaseChannel& a, ReleaseChannel& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReleaseChannel* New() const final {
    return CreateMaybeMessage<ReleaseChannel>(nullptr);
  }

  ReleaseChannel* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReleaseChannel>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReleaseChannel& from);
  void MergeFrom(const ReleaseChannel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReleaseChannel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReleaseChannel_Channel Channel;
  static const Channel UNSPECIFIED =
    ReleaseChannel_Channel_UNSPECIFIED;
  static const Channel RAPID =
    ReleaseChannel_Channel_RAPID;
  static const Channel REGULAR =
    ReleaseChannel_Channel_REGULAR;
  static const Channel STABLE =
    ReleaseChannel_Channel_STABLE;
  static inline bool Channel_IsValid(int value) {
    return ReleaseChannel_Channel_IsValid(value);
  }
  static const Channel Channel_MIN =
    ReleaseChannel_Channel_Channel_MIN;
  static const Channel Channel_MAX =
    ReleaseChannel_Channel_Channel_MAX;
  static const int Channel_ARRAYSIZE =
    ReleaseChannel_Channel_Channel_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Channel_descriptor() {
    return ReleaseChannel_Channel_descriptor();
  }
  static inline const ::std::string& Channel_Name(Channel value) {
    return ReleaseChannel_Channel_Name(value);
  }
  static inline bool Channel_Parse(const ::std::string& name,
      Channel* value) {
    return ReleaseChannel_Channel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // .google.container.v1.ReleaseChannel.Channel channel = 1;
  void clear_channel();
  static const int kChannelFieldNumber = 1;
  ::google::container::v1::ReleaseChannel_Channel channel() const;
  void set_channel(::google::container::v1::ReleaseChannel_Channel value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ReleaseChannel)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int channel_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class IntraNodeVisibilityConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.IntraNodeVisibilityConfig) */ {
 public:
  IntraNodeVisibilityConfig();
  virtual ~IntraNodeVisibilityConfig();

  IntraNodeVisibilityConfig(const IntraNodeVisibilityConfig& from);

  inline IntraNodeVisibilityConfig& operator=(const IntraNodeVisibilityConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IntraNodeVisibilityConfig(IntraNodeVisibilityConfig&& from) noexcept
    : IntraNodeVisibilityConfig() {
    *this = ::std::move(from);
  }

  inline IntraNodeVisibilityConfig& operator=(IntraNodeVisibilityConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const IntraNodeVisibilityConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IntraNodeVisibilityConfig* internal_default_instance() {
    return reinterpret_cast<const IntraNodeVisibilityConfig*>(
               &_IntraNodeVisibilityConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  void Swap(IntraNodeVisibilityConfig* other);
  friend void swap(IntraNodeVisibilityConfig& a, IntraNodeVisibilityConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IntraNodeVisibilityConfig* New() const final {
    return CreateMaybeMessage<IntraNodeVisibilityConfig>(nullptr);
  }

  IntraNodeVisibilityConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IntraNodeVisibilityConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IntraNodeVisibilityConfig& from);
  void MergeFrom(const IntraNodeVisibilityConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IntraNodeVisibilityConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.IntraNodeVisibilityConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MaxPodsConstraint final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.MaxPodsConstraint) */ {
 public:
  MaxPodsConstraint();
  virtual ~MaxPodsConstraint();

  MaxPodsConstraint(const MaxPodsConstraint& from);

  inline MaxPodsConstraint& operator=(const MaxPodsConstraint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MaxPodsConstraint(MaxPodsConstraint&& from) noexcept
    : MaxPodsConstraint() {
    *this = ::std::move(from);
  }

  inline MaxPodsConstraint& operator=(MaxPodsConstraint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MaxPodsConstraint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MaxPodsConstraint* internal_default_instance() {
    return reinterpret_cast<const MaxPodsConstraint*>(
               &_MaxPodsConstraint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  void Swap(MaxPodsConstraint* other);
  friend void swap(MaxPodsConstraint& a, MaxPodsConstraint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MaxPodsConstraint* New() const final {
    return CreateMaybeMessage<MaxPodsConstraint>(nullptr);
  }

  MaxPodsConstraint* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MaxPodsConstraint>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MaxPodsConstraint& from);
  void MergeFrom(const MaxPodsConstraint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MaxPodsConstraint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int64 max_pods_per_node = 1;
  void clear_max_pods_per_node();
  static const int kMaxPodsPerNodeFieldNumber = 1;
  ::google::protobuf::int64 max_pods_per_node() const;
  void set_max_pods_per_node(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.MaxPodsConstraint)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int64 max_pods_per_node_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class WorkloadIdentityConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.WorkloadIdentityConfig) */ {
 public:
  WorkloadIdentityConfig();
  virtual ~WorkloadIdentityConfig();

  WorkloadIdentityConfig(const WorkloadIdentityConfig& from);

  inline WorkloadIdentityConfig& operator=(const WorkloadIdentityConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  WorkloadIdentityConfig(WorkloadIdentityConfig&& from) noexcept
    : WorkloadIdentityConfig() {
    *this = ::std::move(from);
  }

  inline WorkloadIdentityConfig& operator=(WorkloadIdentityConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const WorkloadIdentityConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WorkloadIdentityConfig* internal_default_instance() {
    return reinterpret_cast<const WorkloadIdentityConfig*>(
               &_WorkloadIdentityConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  void Swap(WorkloadIdentityConfig* other);
  friend void swap(WorkloadIdentityConfig& a, WorkloadIdentityConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline WorkloadIdentityConfig* New() const final {
    return CreateMaybeMessage<WorkloadIdentityConfig>(nullptr);
  }

  WorkloadIdentityConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<WorkloadIdentityConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const WorkloadIdentityConfig& from);
  void MergeFrom(const WorkloadIdentityConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WorkloadIdentityConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string workload_pool = 2;
  void clear_workload_pool();
  static const int kWorkloadPoolFieldNumber = 2;
  const ::std::string& workload_pool() const;
  void set_workload_pool(const ::std::string& value);
  #if LANG_CXX11
  void set_workload_pool(::std::string&& value);
  #endif
  void set_workload_pool(const char* value);
  void set_workload_pool(const char* value, size_t size);
  ::std::string* mutable_workload_pool();
  ::std::string* release_workload_pool();
  void set_allocated_workload_pool(::std::string* workload_pool);

  // @@protoc_insertion_point(class_scope:google.container.v1.WorkloadIdentityConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr workload_pool_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DatabaseEncryption final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DatabaseEncryption) */ {
 public:
  DatabaseEncryption();
  virtual ~DatabaseEncryption();

  DatabaseEncryption(const DatabaseEncryption& from);

  inline DatabaseEncryption& operator=(const DatabaseEncryption& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DatabaseEncryption(DatabaseEncryption&& from) noexcept
    : DatabaseEncryption() {
    *this = ::std::move(from);
  }

  inline DatabaseEncryption& operator=(DatabaseEncryption&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DatabaseEncryption& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DatabaseEncryption* internal_default_instance() {
    return reinterpret_cast<const DatabaseEncryption*>(
               &_DatabaseEncryption_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  void Swap(DatabaseEncryption* other);
  friend void swap(DatabaseEncryption& a, DatabaseEncryption& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DatabaseEncryption* New() const final {
    return CreateMaybeMessage<DatabaseEncryption>(nullptr);
  }

  DatabaseEncryption* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DatabaseEncryption>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DatabaseEncryption& from);
  void MergeFrom(const DatabaseEncryption& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DatabaseEncryption* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef DatabaseEncryption_State State;
  static const State UNKNOWN =
    DatabaseEncryption_State_UNKNOWN;
  static const State ENCRYPTED =
    DatabaseEncryption_State_ENCRYPTED;
  static const State DECRYPTED =
    DatabaseEncryption_State_DECRYPTED;
  static inline bool State_IsValid(int value) {
    return DatabaseEncryption_State_IsValid(value);
  }
  static const State State_MIN =
    DatabaseEncryption_State_State_MIN;
  static const State State_MAX =
    DatabaseEncryption_State_State_MAX;
  static const int State_ARRAYSIZE =
    DatabaseEncryption_State_State_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  State_descriptor() {
    return DatabaseEncryption_State_descriptor();
  }
  static inline const ::std::string& State_Name(State value) {
    return DatabaseEncryption_State_Name(value);
  }
  static inline bool State_Parse(const ::std::string& name,
      State* value) {
    return DatabaseEncryption_State_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string key_name = 1;
  void clear_key_name();
  static const int kKeyNameFieldNumber = 1;
  const ::std::string& key_name() const;
  void set_key_name(const ::std::string& value);
  #if LANG_CXX11
  void set_key_name(::std::string&& value);
  #endif
  void set_key_name(const char* value);
  void set_key_name(const char* value, size_t size);
  ::std::string* mutable_key_name();
  ::std::string* release_key_name();
  void set_allocated_key_name(::std::string* key_name);

  // .google.container.v1.DatabaseEncryption.State state = 2;
  void clear_state();
  static const int kStateFieldNumber = 2;
  ::google::container::v1::DatabaseEncryption_State state() const;
  void set_state(::google::container::v1::DatabaseEncryption_State value);

  // @@protoc_insertion_point(class_scope:google.container.v1.DatabaseEncryption)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr key_name_;
  int state_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUsableSubnetworksRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListUsableSubnetworksRequest) */ {
 public:
  ListUsableSubnetworksRequest();
  virtual ~ListUsableSubnetworksRequest();

  ListUsableSubnetworksRequest(const ListUsableSubnetworksRequest& from);

  inline ListUsableSubnetworksRequest& operator=(const ListUsableSubnetworksRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListUsableSubnetworksRequest(ListUsableSubnetworksRequest&& from) noexcept
    : ListUsableSubnetworksRequest() {
    *this = ::std::move(from);
  }

  inline ListUsableSubnetworksRequest& operator=(ListUsableSubnetworksRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListUsableSubnetworksRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUsableSubnetworksRequest* internal_default_instance() {
    return reinterpret_cast<const ListUsableSubnetworksRequest*>(
               &_ListUsableSubnetworksRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  void Swap(ListUsableSubnetworksRequest* other);
  friend void swap(ListUsableSubnetworksRequest& a, ListUsableSubnetworksRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListUsableSubnetworksRequest* New() const final {
    return CreateMaybeMessage<ListUsableSubnetworksRequest>(nullptr);
  }

  ListUsableSubnetworksRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListUsableSubnetworksRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListUsableSubnetworksRequest& from);
  void MergeFrom(const ListUsableSubnetworksRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUsableSubnetworksRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string parent = 1;
  void clear_parent();
  static const int kParentFieldNumber = 1;
  const ::std::string& parent() const;
  void set_parent(const ::std::string& value);
  #if LANG_CXX11
  void set_parent(::std::string&& value);
  #endif
  void set_parent(const char* value);
  void set_parent(const char* value, size_t size);
  ::std::string* mutable_parent();
  ::std::string* release_parent();
  void set_allocated_parent(::std::string* parent);

  // string filter = 2;
  void clear_filter();
  static const int kFilterFieldNumber = 2;
  const ::std::string& filter() const;
  void set_filter(const ::std::string& value);
  #if LANG_CXX11
  void set_filter(::std::string&& value);
  #endif
  void set_filter(const char* value);
  void set_filter(const char* value, size_t size);
  ::std::string* mutable_filter();
  ::std::string* release_filter();
  void set_allocated_filter(::std::string* filter);

  // string page_token = 4;
  void clear_page_token();
  static const int kPageTokenFieldNumber = 4;
  const ::std::string& page_token() const;
  void set_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_page_token(::std::string&& value);
  #endif
  void set_page_token(const char* value);
  void set_page_token(const char* value, size_t size);
  ::std::string* mutable_page_token();
  ::std::string* release_page_token();
  void set_allocated_page_token(::std::string* page_token);

  // int32 page_size = 3;
  void clear_page_size();
  static const int kPageSizeFieldNumber = 3;
  ::google::protobuf::int32 page_size() const;
  void set_page_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListUsableSubnetworksRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr parent_;
  ::google::protobuf::internal::ArenaStringPtr filter_;
  ::google::protobuf::internal::ArenaStringPtr page_token_;
  ::google::protobuf::int32 page_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ListUsableSubnetworksResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ListUsableSubnetworksResponse) */ {
 public:
  ListUsableSubnetworksResponse();
  virtual ~ListUsableSubnetworksResponse();

  ListUsableSubnetworksResponse(const ListUsableSubnetworksResponse& from);

  inline ListUsableSubnetworksResponse& operator=(const ListUsableSubnetworksResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ListUsableSubnetworksResponse(ListUsableSubnetworksResponse&& from) noexcept
    : ListUsableSubnetworksResponse() {
    *this = ::std::move(from);
  }

  inline ListUsableSubnetworksResponse& operator=(ListUsableSubnetworksResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ListUsableSubnetworksResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ListUsableSubnetworksResponse* internal_default_instance() {
    return reinterpret_cast<const ListUsableSubnetworksResponse*>(
               &_ListUsableSubnetworksResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  void Swap(ListUsableSubnetworksResponse* other);
  friend void swap(ListUsableSubnetworksResponse& a, ListUsableSubnetworksResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ListUsableSubnetworksResponse* New() const final {
    return CreateMaybeMessage<ListUsableSubnetworksResponse>(nullptr);
  }

  ListUsableSubnetworksResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ListUsableSubnetworksResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ListUsableSubnetworksResponse& from);
  void MergeFrom(const ListUsableSubnetworksResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ListUsableSubnetworksResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.UsableSubnetwork subnetworks = 1;
  int subnetworks_size() const;
  void clear_subnetworks();
  static const int kSubnetworksFieldNumber = 1;
  ::google::container::v1::UsableSubnetwork* mutable_subnetworks(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetwork >*
      mutable_subnetworks();
  const ::google::container::v1::UsableSubnetwork& subnetworks(int index) const;
  ::google::container::v1::UsableSubnetwork* add_subnetworks();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetwork >&
      subnetworks() const;

  // string next_page_token = 2;
  void clear_next_page_token();
  static const int kNextPageTokenFieldNumber = 2;
  const ::std::string& next_page_token() const;
  void set_next_page_token(const ::std::string& value);
  #if LANG_CXX11
  void set_next_page_token(::std::string&& value);
  #endif
  void set_next_page_token(const char* value);
  void set_next_page_token(const char* value, size_t size);
  ::std::string* mutable_next_page_token();
  ::std::string* release_next_page_token();
  void set_allocated_next_page_token(::std::string* next_page_token);

  // @@protoc_insertion_point(class_scope:google.container.v1.ListUsableSubnetworksResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetwork > subnetworks_;
  ::google::protobuf::internal::ArenaStringPtr next_page_token_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UsableSubnetworkSecondaryRange final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.UsableSubnetworkSecondaryRange) */ {
 public:
  UsableSubnetworkSecondaryRange();
  virtual ~UsableSubnetworkSecondaryRange();

  UsableSubnetworkSecondaryRange(const UsableSubnetworkSecondaryRange& from);

  inline UsableSubnetworkSecondaryRange& operator=(const UsableSubnetworkSecondaryRange& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UsableSubnetworkSecondaryRange(UsableSubnetworkSecondaryRange&& from) noexcept
    : UsableSubnetworkSecondaryRange() {
    *this = ::std::move(from);
  }

  inline UsableSubnetworkSecondaryRange& operator=(UsableSubnetworkSecondaryRange&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UsableSubnetworkSecondaryRange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsableSubnetworkSecondaryRange* internal_default_instance() {
    return reinterpret_cast<const UsableSubnetworkSecondaryRange*>(
               &_UsableSubnetworkSecondaryRange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  void Swap(UsableSubnetworkSecondaryRange* other);
  friend void swap(UsableSubnetworkSecondaryRange& a, UsableSubnetworkSecondaryRange& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UsableSubnetworkSecondaryRange* New() const final {
    return CreateMaybeMessage<UsableSubnetworkSecondaryRange>(nullptr);
  }

  UsableSubnetworkSecondaryRange* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UsableSubnetworkSecondaryRange>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UsableSubnetworkSecondaryRange& from);
  void MergeFrom(const UsableSubnetworkSecondaryRange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsableSubnetworkSecondaryRange* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef UsableSubnetworkSecondaryRange_Status Status;
  static const Status UNKNOWN =
    UsableSubnetworkSecondaryRange_Status_UNKNOWN;
  static const Status UNUSED =
    UsableSubnetworkSecondaryRange_Status_UNUSED;
  static const Status IN_USE_SERVICE =
    UsableSubnetworkSecondaryRange_Status_IN_USE_SERVICE;
  static const Status IN_USE_SHAREABLE_POD =
    UsableSubnetworkSecondaryRange_Status_IN_USE_SHAREABLE_POD;
  static const Status IN_USE_MANAGED_POD =
    UsableSubnetworkSecondaryRange_Status_IN_USE_MANAGED_POD;
  static inline bool Status_IsValid(int value) {
    return UsableSubnetworkSecondaryRange_Status_IsValid(value);
  }
  static const Status Status_MIN =
    UsableSubnetworkSecondaryRange_Status_Status_MIN;
  static const Status Status_MAX =
    UsableSubnetworkSecondaryRange_Status_Status_MAX;
  static const int Status_ARRAYSIZE =
    UsableSubnetworkSecondaryRange_Status_Status_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Status_descriptor() {
    return UsableSubnetworkSecondaryRange_Status_descriptor();
  }
  static inline const ::std::string& Status_Name(Status value) {
    return UsableSubnetworkSecondaryRange_Status_Name(value);
  }
  static inline bool Status_Parse(const ::std::string& name,
      Status* value) {
    return UsableSubnetworkSecondaryRange_Status_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string range_name = 1;
  void clear_range_name();
  static const int kRangeNameFieldNumber = 1;
  const ::std::string& range_name() const;
  void set_range_name(const ::std::string& value);
  #if LANG_CXX11
  void set_range_name(::std::string&& value);
  #endif
  void set_range_name(const char* value);
  void set_range_name(const char* value, size_t size);
  ::std::string* mutable_range_name();
  ::std::string* release_range_name();
  void set_allocated_range_name(::std::string* range_name);

  // string ip_cidr_range = 2;
  void clear_ip_cidr_range();
  static const int kIpCidrRangeFieldNumber = 2;
  const ::std::string& ip_cidr_range() const;
  void set_ip_cidr_range(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_cidr_range(::std::string&& value);
  #endif
  void set_ip_cidr_range(const char* value);
  void set_ip_cidr_range(const char* value, size_t size);
  ::std::string* mutable_ip_cidr_range();
  ::std::string* release_ip_cidr_range();
  void set_allocated_ip_cidr_range(::std::string* ip_cidr_range);

  // .google.container.v1.UsableSubnetworkSecondaryRange.Status status = 3;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  ::google::container::v1::UsableSubnetworkSecondaryRange_Status status() const;
  void set_status(::google::container::v1::UsableSubnetworkSecondaryRange_Status value);

  // @@protoc_insertion_point(class_scope:google.container.v1.UsableSubnetworkSecondaryRange)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr range_name_;
  ::google::protobuf::internal::ArenaStringPtr ip_cidr_range_;
  int status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class UsableSubnetwork final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.UsableSubnetwork) */ {
 public:
  UsableSubnetwork();
  virtual ~UsableSubnetwork();

  UsableSubnetwork(const UsableSubnetwork& from);

  inline UsableSubnetwork& operator=(const UsableSubnetwork& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UsableSubnetwork(UsableSubnetwork&& from) noexcept
    : UsableSubnetwork() {
    *this = ::std::move(from);
  }

  inline UsableSubnetwork& operator=(UsableSubnetwork&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const UsableSubnetwork& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UsableSubnetwork* internal_default_instance() {
    return reinterpret_cast<const UsableSubnetwork*>(
               &_UsableSubnetwork_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  void Swap(UsableSubnetwork* other);
  friend void swap(UsableSubnetwork& a, UsableSubnetwork& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UsableSubnetwork* New() const final {
    return CreateMaybeMessage<UsableSubnetwork>(nullptr);
  }

  UsableSubnetwork* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UsableSubnetwork>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UsableSubnetwork& from);
  void MergeFrom(const UsableSubnetwork& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UsableSubnetwork* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.container.v1.UsableSubnetworkSecondaryRange secondary_ip_ranges = 4;
  int secondary_ip_ranges_size() const;
  void clear_secondary_ip_ranges();
  static const int kSecondaryIpRangesFieldNumber = 4;
  ::google::container::v1::UsableSubnetworkSecondaryRange* mutable_secondary_ip_ranges(int index);
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetworkSecondaryRange >*
      mutable_secondary_ip_ranges();
  const ::google::container::v1::UsableSubnetworkSecondaryRange& secondary_ip_ranges(int index) const;
  ::google::container::v1::UsableSubnetworkSecondaryRange* add_secondary_ip_ranges();
  const ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetworkSecondaryRange >&
      secondary_ip_ranges() const;

  // string subnetwork = 1;
  void clear_subnetwork();
  static const int kSubnetworkFieldNumber = 1;
  const ::std::string& subnetwork() const;
  void set_subnetwork(const ::std::string& value);
  #if LANG_CXX11
  void set_subnetwork(::std::string&& value);
  #endif
  void set_subnetwork(const char* value);
  void set_subnetwork(const char* value, size_t size);
  ::std::string* mutable_subnetwork();
  ::std::string* release_subnetwork();
  void set_allocated_subnetwork(::std::string* subnetwork);

  // string network = 2;
  void clear_network();
  static const int kNetworkFieldNumber = 2;
  const ::std::string& network() const;
  void set_network(const ::std::string& value);
  #if LANG_CXX11
  void set_network(::std::string&& value);
  #endif
  void set_network(const char* value);
  void set_network(const char* value, size_t size);
  ::std::string* mutable_network();
  ::std::string* release_network();
  void set_allocated_network(::std::string* network);

  // string ip_cidr_range = 3;
  void clear_ip_cidr_range();
  static const int kIpCidrRangeFieldNumber = 3;
  const ::std::string& ip_cidr_range() const;
  void set_ip_cidr_range(const ::std::string& value);
  #if LANG_CXX11
  void set_ip_cidr_range(::std::string&& value);
  #endif
  void set_ip_cidr_range(const char* value);
  void set_ip_cidr_range(const char* value, size_t size);
  ::std::string* mutable_ip_cidr_range();
  ::std::string* release_ip_cidr_range();
  void set_allocated_ip_cidr_range(::std::string* ip_cidr_range);

  // string status_message = 5;
  void clear_status_message();
  static const int kStatusMessageFieldNumber = 5;
  const ::std::string& status_message() const;
  void set_status_message(const ::std::string& value);
  #if LANG_CXX11
  void set_status_message(::std::string&& value);
  #endif
  void set_status_message(const char* value);
  void set_status_message(const char* value, size_t size);
  ::std::string* mutable_status_message();
  ::std::string* release_status_message();
  void set_allocated_status_message(::std::string* status_message);

  // @@protoc_insertion_point(class_scope:google.container.v1.UsableSubnetwork)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetworkSecondaryRange > secondary_ip_ranges_;
  ::google::protobuf::internal::ArenaStringPtr subnetwork_;
  ::google::protobuf::internal::ArenaStringPtr network_;
  ::google::protobuf::internal::ArenaStringPtr ip_cidr_range_;
  ::google::protobuf::internal::ArenaStringPtr status_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResourceUsageExportConfig_BigQueryDestination final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ResourceUsageExportConfig.BigQueryDestination) */ {
 public:
  ResourceUsageExportConfig_BigQueryDestination();
  virtual ~ResourceUsageExportConfig_BigQueryDestination();

  ResourceUsageExportConfig_BigQueryDestination(const ResourceUsageExportConfig_BigQueryDestination& from);

  inline ResourceUsageExportConfig_BigQueryDestination& operator=(const ResourceUsageExportConfig_BigQueryDestination& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceUsageExportConfig_BigQueryDestination(ResourceUsageExportConfig_BigQueryDestination&& from) noexcept
    : ResourceUsageExportConfig_BigQueryDestination() {
    *this = ::std::move(from);
  }

  inline ResourceUsageExportConfig_BigQueryDestination& operator=(ResourceUsageExportConfig_BigQueryDestination&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResourceUsageExportConfig_BigQueryDestination& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceUsageExportConfig_BigQueryDestination* internal_default_instance() {
    return reinterpret_cast<const ResourceUsageExportConfig_BigQueryDestination*>(
               &_ResourceUsageExportConfig_BigQueryDestination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  void Swap(ResourceUsageExportConfig_BigQueryDestination* other);
  friend void swap(ResourceUsageExportConfig_BigQueryDestination& a, ResourceUsageExportConfig_BigQueryDestination& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceUsageExportConfig_BigQueryDestination* New() const final {
    return CreateMaybeMessage<ResourceUsageExportConfig_BigQueryDestination>(nullptr);
  }

  ResourceUsageExportConfig_BigQueryDestination* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceUsageExportConfig_BigQueryDestination>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceUsageExportConfig_BigQueryDestination& from);
  void MergeFrom(const ResourceUsageExportConfig_BigQueryDestination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceUsageExportConfig_BigQueryDestination* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string dataset_id = 1;
  void clear_dataset_id();
  static const int kDatasetIdFieldNumber = 1;
  const ::std::string& dataset_id() const;
  void set_dataset_id(const ::std::string& value);
  #if LANG_CXX11
  void set_dataset_id(::std::string&& value);
  #endif
  void set_dataset_id(const char* value);
  void set_dataset_id(const char* value, size_t size);
  ::std::string* mutable_dataset_id();
  ::std::string* release_dataset_id();
  void set_allocated_dataset_id(::std::string* dataset_id);

  // @@protoc_insertion_point(class_scope:google.container.v1.ResourceUsageExportConfig.BigQueryDestination)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr dataset_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResourceUsageExportConfig_ConsumptionMeteringConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ResourceUsageExportConfig.ConsumptionMeteringConfig) */ {
 public:
  ResourceUsageExportConfig_ConsumptionMeteringConfig();
  virtual ~ResourceUsageExportConfig_ConsumptionMeteringConfig();

  ResourceUsageExportConfig_ConsumptionMeteringConfig(const ResourceUsageExportConfig_ConsumptionMeteringConfig& from);

  inline ResourceUsageExportConfig_ConsumptionMeteringConfig& operator=(const ResourceUsageExportConfig_ConsumptionMeteringConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceUsageExportConfig_ConsumptionMeteringConfig(ResourceUsageExportConfig_ConsumptionMeteringConfig&& from) noexcept
    : ResourceUsageExportConfig_ConsumptionMeteringConfig() {
    *this = ::std::move(from);
  }

  inline ResourceUsageExportConfig_ConsumptionMeteringConfig& operator=(ResourceUsageExportConfig_ConsumptionMeteringConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResourceUsageExportConfig_ConsumptionMeteringConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceUsageExportConfig_ConsumptionMeteringConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceUsageExportConfig_ConsumptionMeteringConfig*>(
               &_ResourceUsageExportConfig_ConsumptionMeteringConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  void Swap(ResourceUsageExportConfig_ConsumptionMeteringConfig* other);
  friend void swap(ResourceUsageExportConfig_ConsumptionMeteringConfig& a, ResourceUsageExportConfig_ConsumptionMeteringConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceUsageExportConfig_ConsumptionMeteringConfig* New() const final {
    return CreateMaybeMessage<ResourceUsageExportConfig_ConsumptionMeteringConfig>(nullptr);
  }

  ResourceUsageExportConfig_ConsumptionMeteringConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceUsageExportConfig_ConsumptionMeteringConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceUsageExportConfig_ConsumptionMeteringConfig& from);
  void MergeFrom(const ResourceUsageExportConfig_ConsumptionMeteringConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceUsageExportConfig_ConsumptionMeteringConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ResourceUsageExportConfig.ConsumptionMeteringConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ResourceUsageExportConfig final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ResourceUsageExportConfig) */ {
 public:
  ResourceUsageExportConfig();
  virtual ~ResourceUsageExportConfig();

  ResourceUsageExportConfig(const ResourceUsageExportConfig& from);

  inline ResourceUsageExportConfig& operator=(const ResourceUsageExportConfig& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ResourceUsageExportConfig(ResourceUsageExportConfig&& from) noexcept
    : ResourceUsageExportConfig() {
    *this = ::std::move(from);
  }

  inline ResourceUsageExportConfig& operator=(ResourceUsageExportConfig&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ResourceUsageExportConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ResourceUsageExportConfig* internal_default_instance() {
    return reinterpret_cast<const ResourceUsageExportConfig*>(
               &_ResourceUsageExportConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  void Swap(ResourceUsageExportConfig* other);
  friend void swap(ResourceUsageExportConfig& a, ResourceUsageExportConfig& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ResourceUsageExportConfig* New() const final {
    return CreateMaybeMessage<ResourceUsageExportConfig>(nullptr);
  }

  ResourceUsageExportConfig* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ResourceUsageExportConfig>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ResourceUsageExportConfig& from);
  void MergeFrom(const ResourceUsageExportConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ResourceUsageExportConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ResourceUsageExportConfig_BigQueryDestination BigQueryDestination;
  typedef ResourceUsageExportConfig_ConsumptionMeteringConfig ConsumptionMeteringConfig;

  // accessors -------------------------------------------------------

  // .google.container.v1.ResourceUsageExportConfig.BigQueryDestination bigquery_destination = 1;
  bool has_bigquery_destination() const;
  void clear_bigquery_destination();
  static const int kBigqueryDestinationFieldNumber = 1;
  const ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination& bigquery_destination() const;
  ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* release_bigquery_destination();
  ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* mutable_bigquery_destination();
  void set_allocated_bigquery_destination(::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* bigquery_destination);

  // .google.container.v1.ResourceUsageExportConfig.ConsumptionMeteringConfig consumption_metering_config = 3;
  bool has_consumption_metering_config() const;
  void clear_consumption_metering_config();
  static const int kConsumptionMeteringConfigFieldNumber = 3;
  const ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig& consumption_metering_config() const;
  ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* release_consumption_metering_config();
  ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* mutable_consumption_metering_config();
  void set_allocated_consumption_metering_config(::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* consumption_metering_config);

  // bool enable_network_egress_metering = 2;
  void clear_enable_network_egress_metering();
  static const int kEnableNetworkEgressMeteringFieldNumber = 2;
  bool enable_network_egress_metering() const;
  void set_enable_network_egress_metering(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ResourceUsageExportConfig)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* bigquery_destination_;
  ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* consumption_metering_config_;
  bool enable_network_egress_metering_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class VerticalPodAutoscaling final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.VerticalPodAutoscaling) */ {
 public:
  VerticalPodAutoscaling();
  virtual ~VerticalPodAutoscaling();

  VerticalPodAutoscaling(const VerticalPodAutoscaling& from);

  inline VerticalPodAutoscaling& operator=(const VerticalPodAutoscaling& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VerticalPodAutoscaling(VerticalPodAutoscaling&& from) noexcept
    : VerticalPodAutoscaling() {
    *this = ::std::move(from);
  }

  inline VerticalPodAutoscaling& operator=(VerticalPodAutoscaling&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const VerticalPodAutoscaling& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VerticalPodAutoscaling* internal_default_instance() {
    return reinterpret_cast<const VerticalPodAutoscaling*>(
               &_VerticalPodAutoscaling_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  void Swap(VerticalPodAutoscaling* other);
  friend void swap(VerticalPodAutoscaling& a, VerticalPodAutoscaling& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VerticalPodAutoscaling* New() const final {
    return CreateMaybeMessage<VerticalPodAutoscaling>(nullptr);
  }

  VerticalPodAutoscaling* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VerticalPodAutoscaling>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VerticalPodAutoscaling& from);
  void MergeFrom(const VerticalPodAutoscaling& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VerticalPodAutoscaling* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.VerticalPodAutoscaling)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class DefaultSnatStatus final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.DefaultSnatStatus) */ {
 public:
  DefaultSnatStatus();
  virtual ~DefaultSnatStatus();

  DefaultSnatStatus(const DefaultSnatStatus& from);

  inline DefaultSnatStatus& operator=(const DefaultSnatStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DefaultSnatStatus(DefaultSnatStatus&& from) noexcept
    : DefaultSnatStatus() {
    *this = ::std::move(from);
  }

  inline DefaultSnatStatus& operator=(DefaultSnatStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const DefaultSnatStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DefaultSnatStatus* internal_default_instance() {
    return reinterpret_cast<const DefaultSnatStatus*>(
               &_DefaultSnatStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  void Swap(DefaultSnatStatus* other);
  friend void swap(DefaultSnatStatus& a, DefaultSnatStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DefaultSnatStatus* New() const final {
    return CreateMaybeMessage<DefaultSnatStatus>(nullptr);
  }

  DefaultSnatStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DefaultSnatStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DefaultSnatStatus& from);
  void MergeFrom(const DefaultSnatStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DefaultSnatStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool disabled = 1;
  void clear_disabled();
  static const int kDisabledFieldNumber = 1;
  bool disabled() const;
  void set_disabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.DefaultSnatStatus)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool disabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// -------------------------------------------------------------------

class ShieldedNodes final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.container.v1.ShieldedNodes) */ {
 public:
  ShieldedNodes();
  virtual ~ShieldedNodes();

  ShieldedNodes(const ShieldedNodes& from);

  inline ShieldedNodes& operator=(const ShieldedNodes& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShieldedNodes(ShieldedNodes&& from) noexcept
    : ShieldedNodes() {
    *this = ::std::move(from);
  }

  inline ShieldedNodes& operator=(ShieldedNodes&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const ShieldedNodes& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShieldedNodes* internal_default_instance() {
    return reinterpret_cast<const ShieldedNodes*>(
               &_ShieldedNodes_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  void Swap(ShieldedNodes* other);
  friend void swap(ShieldedNodes& a, ShieldedNodes& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShieldedNodes* New() const final {
    return CreateMaybeMessage<ShieldedNodes>(nullptr);
  }

  ShieldedNodes* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShieldedNodes>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShieldedNodes& from);
  void MergeFrom(const ShieldedNodes& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShieldedNodes* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bool enabled = 1;
  void clear_enabled();
  static const int kEnabledFieldNumber = 1;
  bool enabled() const;
  void set_enabled(bool value);

  // @@protoc_insertion_point(class_scope:google.container.v1.ShieldedNodes)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool enabled_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// NodeConfig

// string machine_type = 1;
inline void NodeConfig::clear_machine_type() {
  machine_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::machine_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.machine_type)
  return machine_type_.GetNoArena();
}
inline void NodeConfig::set_machine_type(const ::std::string& value) {
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.machine_type)
}
#if LANG_CXX11
inline void NodeConfig::set_machine_type(::std::string&& value) {
  
  machine_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.machine_type)
}
#endif
inline void NodeConfig::set_machine_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.machine_type)
}
inline void NodeConfig::set_machine_type(const char* value, size_t size) {
  
  machine_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.machine_type)
}
inline ::std::string* NodeConfig::mutable_machine_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.machine_type)
  return machine_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_machine_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.machine_type)
  
  return machine_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_machine_type(::std::string* machine_type) {
  if (machine_type != nullptr) {
    
  } else {
    
  }
  machine_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), machine_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.machine_type)
}

// int32 disk_size_gb = 2;
inline void NodeConfig::clear_disk_size_gb() {
  disk_size_gb_ = 0;
}
inline ::google::protobuf::int32 NodeConfig::disk_size_gb() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.disk_size_gb)
  return disk_size_gb_;
}
inline void NodeConfig::set_disk_size_gb(::google::protobuf::int32 value) {
  
  disk_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.disk_size_gb)
}

// repeated string oauth_scopes = 3;
inline int NodeConfig::oauth_scopes_size() const {
  return oauth_scopes_.size();
}
inline void NodeConfig::clear_oauth_scopes() {
  oauth_scopes_.Clear();
}
inline const ::std::string& NodeConfig::oauth_scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Get(index);
}
inline ::std::string* NodeConfig::mutable_oauth_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Mutable(index);
}
inline void NodeConfig::set_oauth_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.oauth_scopes)
  oauth_scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeConfig::set_oauth_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.oauth_scopes)
  oauth_scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeConfig::set_oauth_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  oauth_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.oauth_scopes)
}
inline void NodeConfig::set_oauth_scopes(int index, const char* value, size_t size) {
  oauth_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.oauth_scopes)
}
inline ::std::string* NodeConfig::add_oauth_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_.Add();
}
inline void NodeConfig::add_oauth_scopes(const ::std::string& value) {
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.oauth_scopes)
}
#if LANG_CXX11
inline void NodeConfig::add_oauth_scopes(::std::string&& value) {
  oauth_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.oauth_scopes)
}
#endif
inline void NodeConfig::add_oauth_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodeConfig.oauth_scopes)
}
inline void NodeConfig::add_oauth_scopes(const char* value, size_t size) {
  oauth_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodeConfig.oauth_scopes)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NodeConfig::oauth_scopes() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.oauth_scopes)
  return oauth_scopes_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
NodeConfig::mutable_oauth_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.oauth_scopes)
  return &oauth_scopes_;
}

// string service_account = 9;
inline void NodeConfig::clear_service_account() {
  service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::service_account() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.service_account)
  return service_account_.GetNoArena();
}
inline void NodeConfig::set_service_account(const ::std::string& value) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.service_account)
}
#if LANG_CXX11
inline void NodeConfig::set_service_account(::std::string&& value) {
  
  service_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.service_account)
}
#endif
inline void NodeConfig::set_service_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.service_account)
}
inline void NodeConfig::set_service_account(const char* value, size_t size) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.service_account)
}
inline ::std::string* NodeConfig::mutable_service_account() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.service_account)
  return service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_service_account() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.service_account)
  
  return service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_service_account(::std::string* service_account) {
  if (service_account != nullptr) {
    
  } else {
    
  }
  service_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_account);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.service_account)
}

// map<string, string> metadata = 4;
inline int NodeConfig::metadata_size() const {
  return metadata_.size();
}
inline void NodeConfig::clear_metadata() {
  metadata_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NodeConfig::metadata() const {
  // @@protoc_insertion_point(field_map:google.container.v1.NodeConfig.metadata)
  return metadata_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NodeConfig::mutable_metadata() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.NodeConfig.metadata)
  return metadata_.MutableMap();
}

// string image_type = 5;
inline void NodeConfig::clear_image_type() {
  image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.image_type)
  return image_type_.GetNoArena();
}
inline void NodeConfig::set_image_type(const ::std::string& value) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.image_type)
}
#if LANG_CXX11
inline void NodeConfig::set_image_type(::std::string&& value) {
  
  image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.image_type)
}
#endif
inline void NodeConfig::set_image_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.image_type)
}
inline void NodeConfig::set_image_type(const char* value, size_t size) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.image_type)
}
inline ::std::string* NodeConfig::mutable_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.image_type)
  return image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.image_type)
  
  return image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_image_type(::std::string* image_type) {
  if (image_type != nullptr) {
    
  } else {
    
  }
  image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.image_type)
}

// map<string, string> labels = 6;
inline int NodeConfig::labels_size() const {
  return labels_.size();
}
inline void NodeConfig::clear_labels() {
  labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
NodeConfig::labels() const {
  // @@protoc_insertion_point(field_map:google.container.v1.NodeConfig.labels)
  return labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
NodeConfig::mutable_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.NodeConfig.labels)
  return labels_.MutableMap();
}

// int32 local_ssd_count = 7;
inline void NodeConfig::clear_local_ssd_count() {
  local_ssd_count_ = 0;
}
inline ::google::protobuf::int32 NodeConfig::local_ssd_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.local_ssd_count)
  return local_ssd_count_;
}
inline void NodeConfig::set_local_ssd_count(::google::protobuf::int32 value) {
  
  local_ssd_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.local_ssd_count)
}

// repeated string tags = 8;
inline int NodeConfig::tags_size() const {
  return tags_.size();
}
inline void NodeConfig::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& NodeConfig::tags(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.tags)
  return tags_.Get(index);
}
inline ::std::string* NodeConfig::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.tags)
  return tags_.Mutable(index);
}
inline void NodeConfig::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.tags)
  tags_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodeConfig::set_tags(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodeConfig::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.tags)
}
inline void NodeConfig::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.tags)
}
inline ::std::string* NodeConfig::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodeConfig.tags)
  return tags_.Add();
}
inline void NodeConfig::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.tags)
}
#if LANG_CXX11
inline void NodeConfig::add_tags(::std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.tags)
}
#endif
inline void NodeConfig::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodeConfig.tags)
}
inline void NodeConfig::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodeConfig.tags)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NodeConfig::tags() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
NodeConfig::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.tags)
  return &tags_;
}

// bool preemptible = 10;
inline void NodeConfig::clear_preemptible() {
  preemptible_ = false;
}
inline bool NodeConfig::preemptible() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.preemptible)
  return preemptible_;
}
inline void NodeConfig::set_preemptible(bool value) {
  
  preemptible_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.preemptible)
}

// repeated .google.container.v1.AcceleratorConfig accelerators = 11;
inline int NodeConfig::accelerators_size() const {
  return accelerators_.size();
}
inline void NodeConfig::clear_accelerators() {
  accelerators_.Clear();
}
inline ::google::container::v1::AcceleratorConfig* NodeConfig::mutable_accelerators(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.accelerators)
  return accelerators_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >*
NodeConfig::mutable_accelerators() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.accelerators)
  return &accelerators_;
}
inline const ::google::container::v1::AcceleratorConfig& NodeConfig::accelerators(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.accelerators)
  return accelerators_.Get(index);
}
inline ::google::container::v1::AcceleratorConfig* NodeConfig::add_accelerators() {
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.accelerators)
  return accelerators_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::AcceleratorConfig >&
NodeConfig::accelerators() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.accelerators)
  return accelerators_;
}

// string disk_type = 12;
inline void NodeConfig::clear_disk_type() {
  disk_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::disk_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.disk_type)
  return disk_type_.GetNoArena();
}
inline void NodeConfig::set_disk_type(const ::std::string& value) {
  
  disk_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.disk_type)
}
#if LANG_CXX11
inline void NodeConfig::set_disk_type(::std::string&& value) {
  
  disk_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.disk_type)
}
#endif
inline void NodeConfig::set_disk_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  disk_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.disk_type)
}
inline void NodeConfig::set_disk_type(const char* value, size_t size) {
  
  disk_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.disk_type)
}
inline ::std::string* NodeConfig::mutable_disk_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.disk_type)
  return disk_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_disk_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.disk_type)
  
  return disk_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_disk_type(::std::string* disk_type) {
  if (disk_type != nullptr) {
    
  } else {
    
  }
  disk_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disk_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.disk_type)
}

// string min_cpu_platform = 13;
inline void NodeConfig::clear_min_cpu_platform() {
  min_cpu_platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::min_cpu_platform() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.min_cpu_platform)
  return min_cpu_platform_.GetNoArena();
}
inline void NodeConfig::set_min_cpu_platform(const ::std::string& value) {
  
  min_cpu_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.min_cpu_platform)
}
#if LANG_CXX11
inline void NodeConfig::set_min_cpu_platform(::std::string&& value) {
  
  min_cpu_platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.min_cpu_platform)
}
#endif
inline void NodeConfig::set_min_cpu_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  min_cpu_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.min_cpu_platform)
}
inline void NodeConfig::set_min_cpu_platform(const char* value, size_t size) {
  
  min_cpu_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.min_cpu_platform)
}
inline ::std::string* NodeConfig::mutable_min_cpu_platform() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.min_cpu_platform)
  return min_cpu_platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_min_cpu_platform() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.min_cpu_platform)
  
  return min_cpu_platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_min_cpu_platform(::std::string* min_cpu_platform) {
  if (min_cpu_platform != nullptr) {
    
  } else {
    
  }
  min_cpu_platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), min_cpu_platform);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.min_cpu_platform)
}

// .google.container.v1.WorkloadMetadataConfig workload_metadata_config = 14;
inline bool NodeConfig::has_workload_metadata_config() const {
  return this != internal_default_instance() && workload_metadata_config_ != nullptr;
}
inline void NodeConfig::clear_workload_metadata_config() {
  if (GetArenaNoVirtual() == nullptr && workload_metadata_config_ != nullptr) {
    delete workload_metadata_config_;
  }
  workload_metadata_config_ = nullptr;
}
inline const ::google::container::v1::WorkloadMetadataConfig& NodeConfig::workload_metadata_config() const {
  const ::google::container::v1::WorkloadMetadataConfig* p = workload_metadata_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.workload_metadata_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::WorkloadMetadataConfig*>(
      &::google::container::v1::_WorkloadMetadataConfig_default_instance_);
}
inline ::google::container::v1::WorkloadMetadataConfig* NodeConfig::release_workload_metadata_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.workload_metadata_config)
  
  ::google::container::v1::WorkloadMetadataConfig* temp = workload_metadata_config_;
  workload_metadata_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::WorkloadMetadataConfig* NodeConfig::mutable_workload_metadata_config() {
  
  if (workload_metadata_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::WorkloadMetadataConfig>(GetArenaNoVirtual());
    workload_metadata_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.workload_metadata_config)
  return workload_metadata_config_;
}
inline void NodeConfig::set_allocated_workload_metadata_config(::google::container::v1::WorkloadMetadataConfig* workload_metadata_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete workload_metadata_config_;
  }
  if (workload_metadata_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workload_metadata_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workload_metadata_config, submessage_arena);
    }
    
  } else {
    
  }
  workload_metadata_config_ = workload_metadata_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.workload_metadata_config)
}

// repeated .google.container.v1.NodeTaint taints = 15;
inline int NodeConfig::taints_size() const {
  return taints_.size();
}
inline void NodeConfig::clear_taints() {
  taints_.Clear();
}
inline ::google::container::v1::NodeTaint* NodeConfig::mutable_taints(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.taints)
  return taints_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodeTaint >*
NodeConfig::mutable_taints() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodeConfig.taints)
  return &taints_;
}
inline const ::google::container::v1::NodeTaint& NodeConfig::taints(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.taints)
  return taints_.Get(index);
}
inline ::google::container::v1::NodeTaint* NodeConfig::add_taints() {
  // @@protoc_insertion_point(field_add:google.container.v1.NodeConfig.taints)
  return taints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodeTaint >&
NodeConfig::taints() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodeConfig.taints)
  return taints_;
}

// .google.container.v1.SandboxConfig sandbox_config = 17;
inline bool NodeConfig::has_sandbox_config() const {
  return this != internal_default_instance() && sandbox_config_ != nullptr;
}
inline void NodeConfig::clear_sandbox_config() {
  if (GetArenaNoVirtual() == nullptr && sandbox_config_ != nullptr) {
    delete sandbox_config_;
  }
  sandbox_config_ = nullptr;
}
inline const ::google::container::v1::SandboxConfig& NodeConfig::sandbox_config() const {
  const ::google::container::v1::SandboxConfig* p = sandbox_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.sandbox_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::SandboxConfig*>(
      &::google::container::v1::_SandboxConfig_default_instance_);
}
inline ::google::container::v1::SandboxConfig* NodeConfig::release_sandbox_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.sandbox_config)
  
  ::google::container::v1::SandboxConfig* temp = sandbox_config_;
  sandbox_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::SandboxConfig* NodeConfig::mutable_sandbox_config() {
  
  if (sandbox_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::SandboxConfig>(GetArenaNoVirtual());
    sandbox_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.sandbox_config)
  return sandbox_config_;
}
inline void NodeConfig::set_allocated_sandbox_config(::google::container::v1::SandboxConfig* sandbox_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete sandbox_config_;
  }
  if (sandbox_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      sandbox_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sandbox_config, submessage_arena);
    }
    
  } else {
    
  }
  sandbox_config_ = sandbox_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.sandbox_config)
}

// string node_group = 18;
inline void NodeConfig::clear_node_group() {
  node_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::node_group() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.node_group)
  return node_group_.GetNoArena();
}
inline void NodeConfig::set_node_group(const ::std::string& value) {
  
  node_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.node_group)
}
#if LANG_CXX11
inline void NodeConfig::set_node_group(::std::string&& value) {
  
  node_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.node_group)
}
#endif
inline void NodeConfig::set_node_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.node_group)
}
inline void NodeConfig::set_node_group(const char* value, size_t size) {
  
  node_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.node_group)
}
inline ::std::string* NodeConfig::mutable_node_group() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.node_group)
  return node_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_node_group() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.node_group)
  
  return node_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_node_group(::std::string* node_group) {
  if (node_group != nullptr) {
    
  } else {
    
  }
  node_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_group);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.node_group)
}

// .google.container.v1.ReservationAffinity reservation_affinity = 19;
inline bool NodeConfig::has_reservation_affinity() const {
  return this != internal_default_instance() && reservation_affinity_ != nullptr;
}
inline void NodeConfig::clear_reservation_affinity() {
  if (GetArenaNoVirtual() == nullptr && reservation_affinity_ != nullptr) {
    delete reservation_affinity_;
  }
  reservation_affinity_ = nullptr;
}
inline const ::google::container::v1::ReservationAffinity& NodeConfig::reservation_affinity() const {
  const ::google::container::v1::ReservationAffinity* p = reservation_affinity_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.reservation_affinity)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ReservationAffinity*>(
      &::google::container::v1::_ReservationAffinity_default_instance_);
}
inline ::google::container::v1::ReservationAffinity* NodeConfig::release_reservation_affinity() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.reservation_affinity)
  
  ::google::container::v1::ReservationAffinity* temp = reservation_affinity_;
  reservation_affinity_ = nullptr;
  return temp;
}
inline ::google::container::v1::ReservationAffinity* NodeConfig::mutable_reservation_affinity() {
  
  if (reservation_affinity_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ReservationAffinity>(GetArenaNoVirtual());
    reservation_affinity_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.reservation_affinity)
  return reservation_affinity_;
}
inline void NodeConfig::set_allocated_reservation_affinity(::google::container::v1::ReservationAffinity* reservation_affinity) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reservation_affinity_;
  }
  if (reservation_affinity) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      reservation_affinity = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, reservation_affinity, submessage_arena);
    }
    
  } else {
    
  }
  reservation_affinity_ = reservation_affinity;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.reservation_affinity)
}

// .google.container.v1.ShieldedInstanceConfig shielded_instance_config = 20;
inline bool NodeConfig::has_shielded_instance_config() const {
  return this != internal_default_instance() && shielded_instance_config_ != nullptr;
}
inline void NodeConfig::clear_shielded_instance_config() {
  if (GetArenaNoVirtual() == nullptr && shielded_instance_config_ != nullptr) {
    delete shielded_instance_config_;
  }
  shielded_instance_config_ = nullptr;
}
inline const ::google::container::v1::ShieldedInstanceConfig& NodeConfig::shielded_instance_config() const {
  const ::google::container::v1::ShieldedInstanceConfig* p = shielded_instance_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.shielded_instance_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ShieldedInstanceConfig*>(
      &::google::container::v1::_ShieldedInstanceConfig_default_instance_);
}
inline ::google::container::v1::ShieldedInstanceConfig* NodeConfig::release_shielded_instance_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.shielded_instance_config)
  
  ::google::container::v1::ShieldedInstanceConfig* temp = shielded_instance_config_;
  shielded_instance_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::ShieldedInstanceConfig* NodeConfig::mutable_shielded_instance_config() {
  
  if (shielded_instance_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ShieldedInstanceConfig>(GetArenaNoVirtual());
    shielded_instance_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.shielded_instance_config)
  return shielded_instance_config_;
}
inline void NodeConfig::set_allocated_shielded_instance_config(::google::container::v1::ShieldedInstanceConfig* shielded_instance_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shielded_instance_config_;
  }
  if (shielded_instance_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shielded_instance_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shielded_instance_config, submessage_arena);
    }
    
  } else {
    
  }
  shielded_instance_config_ = shielded_instance_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.shielded_instance_config)
}

// string boot_disk_kms_key = 23;
inline void NodeConfig::clear_boot_disk_kms_key() {
  boot_disk_kms_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeConfig::boot_disk_kms_key() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeConfig.boot_disk_kms_key)
  return boot_disk_kms_key_.GetNoArena();
}
inline void NodeConfig::set_boot_disk_kms_key(const ::std::string& value) {
  
  boot_disk_kms_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeConfig.boot_disk_kms_key)
}
#if LANG_CXX11
inline void NodeConfig::set_boot_disk_kms_key(::std::string&& value) {
  
  boot_disk_kms_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeConfig.boot_disk_kms_key)
}
#endif
inline void NodeConfig::set_boot_disk_kms_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boot_disk_kms_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeConfig.boot_disk_kms_key)
}
inline void NodeConfig::set_boot_disk_kms_key(const char* value, size_t size) {
  
  boot_disk_kms_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeConfig.boot_disk_kms_key)
}
inline ::std::string* NodeConfig::mutable_boot_disk_kms_key() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeConfig.boot_disk_kms_key)
  return boot_disk_kms_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeConfig::release_boot_disk_kms_key() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeConfig.boot_disk_kms_key)
  
  return boot_disk_kms_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeConfig::set_allocated_boot_disk_kms_key(::std::string* boot_disk_kms_key) {
  if (boot_disk_kms_key != nullptr) {
    
  } else {
    
  }
  boot_disk_kms_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boot_disk_kms_key);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeConfig.boot_disk_kms_key)
}

// -------------------------------------------------------------------

// ShieldedInstanceConfig

// bool enable_secure_boot = 1;
inline void ShieldedInstanceConfig::clear_enable_secure_boot() {
  enable_secure_boot_ = false;
}
inline bool ShieldedInstanceConfig::enable_secure_boot() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ShieldedInstanceConfig.enable_secure_boot)
  return enable_secure_boot_;
}
inline void ShieldedInstanceConfig::set_enable_secure_boot(bool value) {
  
  enable_secure_boot_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ShieldedInstanceConfig.enable_secure_boot)
}

// bool enable_integrity_monitoring = 2;
inline void ShieldedInstanceConfig::clear_enable_integrity_monitoring() {
  enable_integrity_monitoring_ = false;
}
inline bool ShieldedInstanceConfig::enable_integrity_monitoring() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ShieldedInstanceConfig.enable_integrity_monitoring)
  return enable_integrity_monitoring_;
}
inline void ShieldedInstanceConfig::set_enable_integrity_monitoring(bool value) {
  
  enable_integrity_monitoring_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ShieldedInstanceConfig.enable_integrity_monitoring)
}

// -------------------------------------------------------------------

// SandboxConfig

// .google.container.v1.SandboxConfig.Type type = 2;
inline void SandboxConfig::clear_type() {
  type_ = 0;
}
inline ::google::container::v1::SandboxConfig_Type SandboxConfig::type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SandboxConfig.type)
  return static_cast< ::google::container::v1::SandboxConfig_Type >(type_);
}
inline void SandboxConfig::set_type(::google::container::v1::SandboxConfig_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SandboxConfig.type)
}

// -------------------------------------------------------------------

// ReservationAffinity

// .google.container.v1.ReservationAffinity.Type consume_reservation_type = 1;
inline void ReservationAffinity::clear_consume_reservation_type() {
  consume_reservation_type_ = 0;
}
inline ::google::container::v1::ReservationAffinity_Type ReservationAffinity::consume_reservation_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ReservationAffinity.consume_reservation_type)
  return static_cast< ::google::container::v1::ReservationAffinity_Type >(consume_reservation_type_);
}
inline void ReservationAffinity::set_consume_reservation_type(::google::container::v1::ReservationAffinity_Type value) {
  
  consume_reservation_type_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ReservationAffinity.consume_reservation_type)
}

// string key = 2;
inline void ReservationAffinity::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ReservationAffinity::key() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ReservationAffinity.key)
  return key_.GetNoArena();
}
inline void ReservationAffinity::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ReservationAffinity.key)
}
#if LANG_CXX11
inline void ReservationAffinity::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ReservationAffinity.key)
}
#endif
inline void ReservationAffinity::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ReservationAffinity.key)
}
inline void ReservationAffinity::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ReservationAffinity.key)
}
inline ::std::string* ReservationAffinity::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ReservationAffinity.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ReservationAffinity::release_key() {
  // @@protoc_insertion_point(field_release:google.container.v1.ReservationAffinity.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ReservationAffinity::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ReservationAffinity.key)
}

// repeated string values = 3;
inline int ReservationAffinity::values_size() const {
  return values_.size();
}
inline void ReservationAffinity::clear_values() {
  values_.Clear();
}
inline const ::std::string& ReservationAffinity::values(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ReservationAffinity.values)
  return values_.Get(index);
}
inline ::std::string* ReservationAffinity::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ReservationAffinity.values)
  return values_.Mutable(index);
}
inline void ReservationAffinity::set_values(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ReservationAffinity.values)
  values_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ReservationAffinity::set_values(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ReservationAffinity.values)
  values_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ReservationAffinity::set_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ReservationAffinity.values)
}
inline void ReservationAffinity::set_values(int index, const char* value, size_t size) {
  values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ReservationAffinity.values)
}
inline ::std::string* ReservationAffinity::add_values() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ReservationAffinity.values)
  return values_.Add();
}
inline void ReservationAffinity::add_values(const ::std::string& value) {
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ReservationAffinity.values)
}
#if LANG_CXX11
inline void ReservationAffinity::add_values(::std::string&& value) {
  values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ReservationAffinity.values)
}
#endif
inline void ReservationAffinity::add_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ReservationAffinity.values)
}
inline void ReservationAffinity::add_values(const char* value, size_t size) {
  values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ReservationAffinity.values)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ReservationAffinity::values() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ReservationAffinity.values)
  return values_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ReservationAffinity::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ReservationAffinity.values)
  return &values_;
}

// -------------------------------------------------------------------

// NodeTaint

// string key = 1;
inline void NodeTaint::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeTaint::key() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeTaint.key)
  return key_.GetNoArena();
}
inline void NodeTaint::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeTaint.key)
}
#if LANG_CXX11
inline void NodeTaint::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeTaint.key)
}
#endif
inline void NodeTaint::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeTaint.key)
}
inline void NodeTaint::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeTaint.key)
}
inline ::std::string* NodeTaint::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeTaint.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeTaint::release_key() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeTaint.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeTaint::set_allocated_key(::std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeTaint.key)
}

// string value = 2;
inline void NodeTaint::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodeTaint::value() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeTaint.value)
  return value_.GetNoArena();
}
inline void NodeTaint::set_value(const ::std::string& value) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodeTaint.value)
}
#if LANG_CXX11
inline void NodeTaint::set_value(::std::string&& value) {
  
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodeTaint.value)
}
#endif
inline void NodeTaint::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodeTaint.value)
}
inline void NodeTaint::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodeTaint.value)
}
inline ::std::string* NodeTaint::mutable_value() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeTaint.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeTaint::release_value() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeTaint.value)
  
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeTaint::set_allocated_value(::std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeTaint.value)
}

// .google.container.v1.NodeTaint.Effect effect = 3;
inline void NodeTaint::clear_effect() {
  effect_ = 0;
}
inline ::google::container::v1::NodeTaint_Effect NodeTaint::effect() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeTaint.effect)
  return static_cast< ::google::container::v1::NodeTaint_Effect >(effect_);
}
inline void NodeTaint::set_effect(::google::container::v1::NodeTaint_Effect value) {
  
  effect_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeTaint.effect)
}

// -------------------------------------------------------------------

// MasterAuth

// string username = 1 [deprecated = true];
inline void MasterAuth::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::username() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.username)
  return username_.GetNoArena();
}
inline void MasterAuth::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.username)
}
#if LANG_CXX11
inline void MasterAuth::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.username)
}
#endif
inline void MasterAuth::set_username(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.username)
}
inline void MasterAuth::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.username)
}
inline ::std::string* MasterAuth::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_username() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_username(::std::string* username) {
  if (username != nullptr) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.username)
}

// string password = 2 [deprecated = true];
inline void MasterAuth::clear_password() {
  password_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::password() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.password)
  return password_.GetNoArena();
}
inline void MasterAuth::set_password(const ::std::string& value) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.password)
}
#if LANG_CXX11
inline void MasterAuth::set_password(::std::string&& value) {
  
  password_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.password)
}
#endif
inline void MasterAuth::set_password(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.password)
}
inline void MasterAuth::set_password(const char* value, size_t size) {
  
  password_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.password)
}
inline ::std::string* MasterAuth::mutable_password() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.password)
  return password_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_password() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.password)
  
  return password_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_password(::std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), password);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.password)
}

// .google.container.v1.ClientCertificateConfig client_certificate_config = 3;
inline bool MasterAuth::has_client_certificate_config() const {
  return this != internal_default_instance() && client_certificate_config_ != nullptr;
}
inline void MasterAuth::clear_client_certificate_config() {
  if (GetArenaNoVirtual() == nullptr && client_certificate_config_ != nullptr) {
    delete client_certificate_config_;
  }
  client_certificate_config_ = nullptr;
}
inline const ::google::container::v1::ClientCertificateConfig& MasterAuth::client_certificate_config() const {
  const ::google::container::v1::ClientCertificateConfig* p = client_certificate_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_certificate_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ClientCertificateConfig*>(
      &::google::container::v1::_ClientCertificateConfig_default_instance_);
}
inline ::google::container::v1::ClientCertificateConfig* MasterAuth::release_client_certificate_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_certificate_config)
  
  ::google::container::v1::ClientCertificateConfig* temp = client_certificate_config_;
  client_certificate_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::ClientCertificateConfig* MasterAuth::mutable_client_certificate_config() {
  
  if (client_certificate_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ClientCertificateConfig>(GetArenaNoVirtual());
    client_certificate_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_certificate_config)
  return client_certificate_config_;
}
inline void MasterAuth::set_allocated_client_certificate_config(::google::container::v1::ClientCertificateConfig* client_certificate_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete client_certificate_config_;
  }
  if (client_certificate_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_certificate_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_certificate_config, submessage_arena);
    }
    
  } else {
    
  }
  client_certificate_config_ = client_certificate_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_certificate_config)
}

// string cluster_ca_certificate = 100;
inline void MasterAuth::clear_cluster_ca_certificate() {
  cluster_ca_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::cluster_ca_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.cluster_ca_certificate)
  return cluster_ca_certificate_.GetNoArena();
}
inline void MasterAuth::set_cluster_ca_certificate(const ::std::string& value) {
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.cluster_ca_certificate)
}
#if LANG_CXX11
inline void MasterAuth::set_cluster_ca_certificate(::std::string&& value) {
  
  cluster_ca_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.cluster_ca_certificate)
}
#endif
inline void MasterAuth::set_cluster_ca_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.cluster_ca_certificate)
}
inline void MasterAuth::set_cluster_ca_certificate(const char* value, size_t size) {
  
  cluster_ca_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.cluster_ca_certificate)
}
inline ::std::string* MasterAuth::mutable_cluster_ca_certificate() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.cluster_ca_certificate)
  return cluster_ca_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_cluster_ca_certificate() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.cluster_ca_certificate)
  
  return cluster_ca_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_cluster_ca_certificate(::std::string* cluster_ca_certificate) {
  if (cluster_ca_certificate != nullptr) {
    
  } else {
    
  }
  cluster_ca_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ca_certificate);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.cluster_ca_certificate)
}

// string client_certificate = 101;
inline void MasterAuth::clear_client_certificate() {
  client_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::client_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_certificate)
  return client_certificate_.GetNoArena();
}
inline void MasterAuth::set_client_certificate(const ::std::string& value) {
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.client_certificate)
}
#if LANG_CXX11
inline void MasterAuth::set_client_certificate(::std::string&& value) {
  
  client_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.client_certificate)
}
#endif
inline void MasterAuth::set_client_certificate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.client_certificate)
}
inline void MasterAuth::set_client_certificate(const char* value, size_t size) {
  
  client_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.client_certificate)
}
inline ::std::string* MasterAuth::mutable_client_certificate() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_certificate)
  return client_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_client_certificate() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_certificate)
  
  return client_certificate_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_client_certificate(::std::string* client_certificate) {
  if (client_certificate != nullptr) {
    
  } else {
    
  }
  client_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_certificate);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_certificate)
}

// string client_key = 102;
inline void MasterAuth::clear_client_key() {
  client_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuth::client_key() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuth.client_key)
  return client_key_.GetNoArena();
}
inline void MasterAuth::set_client_key(const ::std::string& value) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuth.client_key)
}
#if LANG_CXX11
inline void MasterAuth::set_client_key(::std::string&& value) {
  
  client_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuth.client_key)
}
#endif
inline void MasterAuth::set_client_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuth.client_key)
}
inline void MasterAuth::set_client_key(const char* value, size_t size) {
  
  client_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuth.client_key)
}
inline ::std::string* MasterAuth::mutable_client_key() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuth.client_key)
  return client_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuth::release_client_key() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuth.client_key)
  
  return client_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuth::set_allocated_client_key(::std::string* client_key) {
  if (client_key != nullptr) {
    
  } else {
    
  }
  client_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_key);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuth.client_key)
}

// -------------------------------------------------------------------

// ClientCertificateConfig

// bool issue_client_certificate = 1;
inline void ClientCertificateConfig::clear_issue_client_certificate() {
  issue_client_certificate_ = false;
}
inline bool ClientCertificateConfig::issue_client_certificate() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClientCertificateConfig.issue_client_certificate)
  return issue_client_certificate_;
}
inline void ClientCertificateConfig::set_issue_client_certificate(bool value) {
  
  issue_client_certificate_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ClientCertificateConfig.issue_client_certificate)
}

// -------------------------------------------------------------------

// AddonsConfig

// .google.container.v1.HttpLoadBalancing http_load_balancing = 1;
inline bool AddonsConfig::has_http_load_balancing() const {
  return this != internal_default_instance() && http_load_balancing_ != nullptr;
}
inline void AddonsConfig::clear_http_load_balancing() {
  if (GetArenaNoVirtual() == nullptr && http_load_balancing_ != nullptr) {
    delete http_load_balancing_;
  }
  http_load_balancing_ = nullptr;
}
inline const ::google::container::v1::HttpLoadBalancing& AddonsConfig::http_load_balancing() const {
  const ::google::container::v1::HttpLoadBalancing* p = http_load_balancing_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.http_load_balancing)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::HttpLoadBalancing*>(
      &::google::container::v1::_HttpLoadBalancing_default_instance_);
}
inline ::google::container::v1::HttpLoadBalancing* AddonsConfig::release_http_load_balancing() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.http_load_balancing)
  
  ::google::container::v1::HttpLoadBalancing* temp = http_load_balancing_;
  http_load_balancing_ = nullptr;
  return temp;
}
inline ::google::container::v1::HttpLoadBalancing* AddonsConfig::mutable_http_load_balancing() {
  
  if (http_load_balancing_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::HttpLoadBalancing>(GetArenaNoVirtual());
    http_load_balancing_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.http_load_balancing)
  return http_load_balancing_;
}
inline void AddonsConfig::set_allocated_http_load_balancing(::google::container::v1::HttpLoadBalancing* http_load_balancing) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete http_load_balancing_;
  }
  if (http_load_balancing) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      http_load_balancing = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, http_load_balancing, submessage_arena);
    }
    
  } else {
    
  }
  http_load_balancing_ = http_load_balancing;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.http_load_balancing)
}

// .google.container.v1.HorizontalPodAutoscaling horizontal_pod_autoscaling = 2;
inline bool AddonsConfig::has_horizontal_pod_autoscaling() const {
  return this != internal_default_instance() && horizontal_pod_autoscaling_ != nullptr;
}
inline void AddonsConfig::clear_horizontal_pod_autoscaling() {
  if (GetArenaNoVirtual() == nullptr && horizontal_pod_autoscaling_ != nullptr) {
    delete horizontal_pod_autoscaling_;
  }
  horizontal_pod_autoscaling_ = nullptr;
}
inline const ::google::container::v1::HorizontalPodAutoscaling& AddonsConfig::horizontal_pod_autoscaling() const {
  const ::google::container::v1::HorizontalPodAutoscaling* p = horizontal_pod_autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::HorizontalPodAutoscaling*>(
      &::google::container::v1::_HorizontalPodAutoscaling_default_instance_);
}
inline ::google::container::v1::HorizontalPodAutoscaling* AddonsConfig::release_horizontal_pod_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  
  ::google::container::v1::HorizontalPodAutoscaling* temp = horizontal_pod_autoscaling_;
  horizontal_pod_autoscaling_ = nullptr;
  return temp;
}
inline ::google::container::v1::HorizontalPodAutoscaling* AddonsConfig::mutable_horizontal_pod_autoscaling() {
  
  if (horizontal_pod_autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::HorizontalPodAutoscaling>(GetArenaNoVirtual());
    horizontal_pod_autoscaling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
  return horizontal_pod_autoscaling_;
}
inline void AddonsConfig::set_allocated_horizontal_pod_autoscaling(::google::container::v1::HorizontalPodAutoscaling* horizontal_pod_autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete horizontal_pod_autoscaling_;
  }
  if (horizontal_pod_autoscaling) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      horizontal_pod_autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, horizontal_pod_autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  horizontal_pod_autoscaling_ = horizontal_pod_autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.horizontal_pod_autoscaling)
}

// .google.container.v1.KubernetesDashboard kubernetes_dashboard = 3 [deprecated = true];
inline bool AddonsConfig::has_kubernetes_dashboard() const {
  return this != internal_default_instance() && kubernetes_dashboard_ != nullptr;
}
inline void AddonsConfig::clear_kubernetes_dashboard() {
  if (GetArenaNoVirtual() == nullptr && kubernetes_dashboard_ != nullptr) {
    delete kubernetes_dashboard_;
  }
  kubernetes_dashboard_ = nullptr;
}
inline const ::google::container::v1::KubernetesDashboard& AddonsConfig::kubernetes_dashboard() const {
  const ::google::container::v1::KubernetesDashboard* p = kubernetes_dashboard_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.kubernetes_dashboard)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::KubernetesDashboard*>(
      &::google::container::v1::_KubernetesDashboard_default_instance_);
}
inline ::google::container::v1::KubernetesDashboard* AddonsConfig::release_kubernetes_dashboard() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.kubernetes_dashboard)
  
  ::google::container::v1::KubernetesDashboard* temp = kubernetes_dashboard_;
  kubernetes_dashboard_ = nullptr;
  return temp;
}
inline ::google::container::v1::KubernetesDashboard* AddonsConfig::mutable_kubernetes_dashboard() {
  
  if (kubernetes_dashboard_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::KubernetesDashboard>(GetArenaNoVirtual());
    kubernetes_dashboard_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.kubernetes_dashboard)
  return kubernetes_dashboard_;
}
inline void AddonsConfig::set_allocated_kubernetes_dashboard(::google::container::v1::KubernetesDashboard* kubernetes_dashboard) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete kubernetes_dashboard_;
  }
  if (kubernetes_dashboard) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      kubernetes_dashboard = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, kubernetes_dashboard, submessage_arena);
    }
    
  } else {
    
  }
  kubernetes_dashboard_ = kubernetes_dashboard;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.kubernetes_dashboard)
}

// .google.container.v1.NetworkPolicyConfig network_policy_config = 4;
inline bool AddonsConfig::has_network_policy_config() const {
  return this != internal_default_instance() && network_policy_config_ != nullptr;
}
inline void AddonsConfig::clear_network_policy_config() {
  if (GetArenaNoVirtual() == nullptr && network_policy_config_ != nullptr) {
    delete network_policy_config_;
  }
  network_policy_config_ = nullptr;
}
inline const ::google::container::v1::NetworkPolicyConfig& AddonsConfig::network_policy_config() const {
  const ::google::container::v1::NetworkPolicyConfig* p = network_policy_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.network_policy_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NetworkPolicyConfig*>(
      &::google::container::v1::_NetworkPolicyConfig_default_instance_);
}
inline ::google::container::v1::NetworkPolicyConfig* AddonsConfig::release_network_policy_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.network_policy_config)
  
  ::google::container::v1::NetworkPolicyConfig* temp = network_policy_config_;
  network_policy_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::NetworkPolicyConfig* AddonsConfig::mutable_network_policy_config() {
  
  if (network_policy_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NetworkPolicyConfig>(GetArenaNoVirtual());
    network_policy_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.network_policy_config)
  return network_policy_config_;
}
inline void AddonsConfig::set_allocated_network_policy_config(::google::container::v1::NetworkPolicyConfig* network_policy_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_policy_config_;
  }
  if (network_policy_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_policy_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_policy_config, submessage_arena);
    }
    
  } else {
    
  }
  network_policy_config_ = network_policy_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.network_policy_config)
}

// .google.container.v1.CloudRunConfig cloud_run_config = 7;
inline bool AddonsConfig::has_cloud_run_config() const {
  return this != internal_default_instance() && cloud_run_config_ != nullptr;
}
inline void AddonsConfig::clear_cloud_run_config() {
  if (GetArenaNoVirtual() == nullptr && cloud_run_config_ != nullptr) {
    delete cloud_run_config_;
  }
  cloud_run_config_ = nullptr;
}
inline const ::google::container::v1::CloudRunConfig& AddonsConfig::cloud_run_config() const {
  const ::google::container::v1::CloudRunConfig* p = cloud_run_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.cloud_run_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::CloudRunConfig*>(
      &::google::container::v1::_CloudRunConfig_default_instance_);
}
inline ::google::container::v1::CloudRunConfig* AddonsConfig::release_cloud_run_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.cloud_run_config)
  
  ::google::container::v1::CloudRunConfig* temp = cloud_run_config_;
  cloud_run_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::CloudRunConfig* AddonsConfig::mutable_cloud_run_config() {
  
  if (cloud_run_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::CloudRunConfig>(GetArenaNoVirtual());
    cloud_run_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.cloud_run_config)
  return cloud_run_config_;
}
inline void AddonsConfig::set_allocated_cloud_run_config(::google::container::v1::CloudRunConfig* cloud_run_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cloud_run_config_;
  }
  if (cloud_run_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cloud_run_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cloud_run_config, submessage_arena);
    }
    
  } else {
    
  }
  cloud_run_config_ = cloud_run_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.cloud_run_config)
}

// .google.container.v1.DnsCacheConfig dns_cache_config = 8;
inline bool AddonsConfig::has_dns_cache_config() const {
  return this != internal_default_instance() && dns_cache_config_ != nullptr;
}
inline void AddonsConfig::clear_dns_cache_config() {
  if (GetArenaNoVirtual() == nullptr && dns_cache_config_ != nullptr) {
    delete dns_cache_config_;
  }
  dns_cache_config_ = nullptr;
}
inline const ::google::container::v1::DnsCacheConfig& AddonsConfig::dns_cache_config() const {
  const ::google::container::v1::DnsCacheConfig* p = dns_cache_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.dns_cache_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::DnsCacheConfig*>(
      &::google::container::v1::_DnsCacheConfig_default_instance_);
}
inline ::google::container::v1::DnsCacheConfig* AddonsConfig::release_dns_cache_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.dns_cache_config)
  
  ::google::container::v1::DnsCacheConfig* temp = dns_cache_config_;
  dns_cache_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::DnsCacheConfig* AddonsConfig::mutable_dns_cache_config() {
  
  if (dns_cache_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::DnsCacheConfig>(GetArenaNoVirtual());
    dns_cache_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.dns_cache_config)
  return dns_cache_config_;
}
inline void AddonsConfig::set_allocated_dns_cache_config(::google::container::v1::DnsCacheConfig* dns_cache_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete dns_cache_config_;
  }
  if (dns_cache_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      dns_cache_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, dns_cache_config, submessage_arena);
    }
    
  } else {
    
  }
  dns_cache_config_ = dns_cache_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.dns_cache_config)
}

// .google.container.v1.ConfigConnectorConfig config_connector_config = 10;
inline bool AddonsConfig::has_config_connector_config() const {
  return this != internal_default_instance() && config_connector_config_ != nullptr;
}
inline void AddonsConfig::clear_config_connector_config() {
  if (GetArenaNoVirtual() == nullptr && config_connector_config_ != nullptr) {
    delete config_connector_config_;
  }
  config_connector_config_ = nullptr;
}
inline const ::google::container::v1::ConfigConnectorConfig& AddonsConfig::config_connector_config() const {
  const ::google::container::v1::ConfigConnectorConfig* p = config_connector_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.AddonsConfig.config_connector_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ConfigConnectorConfig*>(
      &::google::container::v1::_ConfigConnectorConfig_default_instance_);
}
inline ::google::container::v1::ConfigConnectorConfig* AddonsConfig::release_config_connector_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.AddonsConfig.config_connector_config)
  
  ::google::container::v1::ConfigConnectorConfig* temp = config_connector_config_;
  config_connector_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::ConfigConnectorConfig* AddonsConfig::mutable_config_connector_config() {
  
  if (config_connector_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ConfigConnectorConfig>(GetArenaNoVirtual());
    config_connector_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AddonsConfig.config_connector_config)
  return config_connector_config_;
}
inline void AddonsConfig::set_allocated_config_connector_config(::google::container::v1::ConfigConnectorConfig* config_connector_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_connector_config_;
  }
  if (config_connector_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config_connector_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config_connector_config, submessage_arena);
    }
    
  } else {
    
  }
  config_connector_config_ = config_connector_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AddonsConfig.config_connector_config)
}

// -------------------------------------------------------------------

// HttpLoadBalancing

// bool disabled = 1;
inline void HttpLoadBalancing::clear_disabled() {
  disabled_ = false;
}
inline bool HttpLoadBalancing::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.HttpLoadBalancing.disabled)
  return disabled_;
}
inline void HttpLoadBalancing::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.HttpLoadBalancing.disabled)
}

// -------------------------------------------------------------------

// HorizontalPodAutoscaling

// bool disabled = 1;
inline void HorizontalPodAutoscaling::clear_disabled() {
  disabled_ = false;
}
inline bool HorizontalPodAutoscaling::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.HorizontalPodAutoscaling.disabled)
  return disabled_;
}
inline void HorizontalPodAutoscaling::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.HorizontalPodAutoscaling.disabled)
}

// -------------------------------------------------------------------

// KubernetesDashboard

// bool disabled = 1;
inline void KubernetesDashboard::clear_disabled() {
  disabled_ = false;
}
inline bool KubernetesDashboard::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.KubernetesDashboard.disabled)
  return disabled_;
}
inline void KubernetesDashboard::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.KubernetesDashboard.disabled)
}

// -------------------------------------------------------------------

// NetworkPolicyConfig

// bool disabled = 1;
inline void NetworkPolicyConfig::clear_disabled() {
  disabled_ = false;
}
inline bool NetworkPolicyConfig::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkPolicyConfig.disabled)
  return disabled_;
}
inline void NetworkPolicyConfig::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkPolicyConfig.disabled)
}

// -------------------------------------------------------------------

// DnsCacheConfig

// bool enabled = 1;
inline void DnsCacheConfig::clear_enabled() {
  enabled_ = false;
}
inline bool DnsCacheConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DnsCacheConfig.enabled)
  return enabled_;
}
inline void DnsCacheConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.DnsCacheConfig.enabled)
}

// -------------------------------------------------------------------

// PrivateClusterMasterGlobalAccessConfig

// bool enabled = 1;
inline void PrivateClusterMasterGlobalAccessConfig::clear_enabled() {
  enabled_ = false;
}
inline bool PrivateClusterMasterGlobalAccessConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.PrivateClusterMasterGlobalAccessConfig.enabled)
  return enabled_;
}
inline void PrivateClusterMasterGlobalAccessConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.PrivateClusterMasterGlobalAccessConfig.enabled)
}

// -------------------------------------------------------------------

// PrivateClusterConfig

// bool enable_private_nodes = 1;
inline void PrivateClusterConfig::clear_enable_private_nodes() {
  enable_private_nodes_ = false;
}
inline bool PrivateClusterConfig::enable_private_nodes() const {
  // @@protoc_insertion_point(field_get:google.container.v1.PrivateClusterConfig.enable_private_nodes)
  return enable_private_nodes_;
}
inline void PrivateClusterConfig::set_enable_private_nodes(bool value) {
  
  enable_private_nodes_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.PrivateClusterConfig.enable_private_nodes)
}

// bool enable_private_endpoint = 2;
inline void PrivateClusterConfig::clear_enable_private_endpoint() {
  enable_private_endpoint_ = false;
}
inline bool PrivateClusterConfig::enable_private_endpoint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.PrivateClusterConfig.enable_private_endpoint)
  return enable_private_endpoint_;
}
inline void PrivateClusterConfig::set_enable_private_endpoint(bool value) {
  
  enable_private_endpoint_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.PrivateClusterConfig.enable_private_endpoint)
}

// string master_ipv4_cidr_block = 3;
inline void PrivateClusterConfig::clear_master_ipv4_cidr_block() {
  master_ipv4_cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateClusterConfig::master_ipv4_cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.PrivateClusterConfig.master_ipv4_cidr_block)
  return master_ipv4_cidr_block_.GetNoArena();
}
inline void PrivateClusterConfig::set_master_ipv4_cidr_block(const ::std::string& value) {
  
  master_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.PrivateClusterConfig.master_ipv4_cidr_block)
}
#if LANG_CXX11
inline void PrivateClusterConfig::set_master_ipv4_cidr_block(::std::string&& value) {
  
  master_ipv4_cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.PrivateClusterConfig.master_ipv4_cidr_block)
}
#endif
inline void PrivateClusterConfig::set_master_ipv4_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  master_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.PrivateClusterConfig.master_ipv4_cidr_block)
}
inline void PrivateClusterConfig::set_master_ipv4_cidr_block(const char* value, size_t size) {
  
  master_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.PrivateClusterConfig.master_ipv4_cidr_block)
}
inline ::std::string* PrivateClusterConfig::mutable_master_ipv4_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.PrivateClusterConfig.master_ipv4_cidr_block)
  return master_ipv4_cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateClusterConfig::release_master_ipv4_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.PrivateClusterConfig.master_ipv4_cidr_block)
  
  return master_ipv4_cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateClusterConfig::set_allocated_master_ipv4_cidr_block(::std::string* master_ipv4_cidr_block) {
  if (master_ipv4_cidr_block != nullptr) {
    
  } else {
    
  }
  master_ipv4_cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_ipv4_cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.PrivateClusterConfig.master_ipv4_cidr_block)
}

// string private_endpoint = 4;
inline void PrivateClusterConfig::clear_private_endpoint() {
  private_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateClusterConfig::private_endpoint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.PrivateClusterConfig.private_endpoint)
  return private_endpoint_.GetNoArena();
}
inline void PrivateClusterConfig::set_private_endpoint(const ::std::string& value) {
  
  private_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.PrivateClusterConfig.private_endpoint)
}
#if LANG_CXX11
inline void PrivateClusterConfig::set_private_endpoint(::std::string&& value) {
  
  private_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.PrivateClusterConfig.private_endpoint)
}
#endif
inline void PrivateClusterConfig::set_private_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  private_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.PrivateClusterConfig.private_endpoint)
}
inline void PrivateClusterConfig::set_private_endpoint(const char* value, size_t size) {
  
  private_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.PrivateClusterConfig.private_endpoint)
}
inline ::std::string* PrivateClusterConfig::mutable_private_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.PrivateClusterConfig.private_endpoint)
  return private_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateClusterConfig::release_private_endpoint() {
  // @@protoc_insertion_point(field_release:google.container.v1.PrivateClusterConfig.private_endpoint)
  
  return private_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateClusterConfig::set_allocated_private_endpoint(::std::string* private_endpoint) {
  if (private_endpoint != nullptr) {
    
  } else {
    
  }
  private_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), private_endpoint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.PrivateClusterConfig.private_endpoint)
}

// string public_endpoint = 5;
inline void PrivateClusterConfig::clear_public_endpoint() {
  public_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateClusterConfig::public_endpoint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.PrivateClusterConfig.public_endpoint)
  return public_endpoint_.GetNoArena();
}
inline void PrivateClusterConfig::set_public_endpoint(const ::std::string& value) {
  
  public_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.PrivateClusterConfig.public_endpoint)
}
#if LANG_CXX11
inline void PrivateClusterConfig::set_public_endpoint(::std::string&& value) {
  
  public_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.PrivateClusterConfig.public_endpoint)
}
#endif
inline void PrivateClusterConfig::set_public_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  public_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.PrivateClusterConfig.public_endpoint)
}
inline void PrivateClusterConfig::set_public_endpoint(const char* value, size_t size) {
  
  public_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.PrivateClusterConfig.public_endpoint)
}
inline ::std::string* PrivateClusterConfig::mutable_public_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.PrivateClusterConfig.public_endpoint)
  return public_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateClusterConfig::release_public_endpoint() {
  // @@protoc_insertion_point(field_release:google.container.v1.PrivateClusterConfig.public_endpoint)
  
  return public_endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateClusterConfig::set_allocated_public_endpoint(::std::string* public_endpoint) {
  if (public_endpoint != nullptr) {
    
  } else {
    
  }
  public_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_endpoint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.PrivateClusterConfig.public_endpoint)
}

// string peering_name = 7;
inline void PrivateClusterConfig::clear_peering_name() {
  peering_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PrivateClusterConfig::peering_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.PrivateClusterConfig.peering_name)
  return peering_name_.GetNoArena();
}
inline void PrivateClusterConfig::set_peering_name(const ::std::string& value) {
  
  peering_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.PrivateClusterConfig.peering_name)
}
#if LANG_CXX11
inline void PrivateClusterConfig::set_peering_name(::std::string&& value) {
  
  peering_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.PrivateClusterConfig.peering_name)
}
#endif
inline void PrivateClusterConfig::set_peering_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  peering_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.PrivateClusterConfig.peering_name)
}
inline void PrivateClusterConfig::set_peering_name(const char* value, size_t size) {
  
  peering_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.PrivateClusterConfig.peering_name)
}
inline ::std::string* PrivateClusterConfig::mutable_peering_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.PrivateClusterConfig.peering_name)
  return peering_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PrivateClusterConfig::release_peering_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.PrivateClusterConfig.peering_name)
  
  return peering_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PrivateClusterConfig::set_allocated_peering_name(::std::string* peering_name) {
  if (peering_name != nullptr) {
    
  } else {
    
  }
  peering_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), peering_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.PrivateClusterConfig.peering_name)
}

// .google.container.v1.PrivateClusterMasterGlobalAccessConfig master_global_access_config = 8;
inline bool PrivateClusterConfig::has_master_global_access_config() const {
  return this != internal_default_instance() && master_global_access_config_ != nullptr;
}
inline void PrivateClusterConfig::clear_master_global_access_config() {
  if (GetArenaNoVirtual() == nullptr && master_global_access_config_ != nullptr) {
    delete master_global_access_config_;
  }
  master_global_access_config_ = nullptr;
}
inline const ::google::container::v1::PrivateClusterMasterGlobalAccessConfig& PrivateClusterConfig::master_global_access_config() const {
  const ::google::container::v1::PrivateClusterMasterGlobalAccessConfig* p = master_global_access_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.PrivateClusterConfig.master_global_access_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::PrivateClusterMasterGlobalAccessConfig*>(
      &::google::container::v1::_PrivateClusterMasterGlobalAccessConfig_default_instance_);
}
inline ::google::container::v1::PrivateClusterMasterGlobalAccessConfig* PrivateClusterConfig::release_master_global_access_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.PrivateClusterConfig.master_global_access_config)
  
  ::google::container::v1::PrivateClusterMasterGlobalAccessConfig* temp = master_global_access_config_;
  master_global_access_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::PrivateClusterMasterGlobalAccessConfig* PrivateClusterConfig::mutable_master_global_access_config() {
  
  if (master_global_access_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::PrivateClusterMasterGlobalAccessConfig>(GetArenaNoVirtual());
    master_global_access_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.PrivateClusterConfig.master_global_access_config)
  return master_global_access_config_;
}
inline void PrivateClusterConfig::set_allocated_master_global_access_config(::google::container::v1::PrivateClusterMasterGlobalAccessConfig* master_global_access_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete master_global_access_config_;
  }
  if (master_global_access_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      master_global_access_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, master_global_access_config, submessage_arena);
    }
    
  } else {
    
  }
  master_global_access_config_ = master_global_access_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.PrivateClusterConfig.master_global_access_config)
}

// -------------------------------------------------------------------

// AuthenticatorGroupsConfig

// bool enabled = 1;
inline void AuthenticatorGroupsConfig::clear_enabled() {
  enabled_ = false;
}
inline bool AuthenticatorGroupsConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AuthenticatorGroupsConfig.enabled)
  return enabled_;
}
inline void AuthenticatorGroupsConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.AuthenticatorGroupsConfig.enabled)
}

// string security_group = 2;
inline void AuthenticatorGroupsConfig::clear_security_group() {
  security_group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AuthenticatorGroupsConfig::security_group() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AuthenticatorGroupsConfig.security_group)
  return security_group_.GetNoArena();
}
inline void AuthenticatorGroupsConfig::set_security_group(const ::std::string& value) {
  
  security_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AuthenticatorGroupsConfig.security_group)
}
#if LANG_CXX11
inline void AuthenticatorGroupsConfig::set_security_group(::std::string&& value) {
  
  security_group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AuthenticatorGroupsConfig.security_group)
}
#endif
inline void AuthenticatorGroupsConfig::set_security_group(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  security_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AuthenticatorGroupsConfig.security_group)
}
inline void AuthenticatorGroupsConfig::set_security_group(const char* value, size_t size) {
  
  security_group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AuthenticatorGroupsConfig.security_group)
}
inline ::std::string* AuthenticatorGroupsConfig::mutable_security_group() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AuthenticatorGroupsConfig.security_group)
  return security_group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthenticatorGroupsConfig::release_security_group() {
  // @@protoc_insertion_point(field_release:google.container.v1.AuthenticatorGroupsConfig.security_group)
  
  return security_group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthenticatorGroupsConfig::set_allocated_security_group(::std::string* security_group) {
  if (security_group != nullptr) {
    
  } else {
    
  }
  security_group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), security_group);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AuthenticatorGroupsConfig.security_group)
}

// -------------------------------------------------------------------

// CloudRunConfig

// bool disabled = 1;
inline void CloudRunConfig::clear_disabled() {
  disabled_ = false;
}
inline bool CloudRunConfig::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CloudRunConfig.disabled)
  return disabled_;
}
inline void CloudRunConfig::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.CloudRunConfig.disabled)
}

// .google.container.v1.CloudRunConfig.LoadBalancerType load_balancer_type = 3;
inline void CloudRunConfig::clear_load_balancer_type() {
  load_balancer_type_ = 0;
}
inline ::google::container::v1::CloudRunConfig_LoadBalancerType CloudRunConfig::load_balancer_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CloudRunConfig.load_balancer_type)
  return static_cast< ::google::container::v1::CloudRunConfig_LoadBalancerType >(load_balancer_type_);
}
inline void CloudRunConfig::set_load_balancer_type(::google::container::v1::CloudRunConfig_LoadBalancerType value) {
  
  load_balancer_type_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.CloudRunConfig.load_balancer_type)
}

// -------------------------------------------------------------------

// ConfigConnectorConfig

// bool enabled = 1;
inline void ConfigConnectorConfig::clear_enabled() {
  enabled_ = false;
}
inline bool ConfigConnectorConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ConfigConnectorConfig.enabled)
  return enabled_;
}
inline void ConfigConnectorConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ConfigConnectorConfig.enabled)
}

// -------------------------------------------------------------------

// MasterAuthorizedNetworksConfig_CidrBlock

// string display_name = 1;
inline void MasterAuthorizedNetworksConfig_CidrBlock::clear_display_name() {
  display_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuthorizedNetworksConfig_CidrBlock::display_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
  return display_name_.GetNoArena();
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(const ::std::string& value) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
#if LANG_CXX11
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(::std::string&& value) {
  
  display_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
#endif
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_display_name(const char* value, size_t size) {
  
  display_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}
inline ::std::string* MasterAuthorizedNetworksConfig_CidrBlock::mutable_display_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
  return display_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuthorizedNetworksConfig_CidrBlock::release_display_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
  
  return display_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_allocated_display_name(::std::string* display_name) {
  if (display_name != nullptr) {
    
  } else {
    
  }
  display_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), display_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.display_name)
}

// string cidr_block = 2;
inline void MasterAuthorizedNetworksConfig_CidrBlock::clear_cidr_block() {
  cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MasterAuthorizedNetworksConfig_CidrBlock::cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
  return cidr_block_.GetNoArena();
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(const ::std::string& value) {
  
  cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
#if LANG_CXX11
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(::std::string&& value) {
  
  cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
#endif
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_cidr_block(const char* value, size_t size) {
  
  cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}
inline ::std::string* MasterAuthorizedNetworksConfig_CidrBlock::mutable_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
  return cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MasterAuthorizedNetworksConfig_CidrBlock::release_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
  
  return cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MasterAuthorizedNetworksConfig_CidrBlock::set_allocated_cidr_block(::std::string* cidr_block) {
  if (cidr_block != nullptr) {
    
  } else {
    
  }
  cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock.cidr_block)
}

// -------------------------------------------------------------------

// MasterAuthorizedNetworksConfig

// bool enabled = 1;
inline void MasterAuthorizedNetworksConfig::clear_enabled() {
  enabled_ = false;
}
inline bool MasterAuthorizedNetworksConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.enabled)
  return enabled_;
}
inline void MasterAuthorizedNetworksConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.MasterAuthorizedNetworksConfig.enabled)
}

// repeated .google.container.v1.MasterAuthorizedNetworksConfig.CidrBlock cidr_blocks = 2;
inline int MasterAuthorizedNetworksConfig::cidr_blocks_size() const {
  return cidr_blocks_.size();
}
inline void MasterAuthorizedNetworksConfig::clear_cidr_blocks() {
  cidr_blocks_.Clear();
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* MasterAuthorizedNetworksConfig::mutable_cidr_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >*
MasterAuthorizedNetworksConfig::mutable_cidr_blocks() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return &cidr_blocks_;
}
inline const ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock& MasterAuthorizedNetworksConfig::cidr_blocks(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_.Get(index);
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock* MasterAuthorizedNetworksConfig::add_cidr_blocks() {
  // @@protoc_insertion_point(field_add:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::MasterAuthorizedNetworksConfig_CidrBlock >&
MasterAuthorizedNetworksConfig::cidr_blocks() const {
  // @@protoc_insertion_point(field_list:google.container.v1.MasterAuthorizedNetworksConfig.cidr_blocks)
  return cidr_blocks_;
}

// -------------------------------------------------------------------

// LegacyAbac

// bool enabled = 1;
inline void LegacyAbac::clear_enabled() {
  enabled_ = false;
}
inline bool LegacyAbac::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.LegacyAbac.enabled)
  return enabled_;
}
inline void LegacyAbac::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.LegacyAbac.enabled)
}

// -------------------------------------------------------------------

// NetworkPolicy

// .google.container.v1.NetworkPolicy.Provider provider = 1;
inline void NetworkPolicy::clear_provider() {
  provider_ = 0;
}
inline ::google::container::v1::NetworkPolicy_Provider NetworkPolicy::provider() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkPolicy.provider)
  return static_cast< ::google::container::v1::NetworkPolicy_Provider >(provider_);
}
inline void NetworkPolicy::set_provider(::google::container::v1::NetworkPolicy_Provider value) {
  
  provider_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkPolicy.provider)
}

// bool enabled = 2;
inline void NetworkPolicy::clear_enabled() {
  enabled_ = false;
}
inline bool NetworkPolicy::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkPolicy.enabled)
  return enabled_;
}
inline void NetworkPolicy::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkPolicy.enabled)
}

// -------------------------------------------------------------------

// BinaryAuthorization

// bool enabled = 1;
inline void BinaryAuthorization::clear_enabled() {
  enabled_ = false;
}
inline bool BinaryAuthorization::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.BinaryAuthorization.enabled)
  return enabled_;
}
inline void BinaryAuthorization::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.BinaryAuthorization.enabled)
}

// -------------------------------------------------------------------

// IPAllocationPolicy

// bool use_ip_aliases = 1;
inline void IPAllocationPolicy::clear_use_ip_aliases() {
  use_ip_aliases_ = false;
}
inline bool IPAllocationPolicy::use_ip_aliases() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.use_ip_aliases)
  return use_ip_aliases_;
}
inline void IPAllocationPolicy::set_use_ip_aliases(bool value) {
  
  use_ip_aliases_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.use_ip_aliases)
}

// bool create_subnetwork = 2;
inline void IPAllocationPolicy::clear_create_subnetwork() {
  create_subnetwork_ = false;
}
inline bool IPAllocationPolicy::create_subnetwork() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.create_subnetwork)
  return create_subnetwork_;
}
inline void IPAllocationPolicy::set_create_subnetwork(bool value) {
  
  create_subnetwork_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.create_subnetwork)
}

// string subnetwork_name = 3;
inline void IPAllocationPolicy::clear_subnetwork_name() {
  subnetwork_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::subnetwork_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.subnetwork_name)
  return subnetwork_name_.GetNoArena();
}
inline void IPAllocationPolicy::set_subnetwork_name(const ::std::string& value) {
  
  subnetwork_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_subnetwork_name(::std::string&& value) {
  
  subnetwork_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
#endif
inline void IPAllocationPolicy::set_subnetwork_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnetwork_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
inline void IPAllocationPolicy::set_subnetwork_name(const char* value, size_t size) {
  
  subnetwork_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.subnetwork_name)
}
inline ::std::string* IPAllocationPolicy::mutable_subnetwork_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.subnetwork_name)
  return subnetwork_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_subnetwork_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.subnetwork_name)
  
  return subnetwork_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_subnetwork_name(::std::string* subnetwork_name) {
  if (subnetwork_name != nullptr) {
    
  } else {
    
  }
  subnetwork_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.subnetwork_name)
}

// string cluster_ipv4_cidr = 4 [deprecated = true];
inline void IPAllocationPolicy::clear_cluster_ipv4_cidr() {
  cluster_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::cluster_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.GetNoArena();
}
inline void IPAllocationPolicy::set_cluster_ipv4_cidr(const ::std::string& value) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_cluster_ipv4_cidr(::std::string&& value) {
  
  cluster_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
#endif
inline void IPAllocationPolicy::set_cluster_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
inline void IPAllocationPolicy::set_cluster_ipv4_cidr(const char* value, size_t size) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}
inline ::std::string* IPAllocationPolicy::mutable_cluster_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_cluster_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
  
  return cluster_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr) {
  if (cluster_ipv4_cidr != nullptr) {
    
  } else {
    
  }
  cluster_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr)
}

// string node_ipv4_cidr = 5 [deprecated = true];
inline void IPAllocationPolicy::clear_node_ipv4_cidr() {
  node_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::node_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
  return node_ipv4_cidr_.GetNoArena();
}
inline void IPAllocationPolicy::set_node_ipv4_cidr(const ::std::string& value) {
  
  node_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_node_ipv4_cidr(::std::string&& value) {
  
  node_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
#endif
inline void IPAllocationPolicy::set_node_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
inline void IPAllocationPolicy::set_node_ipv4_cidr(const char* value, size_t size) {
  
  node_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}
inline ::std::string* IPAllocationPolicy::mutable_node_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
  return node_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_node_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
  
  return node_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_node_ipv4_cidr(::std::string* node_ipv4_cidr) {
  if (node_ipv4_cidr != nullptr) {
    
  } else {
    
  }
  node_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.node_ipv4_cidr)
}

// string services_ipv4_cidr = 6 [deprecated = true];
inline void IPAllocationPolicy::clear_services_ipv4_cidr() {
  services_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::services_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
  return services_ipv4_cidr_.GetNoArena();
}
inline void IPAllocationPolicy::set_services_ipv4_cidr(const ::std::string& value) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_services_ipv4_cidr(::std::string&& value) {
  
  services_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
#endif
inline void IPAllocationPolicy::set_services_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
inline void IPAllocationPolicy::set_services_ipv4_cidr(const char* value, size_t size) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}
inline ::std::string* IPAllocationPolicy::mutable_services_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
  return services_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_services_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
  
  return services_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr) {
  if (services_ipv4_cidr != nullptr) {
    
  } else {
    
  }
  services_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.services_ipv4_cidr)
}

// string cluster_secondary_range_name = 7;
inline void IPAllocationPolicy::clear_cluster_secondary_range_name() {
  cluster_secondary_range_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::cluster_secondary_range_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
  return cluster_secondary_range_name_.GetNoArena();
}
inline void IPAllocationPolicy::set_cluster_secondary_range_name(const ::std::string& value) {
  
  cluster_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_cluster_secondary_range_name(::std::string&& value) {
  
  cluster_secondary_range_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}
#endif
inline void IPAllocationPolicy::set_cluster_secondary_range_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}
inline void IPAllocationPolicy::set_cluster_secondary_range_name(const char* value, size_t size) {
  
  cluster_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}
inline ::std::string* IPAllocationPolicy::mutable_cluster_secondary_range_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
  return cluster_secondary_range_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_cluster_secondary_range_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
  
  return cluster_secondary_range_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_cluster_secondary_range_name(::std::string* cluster_secondary_range_name) {
  if (cluster_secondary_range_name != nullptr) {
    
  } else {
    
  }
  cluster_secondary_range_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_secondary_range_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.cluster_secondary_range_name)
}

// string services_secondary_range_name = 8;
inline void IPAllocationPolicy::clear_services_secondary_range_name() {
  services_secondary_range_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::services_secondary_range_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
  return services_secondary_range_name_.GetNoArena();
}
inline void IPAllocationPolicy::set_services_secondary_range_name(const ::std::string& value) {
  
  services_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_services_secondary_range_name(::std::string&& value) {
  
  services_secondary_range_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}
#endif
inline void IPAllocationPolicy::set_services_secondary_range_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  services_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}
inline void IPAllocationPolicy::set_services_secondary_range_name(const char* value, size_t size) {
  
  services_secondary_range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}
inline ::std::string* IPAllocationPolicy::mutable_services_secondary_range_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
  return services_secondary_range_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_services_secondary_range_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
  
  return services_secondary_range_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_services_secondary_range_name(::std::string* services_secondary_range_name) {
  if (services_secondary_range_name != nullptr) {
    
  } else {
    
  }
  services_secondary_range_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_secondary_range_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.services_secondary_range_name)
}

// string cluster_ipv4_cidr_block = 9;
inline void IPAllocationPolicy::clear_cluster_ipv4_cidr_block() {
  cluster_ipv4_cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::cluster_ipv4_cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
  return cluster_ipv4_cidr_block_.GetNoArena();
}
inline void IPAllocationPolicy::set_cluster_ipv4_cidr_block(const ::std::string& value) {
  
  cluster_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_cluster_ipv4_cidr_block(::std::string&& value) {
  
  cluster_ipv4_cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}
#endif
inline void IPAllocationPolicy::set_cluster_ipv4_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}
inline void IPAllocationPolicy::set_cluster_ipv4_cidr_block(const char* value, size_t size) {
  
  cluster_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}
inline ::std::string* IPAllocationPolicy::mutable_cluster_ipv4_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
  return cluster_ipv4_cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_cluster_ipv4_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
  
  return cluster_ipv4_cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_cluster_ipv4_cidr_block(::std::string* cluster_ipv4_cidr_block) {
  if (cluster_ipv4_cidr_block != nullptr) {
    
  } else {
    
  }
  cluster_ipv4_cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ipv4_cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.cluster_ipv4_cidr_block)
}

// string node_ipv4_cidr_block = 10;
inline void IPAllocationPolicy::clear_node_ipv4_cidr_block() {
  node_ipv4_cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::node_ipv4_cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
  return node_ipv4_cidr_block_.GetNoArena();
}
inline void IPAllocationPolicy::set_node_ipv4_cidr_block(const ::std::string& value) {
  
  node_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_node_ipv4_cidr_block(::std::string&& value) {
  
  node_ipv4_cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}
#endif
inline void IPAllocationPolicy::set_node_ipv4_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}
inline void IPAllocationPolicy::set_node_ipv4_cidr_block(const char* value, size_t size) {
  
  node_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}
inline ::std::string* IPAllocationPolicy::mutable_node_ipv4_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
  return node_ipv4_cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_node_ipv4_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
  
  return node_ipv4_cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_node_ipv4_cidr_block(::std::string* node_ipv4_cidr_block) {
  if (node_ipv4_cidr_block != nullptr) {
    
  } else {
    
  }
  node_ipv4_cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_ipv4_cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.node_ipv4_cidr_block)
}

// string services_ipv4_cidr_block = 11;
inline void IPAllocationPolicy::clear_services_ipv4_cidr_block() {
  services_ipv4_cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::services_ipv4_cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
  return services_ipv4_cidr_block_.GetNoArena();
}
inline void IPAllocationPolicy::set_services_ipv4_cidr_block(const ::std::string& value) {
  
  services_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_services_ipv4_cidr_block(::std::string&& value) {
  
  services_ipv4_cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}
#endif
inline void IPAllocationPolicy::set_services_ipv4_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  services_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}
inline void IPAllocationPolicy::set_services_ipv4_cidr_block(const char* value, size_t size) {
  
  services_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}
inline ::std::string* IPAllocationPolicy::mutable_services_ipv4_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
  return services_ipv4_cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_services_ipv4_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
  
  return services_ipv4_cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_services_ipv4_cidr_block(::std::string* services_ipv4_cidr_block) {
  if (services_ipv4_cidr_block != nullptr) {
    
  } else {
    
  }
  services_ipv4_cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_ipv4_cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.services_ipv4_cidr_block)
}

// string tpu_ipv4_cidr_block = 13;
inline void IPAllocationPolicy::clear_tpu_ipv4_cidr_block() {
  tpu_ipv4_cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IPAllocationPolicy::tpu_ipv4_cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.tpu_ipv4_cidr_block)
  return tpu_ipv4_cidr_block_.GetNoArena();
}
inline void IPAllocationPolicy::set_tpu_ipv4_cidr_block(const ::std::string& value) {
  
  tpu_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.tpu_ipv4_cidr_block)
}
#if LANG_CXX11
inline void IPAllocationPolicy::set_tpu_ipv4_cidr_block(::std::string&& value) {
  
  tpu_ipv4_cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.IPAllocationPolicy.tpu_ipv4_cidr_block)
}
#endif
inline void IPAllocationPolicy::set_tpu_ipv4_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tpu_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.IPAllocationPolicy.tpu_ipv4_cidr_block)
}
inline void IPAllocationPolicy::set_tpu_ipv4_cidr_block(const char* value, size_t size) {
  
  tpu_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.IPAllocationPolicy.tpu_ipv4_cidr_block)
}
inline ::std::string* IPAllocationPolicy::mutable_tpu_ipv4_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.IPAllocationPolicy.tpu_ipv4_cidr_block)
  return tpu_ipv4_cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IPAllocationPolicy::release_tpu_ipv4_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.IPAllocationPolicy.tpu_ipv4_cidr_block)
  
  return tpu_ipv4_cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IPAllocationPolicy::set_allocated_tpu_ipv4_cidr_block(::std::string* tpu_ipv4_cidr_block) {
  if (tpu_ipv4_cidr_block != nullptr) {
    
  } else {
    
  }
  tpu_ipv4_cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tpu_ipv4_cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.IPAllocationPolicy.tpu_ipv4_cidr_block)
}

// bool use_routes = 15;
inline void IPAllocationPolicy::clear_use_routes() {
  use_routes_ = false;
}
inline bool IPAllocationPolicy::use_routes() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IPAllocationPolicy.use_routes)
  return use_routes_;
}
inline void IPAllocationPolicy::set_use_routes(bool value) {
  
  use_routes_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.IPAllocationPolicy.use_routes)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Cluster

// string name = 1;
inline void Cluster::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.name)
  return name_.GetNoArena();
}
inline void Cluster::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.name)
}
#if LANG_CXX11
inline void Cluster::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.name)
}
#endif
inline void Cluster::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.name)
}
inline void Cluster::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.name)
}
inline ::std::string* Cluster::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.name)
}

// string description = 2;
inline void Cluster::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::description() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.description)
  return description_.GetNoArena();
}
inline void Cluster::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.description)
}
#if LANG_CXX11
inline void Cluster::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.description)
}
#endif
inline void Cluster::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.description)
}
inline void Cluster::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.description)
}
inline ::std::string* Cluster::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_description() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.description)
}

// int32 initial_node_count = 3 [deprecated = true];
inline void Cluster::clear_initial_node_count() {
  initial_node_count_ = 0;
}
inline ::google::protobuf::int32 Cluster::initial_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.initial_node_count)
  return initial_node_count_;
}
inline void Cluster::set_initial_node_count(::google::protobuf::int32 value) {
  
  initial_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.initial_node_count)
}

// .google.container.v1.NodeConfig node_config = 4 [deprecated = true];
inline bool Cluster::has_node_config() const {
  return this != internal_default_instance() && node_config_ != nullptr;
}
inline void Cluster::clear_node_config() {
  if (GetArenaNoVirtual() == nullptr && node_config_ != nullptr) {
    delete node_config_;
  }
  node_config_ = nullptr;
}
inline const ::google::container::v1::NodeConfig& Cluster::node_config() const {
  const ::google::container::v1::NodeConfig* p = node_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodeConfig*>(
      &::google::container::v1::_NodeConfig_default_instance_);
}
inline ::google::container::v1::NodeConfig* Cluster::release_node_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.node_config)
  
  ::google::container::v1::NodeConfig* temp = node_config_;
  node_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodeConfig* Cluster::mutable_node_config() {
  
  if (node_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodeConfig>(GetArenaNoVirtual());
    node_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.node_config)
  return node_config_;
}
inline void Cluster::set_allocated_node_config(::google::container::v1::NodeConfig* node_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node_config_;
  }
  if (node_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node_config, submessage_arena);
    }
    
  } else {
    
  }
  node_config_ = node_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.node_config)
}

// .google.container.v1.MasterAuth master_auth = 5;
inline bool Cluster::has_master_auth() const {
  return this != internal_default_instance() && master_auth_ != nullptr;
}
inline void Cluster::clear_master_auth() {
  if (GetArenaNoVirtual() == nullptr && master_auth_ != nullptr) {
    delete master_auth_;
  }
  master_auth_ = nullptr;
}
inline const ::google::container::v1::MasterAuth& Cluster::master_auth() const {
  const ::google::container::v1::MasterAuth* p = master_auth_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.master_auth)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::MasterAuth*>(
      &::google::container::v1::_MasterAuth_default_instance_);
}
inline ::google::container::v1::MasterAuth* Cluster::release_master_auth() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.master_auth)
  
  ::google::container::v1::MasterAuth* temp = master_auth_;
  master_auth_ = nullptr;
  return temp;
}
inline ::google::container::v1::MasterAuth* Cluster::mutable_master_auth() {
  
  if (master_auth_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::MasterAuth>(GetArenaNoVirtual());
    master_auth_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.master_auth)
  return master_auth_;
}
inline void Cluster::set_allocated_master_auth(::google::container::v1::MasterAuth* master_auth) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete master_auth_;
  }
  if (master_auth) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      master_auth = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, master_auth, submessage_arena);
    }
    
  } else {
    
  }
  master_auth_ = master_auth;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.master_auth)
}

// string logging_service = 6;
inline void Cluster::clear_logging_service() {
  logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::logging_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.logging_service)
  return logging_service_.GetNoArena();
}
inline void Cluster::set_logging_service(const ::std::string& value) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.logging_service)
}
#if LANG_CXX11
inline void Cluster::set_logging_service(::std::string&& value) {
  
  logging_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.logging_service)
}
#endif
inline void Cluster::set_logging_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.logging_service)
}
inline void Cluster::set_logging_service(const char* value, size_t size) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.logging_service)
}
inline ::std::string* Cluster::mutable_logging_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.logging_service)
  return logging_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_logging_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.logging_service)
  
  return logging_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_logging_service(::std::string* logging_service) {
  if (logging_service != nullptr) {
    
  } else {
    
  }
  logging_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logging_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.logging_service)
}

// string monitoring_service = 7;
inline void Cluster::clear_monitoring_service() {
  monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.monitoring_service)
  return monitoring_service_.GetNoArena();
}
inline void Cluster::set_monitoring_service(const ::std::string& value) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.monitoring_service)
}
#if LANG_CXX11
inline void Cluster::set_monitoring_service(::std::string&& value) {
  
  monitoring_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.monitoring_service)
}
#endif
inline void Cluster::set_monitoring_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.monitoring_service)
}
inline void Cluster::set_monitoring_service(const char* value, size_t size) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.monitoring_service)
}
inline ::std::string* Cluster::mutable_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.monitoring_service)
  return monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.monitoring_service)
  
  return monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_monitoring_service(::std::string* monitoring_service) {
  if (monitoring_service != nullptr) {
    
  } else {
    
  }
  monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.monitoring_service)
}

// string network = 8;
inline void Cluster::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::network() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.network)
  return network_.GetNoArena();
}
inline void Cluster::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.network)
}
#if LANG_CXX11
inline void Cluster::set_network(::std::string&& value) {
  
  network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.network)
}
#endif
inline void Cluster::set_network(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.network)
}
inline void Cluster::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.network)
}
inline ::std::string* Cluster::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_network() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_network(::std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.network)
}

// string cluster_ipv4_cidr = 9;
inline void Cluster::clear_cluster_ipv4_cidr() {
  cluster_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::cluster_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.GetNoArena();
}
inline void Cluster::set_cluster_ipv4_cidr(const ::std::string& value) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.cluster_ipv4_cidr)
}
#if LANG_CXX11
inline void Cluster::set_cluster_ipv4_cidr(::std::string&& value) {
  
  cluster_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.cluster_ipv4_cidr)
}
#endif
inline void Cluster::set_cluster_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.cluster_ipv4_cidr)
}
inline void Cluster::set_cluster_ipv4_cidr(const char* value, size_t size) {
  
  cluster_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.cluster_ipv4_cidr)
}
inline ::std::string* Cluster::mutable_cluster_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.cluster_ipv4_cidr)
  return cluster_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_cluster_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.cluster_ipv4_cidr)
  
  return cluster_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_cluster_ipv4_cidr(::std::string* cluster_ipv4_cidr) {
  if (cluster_ipv4_cidr != nullptr) {
    
  } else {
    
  }
  cluster_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.cluster_ipv4_cidr)
}

// .google.container.v1.AddonsConfig addons_config = 10;
inline bool Cluster::has_addons_config() const {
  return this != internal_default_instance() && addons_config_ != nullptr;
}
inline void Cluster::clear_addons_config() {
  if (GetArenaNoVirtual() == nullptr && addons_config_ != nullptr) {
    delete addons_config_;
  }
  addons_config_ = nullptr;
}
inline const ::google::container::v1::AddonsConfig& Cluster::addons_config() const {
  const ::google::container::v1::AddonsConfig* p = addons_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.addons_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::AddonsConfig*>(
      &::google::container::v1::_AddonsConfig_default_instance_);
}
inline ::google::container::v1::AddonsConfig* Cluster::release_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.addons_config)
  
  ::google::container::v1::AddonsConfig* temp = addons_config_;
  addons_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::AddonsConfig* Cluster::mutable_addons_config() {
  
  if (addons_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::AddonsConfig>(GetArenaNoVirtual());
    addons_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.addons_config)
  return addons_config_;
}
inline void Cluster::set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete addons_config_;
  }
  if (addons_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      addons_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addons_config, submessage_arena);
    }
    
  } else {
    
  }
  addons_config_ = addons_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.addons_config)
}

// string subnetwork = 11;
inline void Cluster::clear_subnetwork() {
  subnetwork_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::subnetwork() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.subnetwork)
  return subnetwork_.GetNoArena();
}
inline void Cluster::set_subnetwork(const ::std::string& value) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.subnetwork)
}
#if LANG_CXX11
inline void Cluster::set_subnetwork(::std::string&& value) {
  
  subnetwork_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.subnetwork)
}
#endif
inline void Cluster::set_subnetwork(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.subnetwork)
}
inline void Cluster::set_subnetwork(const char* value, size_t size) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.subnetwork)
}
inline ::std::string* Cluster::mutable_subnetwork() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.subnetwork)
  return subnetwork_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_subnetwork() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.subnetwork)
  
  return subnetwork_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_subnetwork(::std::string* subnetwork) {
  if (subnetwork != nullptr) {
    
  } else {
    
  }
  subnetwork_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.subnetwork)
}

// repeated .google.container.v1.NodePool node_pools = 12;
inline int Cluster::node_pools_size() const {
  return node_pools_.size();
}
inline void Cluster::clear_node_pools() {
  node_pools_.Clear();
}
inline ::google::container::v1::NodePool* Cluster::mutable_node_pools(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.node_pools)
  return node_pools_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
Cluster::mutable_node_pools() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.node_pools)
  return &node_pools_;
}
inline const ::google::container::v1::NodePool& Cluster::node_pools(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_pools)
  return node_pools_.Get(index);
}
inline ::google::container::v1::NodePool* Cluster::add_node_pools() {
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.node_pools)
  return node_pools_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
Cluster::node_pools() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.node_pools)
  return node_pools_;
}

// repeated string locations = 13;
inline int Cluster::locations_size() const {
  return locations_.size();
}
inline void Cluster::clear_locations() {
  locations_.Clear();
}
inline const ::std::string& Cluster::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.locations)
  return locations_.Get(index);
}
inline ::std::string* Cluster::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.locations)
  return locations_.Mutable(index);
}
inline void Cluster::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Cluster::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Cluster::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.locations)
}
inline void Cluster::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.locations)
}
inline ::std::string* Cluster::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.Cluster.locations)
  return locations_.Add();
}
inline void Cluster::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.locations)
}
#if LANG_CXX11
inline void Cluster::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.locations)
}
#endif
inline void Cluster::add_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.Cluster.locations)
}
inline void Cluster::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.Cluster.locations)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Cluster::locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Cluster::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.locations)
  return &locations_;
}

// bool enable_kubernetes_alpha = 14;
inline void Cluster::clear_enable_kubernetes_alpha() {
  enable_kubernetes_alpha_ = false;
}
inline bool Cluster::enable_kubernetes_alpha() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.enable_kubernetes_alpha)
  return enable_kubernetes_alpha_;
}
inline void Cluster::set_enable_kubernetes_alpha(bool value) {
  
  enable_kubernetes_alpha_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.enable_kubernetes_alpha)
}

// map<string, string> resource_labels = 15;
inline int Cluster::resource_labels_size() const {
  return resource_labels_.size();
}
inline void Cluster::clear_resource_labels() {
  resource_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
Cluster::resource_labels() const {
  // @@protoc_insertion_point(field_map:google.container.v1.Cluster.resource_labels)
  return resource_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
Cluster::mutable_resource_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.Cluster.resource_labels)
  return resource_labels_.MutableMap();
}

// string label_fingerprint = 16;
inline void Cluster::clear_label_fingerprint() {
  label_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::label_fingerprint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.label_fingerprint)
  return label_fingerprint_.GetNoArena();
}
inline void Cluster::set_label_fingerprint(const ::std::string& value) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.label_fingerprint)
}
#if LANG_CXX11
inline void Cluster::set_label_fingerprint(::std::string&& value) {
  
  label_fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.label_fingerprint)
}
#endif
inline void Cluster::set_label_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.label_fingerprint)
}
inline void Cluster::set_label_fingerprint(const char* value, size_t size) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.label_fingerprint)
}
inline ::std::string* Cluster::mutable_label_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.label_fingerprint)
  return label_fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_label_fingerprint() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.label_fingerprint)
  
  return label_fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_label_fingerprint(::std::string* label_fingerprint) {
  if (label_fingerprint != nullptr) {
    
  } else {
    
  }
  label_fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.label_fingerprint)
}

// .google.container.v1.LegacyAbac legacy_abac = 18;
inline bool Cluster::has_legacy_abac() const {
  return this != internal_default_instance() && legacy_abac_ != nullptr;
}
inline void Cluster::clear_legacy_abac() {
  if (GetArenaNoVirtual() == nullptr && legacy_abac_ != nullptr) {
    delete legacy_abac_;
  }
  legacy_abac_ = nullptr;
}
inline const ::google::container::v1::LegacyAbac& Cluster::legacy_abac() const {
  const ::google::container::v1::LegacyAbac* p = legacy_abac_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.legacy_abac)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::LegacyAbac*>(
      &::google::container::v1::_LegacyAbac_default_instance_);
}
inline ::google::container::v1::LegacyAbac* Cluster::release_legacy_abac() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.legacy_abac)
  
  ::google::container::v1::LegacyAbac* temp = legacy_abac_;
  legacy_abac_ = nullptr;
  return temp;
}
inline ::google::container::v1::LegacyAbac* Cluster::mutable_legacy_abac() {
  
  if (legacy_abac_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::LegacyAbac>(GetArenaNoVirtual());
    legacy_abac_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.legacy_abac)
  return legacy_abac_;
}
inline void Cluster::set_allocated_legacy_abac(::google::container::v1::LegacyAbac* legacy_abac) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete legacy_abac_;
  }
  if (legacy_abac) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      legacy_abac = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, legacy_abac, submessage_arena);
    }
    
  } else {
    
  }
  legacy_abac_ = legacy_abac;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.legacy_abac)
}

// .google.container.v1.NetworkPolicy network_policy = 19;
inline bool Cluster::has_network_policy() const {
  return this != internal_default_instance() && network_policy_ != nullptr;
}
inline void Cluster::clear_network_policy() {
  if (GetArenaNoVirtual() == nullptr && network_policy_ != nullptr) {
    delete network_policy_;
  }
  network_policy_ = nullptr;
}
inline const ::google::container::v1::NetworkPolicy& Cluster::network_policy() const {
  const ::google::container::v1::NetworkPolicy* p = network_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.network_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NetworkPolicy*>(
      &::google::container::v1::_NetworkPolicy_default_instance_);
}
inline ::google::container::v1::NetworkPolicy* Cluster::release_network_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.network_policy)
  
  ::google::container::v1::NetworkPolicy* temp = network_policy_;
  network_policy_ = nullptr;
  return temp;
}
inline ::google::container::v1::NetworkPolicy* Cluster::mutable_network_policy() {
  
  if (network_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NetworkPolicy>(GetArenaNoVirtual());
    network_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.network_policy)
  return network_policy_;
}
inline void Cluster::set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_policy_;
  }
  if (network_policy) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_policy, submessage_arena);
    }
    
  } else {
    
  }
  network_policy_ = network_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.network_policy)
}

// .google.container.v1.IPAllocationPolicy ip_allocation_policy = 20;
inline bool Cluster::has_ip_allocation_policy() const {
  return this != internal_default_instance() && ip_allocation_policy_ != nullptr;
}
inline void Cluster::clear_ip_allocation_policy() {
  if (GetArenaNoVirtual() == nullptr && ip_allocation_policy_ != nullptr) {
    delete ip_allocation_policy_;
  }
  ip_allocation_policy_ = nullptr;
}
inline const ::google::container::v1::IPAllocationPolicy& Cluster::ip_allocation_policy() const {
  const ::google::container::v1::IPAllocationPolicy* p = ip_allocation_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.ip_allocation_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::IPAllocationPolicy*>(
      &::google::container::v1::_IPAllocationPolicy_default_instance_);
}
inline ::google::container::v1::IPAllocationPolicy* Cluster::release_ip_allocation_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.ip_allocation_policy)
  
  ::google::container::v1::IPAllocationPolicy* temp = ip_allocation_policy_;
  ip_allocation_policy_ = nullptr;
  return temp;
}
inline ::google::container::v1::IPAllocationPolicy* Cluster::mutable_ip_allocation_policy() {
  
  if (ip_allocation_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::IPAllocationPolicy>(GetArenaNoVirtual());
    ip_allocation_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.ip_allocation_policy)
  return ip_allocation_policy_;
}
inline void Cluster::set_allocated_ip_allocation_policy(::google::container::v1::IPAllocationPolicy* ip_allocation_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete ip_allocation_policy_;
  }
  if (ip_allocation_policy) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      ip_allocation_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ip_allocation_policy, submessage_arena);
    }
    
  } else {
    
  }
  ip_allocation_policy_ = ip_allocation_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.ip_allocation_policy)
}

// .google.container.v1.MasterAuthorizedNetworksConfig master_authorized_networks_config = 22;
inline bool Cluster::has_master_authorized_networks_config() const {
  return this != internal_default_instance() && master_authorized_networks_config_ != nullptr;
}
inline void Cluster::clear_master_authorized_networks_config() {
  if (GetArenaNoVirtual() == nullptr && master_authorized_networks_config_ != nullptr) {
    delete master_authorized_networks_config_;
  }
  master_authorized_networks_config_ = nullptr;
}
inline const ::google::container::v1::MasterAuthorizedNetworksConfig& Cluster::master_authorized_networks_config() const {
  const ::google::container::v1::MasterAuthorizedNetworksConfig* p = master_authorized_networks_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.master_authorized_networks_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::MasterAuthorizedNetworksConfig*>(
      &::google::container::v1::_MasterAuthorizedNetworksConfig_default_instance_);
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig* Cluster::release_master_authorized_networks_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.master_authorized_networks_config)
  
  ::google::container::v1::MasterAuthorizedNetworksConfig* temp = master_authorized_networks_config_;
  master_authorized_networks_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig* Cluster::mutable_master_authorized_networks_config() {
  
  if (master_authorized_networks_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::MasterAuthorizedNetworksConfig>(GetArenaNoVirtual());
    master_authorized_networks_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.master_authorized_networks_config)
  return master_authorized_networks_config_;
}
inline void Cluster::set_allocated_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* master_authorized_networks_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete master_authorized_networks_config_;
  }
  if (master_authorized_networks_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      master_authorized_networks_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, master_authorized_networks_config, submessage_arena);
    }
    
  } else {
    
  }
  master_authorized_networks_config_ = master_authorized_networks_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.master_authorized_networks_config)
}

// .google.container.v1.MaintenancePolicy maintenance_policy = 23;
inline bool Cluster::has_maintenance_policy() const {
  return this != internal_default_instance() && maintenance_policy_ != nullptr;
}
inline void Cluster::clear_maintenance_policy() {
  if (GetArenaNoVirtual() == nullptr && maintenance_policy_ != nullptr) {
    delete maintenance_policy_;
  }
  maintenance_policy_ = nullptr;
}
inline const ::google::container::v1::MaintenancePolicy& Cluster::maintenance_policy() const {
  const ::google::container::v1::MaintenancePolicy* p = maintenance_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.maintenance_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::MaintenancePolicy*>(
      &::google::container::v1::_MaintenancePolicy_default_instance_);
}
inline ::google::container::v1::MaintenancePolicy* Cluster::release_maintenance_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.maintenance_policy)
  
  ::google::container::v1::MaintenancePolicy* temp = maintenance_policy_;
  maintenance_policy_ = nullptr;
  return temp;
}
inline ::google::container::v1::MaintenancePolicy* Cluster::mutable_maintenance_policy() {
  
  if (maintenance_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::MaintenancePolicy>(GetArenaNoVirtual());
    maintenance_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.maintenance_policy)
  return maintenance_policy_;
}
inline void Cluster::set_allocated_maintenance_policy(::google::container::v1::MaintenancePolicy* maintenance_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete maintenance_policy_;
  }
  if (maintenance_policy) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maintenance_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maintenance_policy, submessage_arena);
    }
    
  } else {
    
  }
  maintenance_policy_ = maintenance_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.maintenance_policy)
}

// .google.container.v1.BinaryAuthorization binary_authorization = 24;
inline bool Cluster::has_binary_authorization() const {
  return this != internal_default_instance() && binary_authorization_ != nullptr;
}
inline void Cluster::clear_binary_authorization() {
  if (GetArenaNoVirtual() == nullptr && binary_authorization_ != nullptr) {
    delete binary_authorization_;
  }
  binary_authorization_ = nullptr;
}
inline const ::google::container::v1::BinaryAuthorization& Cluster::binary_authorization() const {
  const ::google::container::v1::BinaryAuthorization* p = binary_authorization_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.binary_authorization)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::BinaryAuthorization*>(
      &::google::container::v1::_BinaryAuthorization_default_instance_);
}
inline ::google::container::v1::BinaryAuthorization* Cluster::release_binary_authorization() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.binary_authorization)
  
  ::google::container::v1::BinaryAuthorization* temp = binary_authorization_;
  binary_authorization_ = nullptr;
  return temp;
}
inline ::google::container::v1::BinaryAuthorization* Cluster::mutable_binary_authorization() {
  
  if (binary_authorization_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::BinaryAuthorization>(GetArenaNoVirtual());
    binary_authorization_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.binary_authorization)
  return binary_authorization_;
}
inline void Cluster::set_allocated_binary_authorization(::google::container::v1::BinaryAuthorization* binary_authorization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete binary_authorization_;
  }
  if (binary_authorization) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      binary_authorization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, binary_authorization, submessage_arena);
    }
    
  } else {
    
  }
  binary_authorization_ = binary_authorization;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.binary_authorization)
}

// .google.container.v1.ClusterAutoscaling autoscaling = 26;
inline bool Cluster::has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != nullptr;
}
inline void Cluster::clear_autoscaling() {
  if (GetArenaNoVirtual() == nullptr && autoscaling_ != nullptr) {
    delete autoscaling_;
  }
  autoscaling_ = nullptr;
}
inline const ::google::container::v1::ClusterAutoscaling& Cluster::autoscaling() const {
  const ::google::container::v1::ClusterAutoscaling* p = autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.autoscaling)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ClusterAutoscaling*>(
      &::google::container::v1::_ClusterAutoscaling_default_instance_);
}
inline ::google::container::v1::ClusterAutoscaling* Cluster::release_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.autoscaling)
  
  ::google::container::v1::ClusterAutoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
  return temp;
}
inline ::google::container::v1::ClusterAutoscaling* Cluster::mutable_autoscaling() {
  
  if (autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ClusterAutoscaling>(GetArenaNoVirtual());
    autoscaling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.autoscaling)
  return autoscaling_;
}
inline void Cluster::set_allocated_autoscaling(::google::container::v1::ClusterAutoscaling* autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete autoscaling_;
  }
  if (autoscaling) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.autoscaling)
}

// .google.container.v1.NetworkConfig network_config = 27;
inline bool Cluster::has_network_config() const {
  return this != internal_default_instance() && network_config_ != nullptr;
}
inline void Cluster::clear_network_config() {
  if (GetArenaNoVirtual() == nullptr && network_config_ != nullptr) {
    delete network_config_;
  }
  network_config_ = nullptr;
}
inline const ::google::container::v1::NetworkConfig& Cluster::network_config() const {
  const ::google::container::v1::NetworkConfig* p = network_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.network_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NetworkConfig*>(
      &::google::container::v1::_NetworkConfig_default_instance_);
}
inline ::google::container::v1::NetworkConfig* Cluster::release_network_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.network_config)
  
  ::google::container::v1::NetworkConfig* temp = network_config_;
  network_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::NetworkConfig* Cluster::mutable_network_config() {
  
  if (network_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NetworkConfig>(GetArenaNoVirtual());
    network_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.network_config)
  return network_config_;
}
inline void Cluster::set_allocated_network_config(::google::container::v1::NetworkConfig* network_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_config_;
  }
  if (network_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_config, submessage_arena);
    }
    
  } else {
    
  }
  network_config_ = network_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.network_config)
}

// .google.container.v1.MaxPodsConstraint default_max_pods_constraint = 30;
inline bool Cluster::has_default_max_pods_constraint() const {
  return this != internal_default_instance() && default_max_pods_constraint_ != nullptr;
}
inline void Cluster::clear_default_max_pods_constraint() {
  if (GetArenaNoVirtual() == nullptr && default_max_pods_constraint_ != nullptr) {
    delete default_max_pods_constraint_;
  }
  default_max_pods_constraint_ = nullptr;
}
inline const ::google::container::v1::MaxPodsConstraint& Cluster::default_max_pods_constraint() const {
  const ::google::container::v1::MaxPodsConstraint* p = default_max_pods_constraint_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.default_max_pods_constraint)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::MaxPodsConstraint*>(
      &::google::container::v1::_MaxPodsConstraint_default_instance_);
}
inline ::google::container::v1::MaxPodsConstraint* Cluster::release_default_max_pods_constraint() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.default_max_pods_constraint)
  
  ::google::container::v1::MaxPodsConstraint* temp = default_max_pods_constraint_;
  default_max_pods_constraint_ = nullptr;
  return temp;
}
inline ::google::container::v1::MaxPodsConstraint* Cluster::mutable_default_max_pods_constraint() {
  
  if (default_max_pods_constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::MaxPodsConstraint>(GetArenaNoVirtual());
    default_max_pods_constraint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.default_max_pods_constraint)
  return default_max_pods_constraint_;
}
inline void Cluster::set_allocated_default_max_pods_constraint(::google::container::v1::MaxPodsConstraint* default_max_pods_constraint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default_max_pods_constraint_;
  }
  if (default_max_pods_constraint) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_max_pods_constraint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_max_pods_constraint, submessage_arena);
    }
    
  } else {
    
  }
  default_max_pods_constraint_ = default_max_pods_constraint;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.default_max_pods_constraint)
}

// .google.container.v1.ResourceUsageExportConfig resource_usage_export_config = 33;
inline bool Cluster::has_resource_usage_export_config() const {
  return this != internal_default_instance() && resource_usage_export_config_ != nullptr;
}
inline void Cluster::clear_resource_usage_export_config() {
  if (GetArenaNoVirtual() == nullptr && resource_usage_export_config_ != nullptr) {
    delete resource_usage_export_config_;
  }
  resource_usage_export_config_ = nullptr;
}
inline const ::google::container::v1::ResourceUsageExportConfig& Cluster::resource_usage_export_config() const {
  const ::google::container::v1::ResourceUsageExportConfig* p = resource_usage_export_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.resource_usage_export_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ResourceUsageExportConfig*>(
      &::google::container::v1::_ResourceUsageExportConfig_default_instance_);
}
inline ::google::container::v1::ResourceUsageExportConfig* Cluster::release_resource_usage_export_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.resource_usage_export_config)
  
  ::google::container::v1::ResourceUsageExportConfig* temp = resource_usage_export_config_;
  resource_usage_export_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::ResourceUsageExportConfig* Cluster::mutable_resource_usage_export_config() {
  
  if (resource_usage_export_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ResourceUsageExportConfig>(GetArenaNoVirtual());
    resource_usage_export_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.resource_usage_export_config)
  return resource_usage_export_config_;
}
inline void Cluster::set_allocated_resource_usage_export_config(::google::container::v1::ResourceUsageExportConfig* resource_usage_export_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete resource_usage_export_config_;
  }
  if (resource_usage_export_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      resource_usage_export_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, resource_usage_export_config, submessage_arena);
    }
    
  } else {
    
  }
  resource_usage_export_config_ = resource_usage_export_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.resource_usage_export_config)
}

// .google.container.v1.AuthenticatorGroupsConfig authenticator_groups_config = 34;
inline bool Cluster::has_authenticator_groups_config() const {
  return this != internal_default_instance() && authenticator_groups_config_ != nullptr;
}
inline void Cluster::clear_authenticator_groups_config() {
  if (GetArenaNoVirtual() == nullptr && authenticator_groups_config_ != nullptr) {
    delete authenticator_groups_config_;
  }
  authenticator_groups_config_ = nullptr;
}
inline const ::google::container::v1::AuthenticatorGroupsConfig& Cluster::authenticator_groups_config() const {
  const ::google::container::v1::AuthenticatorGroupsConfig* p = authenticator_groups_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.authenticator_groups_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::AuthenticatorGroupsConfig*>(
      &::google::container::v1::_AuthenticatorGroupsConfig_default_instance_);
}
inline ::google::container::v1::AuthenticatorGroupsConfig* Cluster::release_authenticator_groups_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.authenticator_groups_config)
  
  ::google::container::v1::AuthenticatorGroupsConfig* temp = authenticator_groups_config_;
  authenticator_groups_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::AuthenticatorGroupsConfig* Cluster::mutable_authenticator_groups_config() {
  
  if (authenticator_groups_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::AuthenticatorGroupsConfig>(GetArenaNoVirtual());
    authenticator_groups_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.authenticator_groups_config)
  return authenticator_groups_config_;
}
inline void Cluster::set_allocated_authenticator_groups_config(::google::container::v1::AuthenticatorGroupsConfig* authenticator_groups_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete authenticator_groups_config_;
  }
  if (authenticator_groups_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      authenticator_groups_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, authenticator_groups_config, submessage_arena);
    }
    
  } else {
    
  }
  authenticator_groups_config_ = authenticator_groups_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.authenticator_groups_config)
}

// .google.container.v1.PrivateClusterConfig private_cluster_config = 37;
inline bool Cluster::has_private_cluster_config() const {
  return this != internal_default_instance() && private_cluster_config_ != nullptr;
}
inline void Cluster::clear_private_cluster_config() {
  if (GetArenaNoVirtual() == nullptr && private_cluster_config_ != nullptr) {
    delete private_cluster_config_;
  }
  private_cluster_config_ = nullptr;
}
inline const ::google::container::v1::PrivateClusterConfig& Cluster::private_cluster_config() const {
  const ::google::container::v1::PrivateClusterConfig* p = private_cluster_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.private_cluster_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::PrivateClusterConfig*>(
      &::google::container::v1::_PrivateClusterConfig_default_instance_);
}
inline ::google::container::v1::PrivateClusterConfig* Cluster::release_private_cluster_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.private_cluster_config)
  
  ::google::container::v1::PrivateClusterConfig* temp = private_cluster_config_;
  private_cluster_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::PrivateClusterConfig* Cluster::mutable_private_cluster_config() {
  
  if (private_cluster_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::PrivateClusterConfig>(GetArenaNoVirtual());
    private_cluster_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.private_cluster_config)
  return private_cluster_config_;
}
inline void Cluster::set_allocated_private_cluster_config(::google::container::v1::PrivateClusterConfig* private_cluster_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete private_cluster_config_;
  }
  if (private_cluster_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      private_cluster_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, private_cluster_config, submessage_arena);
    }
    
  } else {
    
  }
  private_cluster_config_ = private_cluster_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.private_cluster_config)
}

// .google.container.v1.DatabaseEncryption database_encryption = 38;
inline bool Cluster::has_database_encryption() const {
  return this != internal_default_instance() && database_encryption_ != nullptr;
}
inline void Cluster::clear_database_encryption() {
  if (GetArenaNoVirtual() == nullptr && database_encryption_ != nullptr) {
    delete database_encryption_;
  }
  database_encryption_ = nullptr;
}
inline const ::google::container::v1::DatabaseEncryption& Cluster::database_encryption() const {
  const ::google::container::v1::DatabaseEncryption* p = database_encryption_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.database_encryption)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::DatabaseEncryption*>(
      &::google::container::v1::_DatabaseEncryption_default_instance_);
}
inline ::google::container::v1::DatabaseEncryption* Cluster::release_database_encryption() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.database_encryption)
  
  ::google::container::v1::DatabaseEncryption* temp = database_encryption_;
  database_encryption_ = nullptr;
  return temp;
}
inline ::google::container::v1::DatabaseEncryption* Cluster::mutable_database_encryption() {
  
  if (database_encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::DatabaseEncryption>(GetArenaNoVirtual());
    database_encryption_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.database_encryption)
  return database_encryption_;
}
inline void Cluster::set_allocated_database_encryption(::google::container::v1::DatabaseEncryption* database_encryption) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete database_encryption_;
  }
  if (database_encryption) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      database_encryption = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, database_encryption, submessage_arena);
    }
    
  } else {
    
  }
  database_encryption_ = database_encryption;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.database_encryption)
}

// .google.container.v1.VerticalPodAutoscaling vertical_pod_autoscaling = 39;
inline bool Cluster::has_vertical_pod_autoscaling() const {
  return this != internal_default_instance() && vertical_pod_autoscaling_ != nullptr;
}
inline void Cluster::clear_vertical_pod_autoscaling() {
  if (GetArenaNoVirtual() == nullptr && vertical_pod_autoscaling_ != nullptr) {
    delete vertical_pod_autoscaling_;
  }
  vertical_pod_autoscaling_ = nullptr;
}
inline const ::google::container::v1::VerticalPodAutoscaling& Cluster::vertical_pod_autoscaling() const {
  const ::google::container::v1::VerticalPodAutoscaling* p = vertical_pod_autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.vertical_pod_autoscaling)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::VerticalPodAutoscaling*>(
      &::google::container::v1::_VerticalPodAutoscaling_default_instance_);
}
inline ::google::container::v1::VerticalPodAutoscaling* Cluster::release_vertical_pod_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.vertical_pod_autoscaling)
  
  ::google::container::v1::VerticalPodAutoscaling* temp = vertical_pod_autoscaling_;
  vertical_pod_autoscaling_ = nullptr;
  return temp;
}
inline ::google::container::v1::VerticalPodAutoscaling* Cluster::mutable_vertical_pod_autoscaling() {
  
  if (vertical_pod_autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::VerticalPodAutoscaling>(GetArenaNoVirtual());
    vertical_pod_autoscaling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.vertical_pod_autoscaling)
  return vertical_pod_autoscaling_;
}
inline void Cluster::set_allocated_vertical_pod_autoscaling(::google::container::v1::VerticalPodAutoscaling* vertical_pod_autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete vertical_pod_autoscaling_;
  }
  if (vertical_pod_autoscaling) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vertical_pod_autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, vertical_pod_autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  vertical_pod_autoscaling_ = vertical_pod_autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.vertical_pod_autoscaling)
}

// .google.container.v1.ShieldedNodes shielded_nodes = 40;
inline bool Cluster::has_shielded_nodes() const {
  return this != internal_default_instance() && shielded_nodes_ != nullptr;
}
inline void Cluster::clear_shielded_nodes() {
  if (GetArenaNoVirtual() == nullptr && shielded_nodes_ != nullptr) {
    delete shielded_nodes_;
  }
  shielded_nodes_ = nullptr;
}
inline const ::google::container::v1::ShieldedNodes& Cluster::shielded_nodes() const {
  const ::google::container::v1::ShieldedNodes* p = shielded_nodes_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.shielded_nodes)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ShieldedNodes*>(
      &::google::container::v1::_ShieldedNodes_default_instance_);
}
inline ::google::container::v1::ShieldedNodes* Cluster::release_shielded_nodes() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.shielded_nodes)
  
  ::google::container::v1::ShieldedNodes* temp = shielded_nodes_;
  shielded_nodes_ = nullptr;
  return temp;
}
inline ::google::container::v1::ShieldedNodes* Cluster::mutable_shielded_nodes() {
  
  if (shielded_nodes_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ShieldedNodes>(GetArenaNoVirtual());
    shielded_nodes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.shielded_nodes)
  return shielded_nodes_;
}
inline void Cluster::set_allocated_shielded_nodes(::google::container::v1::ShieldedNodes* shielded_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shielded_nodes_;
  }
  if (shielded_nodes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shielded_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shielded_nodes, submessage_arena);
    }
    
  } else {
    
  }
  shielded_nodes_ = shielded_nodes;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.shielded_nodes)
}

// .google.container.v1.ReleaseChannel release_channel = 41;
inline bool Cluster::has_release_channel() const {
  return this != internal_default_instance() && release_channel_ != nullptr;
}
inline void Cluster::clear_release_channel() {
  if (GetArenaNoVirtual() == nullptr && release_channel_ != nullptr) {
    delete release_channel_;
  }
  release_channel_ = nullptr;
}
inline const ::google::container::v1::ReleaseChannel& Cluster::release_channel() const {
  const ::google::container::v1::ReleaseChannel* p = release_channel_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.release_channel)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ReleaseChannel*>(
      &::google::container::v1::_ReleaseChannel_default_instance_);
}
inline ::google::container::v1::ReleaseChannel* Cluster::release_release_channel() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.release_channel)
  
  ::google::container::v1::ReleaseChannel* temp = release_channel_;
  release_channel_ = nullptr;
  return temp;
}
inline ::google::container::v1::ReleaseChannel* Cluster::mutable_release_channel() {
  
  if (release_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ReleaseChannel>(GetArenaNoVirtual());
    release_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.release_channel)
  return release_channel_;
}
inline void Cluster::set_allocated_release_channel(::google::container::v1::ReleaseChannel* release_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete release_channel_;
  }
  if (release_channel) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      release_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, release_channel, submessage_arena);
    }
    
  } else {
    
  }
  release_channel_ = release_channel;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.release_channel)
}

// .google.container.v1.WorkloadIdentityConfig workload_identity_config = 43;
inline bool Cluster::has_workload_identity_config() const {
  return this != internal_default_instance() && workload_identity_config_ != nullptr;
}
inline void Cluster::clear_workload_identity_config() {
  if (GetArenaNoVirtual() == nullptr && workload_identity_config_ != nullptr) {
    delete workload_identity_config_;
  }
  workload_identity_config_ = nullptr;
}
inline const ::google::container::v1::WorkloadIdentityConfig& Cluster::workload_identity_config() const {
  const ::google::container::v1::WorkloadIdentityConfig* p = workload_identity_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.workload_identity_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::WorkloadIdentityConfig*>(
      &::google::container::v1::_WorkloadIdentityConfig_default_instance_);
}
inline ::google::container::v1::WorkloadIdentityConfig* Cluster::release_workload_identity_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.workload_identity_config)
  
  ::google::container::v1::WorkloadIdentityConfig* temp = workload_identity_config_;
  workload_identity_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::WorkloadIdentityConfig* Cluster::mutable_workload_identity_config() {
  
  if (workload_identity_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::WorkloadIdentityConfig>(GetArenaNoVirtual());
    workload_identity_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.workload_identity_config)
  return workload_identity_config_;
}
inline void Cluster::set_allocated_workload_identity_config(::google::container::v1::WorkloadIdentityConfig* workload_identity_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete workload_identity_config_;
  }
  if (workload_identity_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workload_identity_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workload_identity_config, submessage_arena);
    }
    
  } else {
    
  }
  workload_identity_config_ = workload_identity_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.workload_identity_config)
}

// string self_link = 100;
inline void Cluster::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.self_link)
  return self_link_.GetNoArena();
}
inline void Cluster::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.self_link)
}
#if LANG_CXX11
inline void Cluster::set_self_link(::std::string&& value) {
  
  self_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.self_link)
}
#endif
inline void Cluster::set_self_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.self_link)
}
inline void Cluster::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.self_link)
}
inline ::std::string* Cluster::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_self_link(::std::string* self_link) {
  if (self_link != nullptr) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.self_link)
}

// string zone = 101 [deprecated = true];
inline void Cluster::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.zone)
  return zone_.GetNoArena();
}
inline void Cluster::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.zone)
}
#if LANG_CXX11
inline void Cluster::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.zone)
}
#endif
inline void Cluster::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.zone)
}
inline void Cluster::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.zone)
}
inline ::std::string* Cluster::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.zone)
}

// string endpoint = 102;
inline void Cluster::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::endpoint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.endpoint)
  return endpoint_.GetNoArena();
}
inline void Cluster::set_endpoint(const ::std::string& value) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.endpoint)
}
#if LANG_CXX11
inline void Cluster::set_endpoint(::std::string&& value) {
  
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.endpoint)
}
#endif
inline void Cluster::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.endpoint)
}
inline void Cluster::set_endpoint(const char* value, size_t size) {
  
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.endpoint)
}
inline ::std::string* Cluster::mutable_endpoint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_endpoint() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.endpoint)
  
  return endpoint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != nullptr) {
    
  } else {
    
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.endpoint)
}

// string initial_cluster_version = 103;
inline void Cluster::clear_initial_cluster_version() {
  initial_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::initial_cluster_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.initial_cluster_version)
  return initial_cluster_version_.GetNoArena();
}
inline void Cluster::set_initial_cluster_version(const ::std::string& value) {
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.initial_cluster_version)
}
#if LANG_CXX11
inline void Cluster::set_initial_cluster_version(::std::string&& value) {
  
  initial_cluster_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.initial_cluster_version)
}
#endif
inline void Cluster::set_initial_cluster_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.initial_cluster_version)
}
inline void Cluster::set_initial_cluster_version(const char* value, size_t size) {
  
  initial_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.initial_cluster_version)
}
inline ::std::string* Cluster::mutable_initial_cluster_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.initial_cluster_version)
  return initial_cluster_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_initial_cluster_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.initial_cluster_version)
  
  return initial_cluster_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_initial_cluster_version(::std::string* initial_cluster_version) {
  if (initial_cluster_version != nullptr) {
    
  } else {
    
  }
  initial_cluster_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), initial_cluster_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.initial_cluster_version)
}

// string current_master_version = 104;
inline void Cluster::clear_current_master_version() {
  current_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::current_master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_master_version)
  return current_master_version_.GetNoArena();
}
inline void Cluster::set_current_master_version(const ::std::string& value) {
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_master_version)
}
#if LANG_CXX11
inline void Cluster::set_current_master_version(::std::string&& value) {
  
  current_master_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.current_master_version)
}
#endif
inline void Cluster::set_current_master_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.current_master_version)
}
inline void Cluster::set_current_master_version(const char* value, size_t size) {
  
  current_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.current_master_version)
}
inline ::std::string* Cluster::mutable_current_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.current_master_version)
  return current_master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_current_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.current_master_version)
  
  return current_master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_current_master_version(::std::string* current_master_version) {
  if (current_master_version != nullptr) {
    
  } else {
    
  }
  current_master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.current_master_version)
}

// string current_node_version = 105 [deprecated = true];
inline void Cluster::clear_current_node_version() {
  current_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::current_node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_node_version)
  return current_node_version_.GetNoArena();
}
inline void Cluster::set_current_node_version(const ::std::string& value) {
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_node_version)
}
#if LANG_CXX11
inline void Cluster::set_current_node_version(::std::string&& value) {
  
  current_node_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.current_node_version)
}
#endif
inline void Cluster::set_current_node_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.current_node_version)
}
inline void Cluster::set_current_node_version(const char* value, size_t size) {
  
  current_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.current_node_version)
}
inline ::std::string* Cluster::mutable_current_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.current_node_version)
  return current_node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_current_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.current_node_version)
  
  return current_node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_current_node_version(::std::string* current_node_version) {
  if (current_node_version != nullptr) {
    
  } else {
    
  }
  current_node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), current_node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.current_node_version)
}

// string create_time = 106;
inline void Cluster::clear_create_time() {
  create_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::create_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.create_time)
  return create_time_.GetNoArena();
}
inline void Cluster::set_create_time(const ::std::string& value) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.create_time)
}
#if LANG_CXX11
inline void Cluster::set_create_time(::std::string&& value) {
  
  create_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.create_time)
}
#endif
inline void Cluster::set_create_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.create_time)
}
inline void Cluster::set_create_time(const char* value, size_t size) {
  
  create_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.create_time)
}
inline ::std::string* Cluster::mutable_create_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.create_time)
  return create_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_create_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.create_time)
  
  return create_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_create_time(::std::string* create_time) {
  if (create_time != nullptr) {
    
  } else {
    
  }
  create_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), create_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.create_time)
}

// .google.container.v1.Cluster.Status status = 107;
inline void Cluster::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::Cluster_Status Cluster::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.status)
  return static_cast< ::google::container::v1::Cluster_Status >(status_);
}
inline void Cluster::set_status(::google::container::v1::Cluster_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.status)
}

// string status_message = 108 [deprecated = true];
inline void Cluster::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.status_message)
  return status_message_.GetNoArena();
}
inline void Cluster::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.status_message)
}
#if LANG_CXX11
inline void Cluster::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.status_message)
}
#endif
inline void Cluster::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.status_message)
}
inline void Cluster::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.status_message)
}
inline ::std::string* Cluster::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_status_message(::std::string* status_message) {
  if (status_message != nullptr) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.status_message)
}

// int32 node_ipv4_cidr_size = 109;
inline void Cluster::clear_node_ipv4_cidr_size() {
  node_ipv4_cidr_size_ = 0;
}
inline ::google::protobuf::int32 Cluster::node_ipv4_cidr_size() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.node_ipv4_cidr_size)
  return node_ipv4_cidr_size_;
}
inline void Cluster::set_node_ipv4_cidr_size(::google::protobuf::int32 value) {
  
  node_ipv4_cidr_size_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.node_ipv4_cidr_size)
}

// string services_ipv4_cidr = 110;
inline void Cluster::clear_services_ipv4_cidr() {
  services_ipv4_cidr_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::services_ipv4_cidr() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.services_ipv4_cidr)
  return services_ipv4_cidr_.GetNoArena();
}
inline void Cluster::set_services_ipv4_cidr(const ::std::string& value) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.services_ipv4_cidr)
}
#if LANG_CXX11
inline void Cluster::set_services_ipv4_cidr(::std::string&& value) {
  
  services_ipv4_cidr_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.services_ipv4_cidr)
}
#endif
inline void Cluster::set_services_ipv4_cidr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.services_ipv4_cidr)
}
inline void Cluster::set_services_ipv4_cidr(const char* value, size_t size) {
  
  services_ipv4_cidr_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.services_ipv4_cidr)
}
inline ::std::string* Cluster::mutable_services_ipv4_cidr() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.services_ipv4_cidr)
  return services_ipv4_cidr_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_services_ipv4_cidr() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.services_ipv4_cidr)
  
  return services_ipv4_cidr_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_services_ipv4_cidr(::std::string* services_ipv4_cidr) {
  if (services_ipv4_cidr != nullptr) {
    
  } else {
    
  }
  services_ipv4_cidr_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), services_ipv4_cidr);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.services_ipv4_cidr)
}

// repeated string instance_group_urls = 111 [deprecated = true];
inline int Cluster::instance_group_urls_size() const {
  return instance_group_urls_.size();
}
inline void Cluster::clear_instance_group_urls() {
  instance_group_urls_.Clear();
}
inline const ::std::string& Cluster::instance_group_urls(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Get(index);
}
inline ::std::string* Cluster::mutable_instance_group_urls(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Mutable(index);
}
inline void Cluster::set_instance_group_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Cluster::set_instance_group_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Cluster::set_instance_group_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instance_group_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.instance_group_urls)
}
inline void Cluster::set_instance_group_urls(int index, const char* value, size_t size) {
  instance_group_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.instance_group_urls)
}
inline ::std::string* Cluster::add_instance_group_urls() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_.Add();
}
inline void Cluster::add_instance_group_urls(const ::std::string& value) {
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.instance_group_urls)
}
#if LANG_CXX11
inline void Cluster::add_instance_group_urls(::std::string&& value) {
  instance_group_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.instance_group_urls)
}
#endif
inline void Cluster::add_instance_group_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.Cluster.instance_group_urls)
}
inline void Cluster::add_instance_group_urls(const char* value, size_t size) {
  instance_group_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.Cluster.instance_group_urls)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Cluster::instance_group_urls() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.instance_group_urls)
  return instance_group_urls_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Cluster::mutable_instance_group_urls() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.instance_group_urls)
  return &instance_group_urls_;
}

// int32 current_node_count = 112 [deprecated = true];
inline void Cluster::clear_current_node_count() {
  current_node_count_ = 0;
}
inline ::google::protobuf::int32 Cluster::current_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.current_node_count)
  return current_node_count_;
}
inline void Cluster::set_current_node_count(::google::protobuf::int32 value) {
  
  current_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.current_node_count)
}

// string expire_time = 113;
inline void Cluster::clear_expire_time() {
  expire_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::expire_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.expire_time)
  return expire_time_.GetNoArena();
}
inline void Cluster::set_expire_time(const ::std::string& value) {
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.expire_time)
}
#if LANG_CXX11
inline void Cluster::set_expire_time(::std::string&& value) {
  
  expire_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.expire_time)
}
#endif
inline void Cluster::set_expire_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.expire_time)
}
inline void Cluster::set_expire_time(const char* value, size_t size) {
  
  expire_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.expire_time)
}
inline ::std::string* Cluster::mutable_expire_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.expire_time)
  return expire_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_expire_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.expire_time)
  
  return expire_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_expire_time(::std::string* expire_time) {
  if (expire_time != nullptr) {
    
  } else {
    
  }
  expire_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), expire_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.expire_time)
}

// string location = 114;
inline void Cluster::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::location() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.location)
  return location_.GetNoArena();
}
inline void Cluster::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.location)
}
#if LANG_CXX11
inline void Cluster::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.location)
}
#endif
inline void Cluster::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.location)
}
inline void Cluster::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.location)
}
inline ::std::string* Cluster::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_location() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_location(::std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.location)
}

// bool enable_tpu = 115;
inline void Cluster::clear_enable_tpu() {
  enable_tpu_ = false;
}
inline bool Cluster::enable_tpu() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.enable_tpu)
  return enable_tpu_;
}
inline void Cluster::set_enable_tpu(bool value) {
  
  enable_tpu_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.enable_tpu)
}

// string tpu_ipv4_cidr_block = 116;
inline void Cluster::clear_tpu_ipv4_cidr_block() {
  tpu_ipv4_cidr_block_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Cluster::tpu_ipv4_cidr_block() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.tpu_ipv4_cidr_block)
  return tpu_ipv4_cidr_block_.GetNoArena();
}
inline void Cluster::set_tpu_ipv4_cidr_block(const ::std::string& value) {
  
  tpu_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Cluster.tpu_ipv4_cidr_block)
}
#if LANG_CXX11
inline void Cluster::set_tpu_ipv4_cidr_block(::std::string&& value) {
  
  tpu_ipv4_cidr_block_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Cluster.tpu_ipv4_cidr_block)
}
#endif
inline void Cluster::set_tpu_ipv4_cidr_block(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tpu_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Cluster.tpu_ipv4_cidr_block)
}
inline void Cluster::set_tpu_ipv4_cidr_block(const char* value, size_t size) {
  
  tpu_ipv4_cidr_block_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Cluster.tpu_ipv4_cidr_block)
}
inline ::std::string* Cluster::mutable_tpu_ipv4_cidr_block() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.tpu_ipv4_cidr_block)
  return tpu_ipv4_cidr_block_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Cluster::release_tpu_ipv4_cidr_block() {
  // @@protoc_insertion_point(field_release:google.container.v1.Cluster.tpu_ipv4_cidr_block)
  
  return tpu_ipv4_cidr_block_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Cluster::set_allocated_tpu_ipv4_cidr_block(::std::string* tpu_ipv4_cidr_block) {
  if (tpu_ipv4_cidr_block != nullptr) {
    
  } else {
    
  }
  tpu_ipv4_cidr_block_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tpu_ipv4_cidr_block);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Cluster.tpu_ipv4_cidr_block)
}

// repeated .google.container.v1.StatusCondition conditions = 118;
inline int Cluster::conditions_size() const {
  return conditions_.size();
}
inline void Cluster::clear_conditions() {
  conditions_.Clear();
}
inline ::google::container::v1::StatusCondition* Cluster::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Cluster.conditions)
  return conditions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >*
Cluster::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Cluster.conditions)
  return &conditions_;
}
inline const ::google::container::v1::StatusCondition& Cluster::conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Cluster.conditions)
  return conditions_.Get(index);
}
inline ::google::container::v1::StatusCondition* Cluster::add_conditions() {
  // @@protoc_insertion_point(field_add:google.container.v1.Cluster.conditions)
  return conditions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >&
Cluster::conditions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Cluster.conditions)
  return conditions_;
}

// -------------------------------------------------------------------

// ClusterUpdate

// string desired_node_version = 4;
inline void ClusterUpdate::clear_desired_node_version() {
  desired_node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_version)
  return desired_node_version_.GetNoArena();
}
inline void ClusterUpdate::set_desired_node_version(const ::std::string& value) {
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_node_version)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_node_version(::std::string&& value) {
  
  desired_node_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_node_version)
}
#endif
inline void ClusterUpdate::set_desired_node_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_node_version)
}
inline void ClusterUpdate::set_desired_node_version(const char* value, size_t size) {
  
  desired_node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_node_version)
}
inline ::std::string* ClusterUpdate::mutable_desired_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_version)
  return desired_node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_version)
  
  return desired_node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_node_version(::std::string* desired_node_version) {
  if (desired_node_version != nullptr) {
    
  } else {
    
  }
  desired_node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_version)
}

// string desired_monitoring_service = 5;
inline void ClusterUpdate::clear_desired_monitoring_service() {
  desired_monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_monitoring_service)
  return desired_monitoring_service_.GetNoArena();
}
inline void ClusterUpdate::set_desired_monitoring_service(const ::std::string& value) {
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_monitoring_service(::std::string&& value) {
  
  desired_monitoring_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
#endif
inline void ClusterUpdate::set_desired_monitoring_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
inline void ClusterUpdate::set_desired_monitoring_service(const char* value, size_t size) {
  
  desired_monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_monitoring_service)
}
inline ::std::string* ClusterUpdate::mutable_desired_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_monitoring_service)
  return desired_monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_monitoring_service)
  
  return desired_monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_monitoring_service(::std::string* desired_monitoring_service) {
  if (desired_monitoring_service != nullptr) {
    
  } else {
    
  }
  desired_monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_monitoring_service)
}

// .google.container.v1.AddonsConfig desired_addons_config = 6;
inline bool ClusterUpdate::has_desired_addons_config() const {
  return this != internal_default_instance() && desired_addons_config_ != nullptr;
}
inline void ClusterUpdate::clear_desired_addons_config() {
  if (GetArenaNoVirtual() == nullptr && desired_addons_config_ != nullptr) {
    delete desired_addons_config_;
  }
  desired_addons_config_ = nullptr;
}
inline const ::google::container::v1::AddonsConfig& ClusterUpdate::desired_addons_config() const {
  const ::google::container::v1::AddonsConfig* p = desired_addons_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_addons_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::AddonsConfig*>(
      &::google::container::v1::_AddonsConfig_default_instance_);
}
inline ::google::container::v1::AddonsConfig* ClusterUpdate::release_desired_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_addons_config)
  
  ::google::container::v1::AddonsConfig* temp = desired_addons_config_;
  desired_addons_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::AddonsConfig* ClusterUpdate::mutable_desired_addons_config() {
  
  if (desired_addons_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::AddonsConfig>(GetArenaNoVirtual());
    desired_addons_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_addons_config)
  return desired_addons_config_;
}
inline void ClusterUpdate::set_allocated_desired_addons_config(::google::container::v1::AddonsConfig* desired_addons_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_addons_config_;
  }
  if (desired_addons_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_addons_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_addons_config, submessage_arena);
    }
    
  } else {
    
  }
  desired_addons_config_ = desired_addons_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_addons_config)
}

// string desired_node_pool_id = 7;
inline void ClusterUpdate::clear_desired_node_pool_id() {
  desired_node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_pool_id)
  return desired_node_pool_id_.GetNoArena();
}
inline void ClusterUpdate::set_desired_node_pool_id(const ::std::string& value) {
  
  desired_node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_node_pool_id(::std::string&& value) {
  
  desired_node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
#endif
inline void ClusterUpdate::set_desired_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desired_node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
inline void ClusterUpdate::set_desired_node_pool_id(const char* value, size_t size) {
  
  desired_node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_node_pool_id)
}
inline ::std::string* ClusterUpdate::mutable_desired_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_pool_id)
  return desired_node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_pool_id)
  
  return desired_node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_node_pool_id(::std::string* desired_node_pool_id) {
  if (desired_node_pool_id != nullptr) {
    
  } else {
    
  }
  desired_node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_pool_id)
}

// string desired_image_type = 8;
inline void ClusterUpdate::clear_desired_image_type() {
  desired_image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_image_type)
  return desired_image_type_.GetNoArena();
}
inline void ClusterUpdate::set_desired_image_type(const ::std::string& value) {
  
  desired_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_image_type)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_image_type(::std::string&& value) {
  
  desired_image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_image_type)
}
#endif
inline void ClusterUpdate::set_desired_image_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desired_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_image_type)
}
inline void ClusterUpdate::set_desired_image_type(const char* value, size_t size) {
  
  desired_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_image_type)
}
inline ::std::string* ClusterUpdate::mutable_desired_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_image_type)
  return desired_image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_image_type)
  
  return desired_image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_image_type(::std::string* desired_image_type) {
  if (desired_image_type != nullptr) {
    
  } else {
    
  }
  desired_image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_image_type)
}

// .google.container.v1.DatabaseEncryption desired_database_encryption = 46;
inline bool ClusterUpdate::has_desired_database_encryption() const {
  return this != internal_default_instance() && desired_database_encryption_ != nullptr;
}
inline void ClusterUpdate::clear_desired_database_encryption() {
  if (GetArenaNoVirtual() == nullptr && desired_database_encryption_ != nullptr) {
    delete desired_database_encryption_;
  }
  desired_database_encryption_ = nullptr;
}
inline const ::google::container::v1::DatabaseEncryption& ClusterUpdate::desired_database_encryption() const {
  const ::google::container::v1::DatabaseEncryption* p = desired_database_encryption_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_database_encryption)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::DatabaseEncryption*>(
      &::google::container::v1::_DatabaseEncryption_default_instance_);
}
inline ::google::container::v1::DatabaseEncryption* ClusterUpdate::release_desired_database_encryption() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_database_encryption)
  
  ::google::container::v1::DatabaseEncryption* temp = desired_database_encryption_;
  desired_database_encryption_ = nullptr;
  return temp;
}
inline ::google::container::v1::DatabaseEncryption* ClusterUpdate::mutable_desired_database_encryption() {
  
  if (desired_database_encryption_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::DatabaseEncryption>(GetArenaNoVirtual());
    desired_database_encryption_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_database_encryption)
  return desired_database_encryption_;
}
inline void ClusterUpdate::set_allocated_desired_database_encryption(::google::container::v1::DatabaseEncryption* desired_database_encryption) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_database_encryption_;
  }
  if (desired_database_encryption) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_database_encryption = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_database_encryption, submessage_arena);
    }
    
  } else {
    
  }
  desired_database_encryption_ = desired_database_encryption;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_database_encryption)
}

// .google.container.v1.WorkloadIdentityConfig desired_workload_identity_config = 47;
inline bool ClusterUpdate::has_desired_workload_identity_config() const {
  return this != internal_default_instance() && desired_workload_identity_config_ != nullptr;
}
inline void ClusterUpdate::clear_desired_workload_identity_config() {
  if (GetArenaNoVirtual() == nullptr && desired_workload_identity_config_ != nullptr) {
    delete desired_workload_identity_config_;
  }
  desired_workload_identity_config_ = nullptr;
}
inline const ::google::container::v1::WorkloadIdentityConfig& ClusterUpdate::desired_workload_identity_config() const {
  const ::google::container::v1::WorkloadIdentityConfig* p = desired_workload_identity_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_workload_identity_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::WorkloadIdentityConfig*>(
      &::google::container::v1::_WorkloadIdentityConfig_default_instance_);
}
inline ::google::container::v1::WorkloadIdentityConfig* ClusterUpdate::release_desired_workload_identity_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_workload_identity_config)
  
  ::google::container::v1::WorkloadIdentityConfig* temp = desired_workload_identity_config_;
  desired_workload_identity_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::WorkloadIdentityConfig* ClusterUpdate::mutable_desired_workload_identity_config() {
  
  if (desired_workload_identity_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::WorkloadIdentityConfig>(GetArenaNoVirtual());
    desired_workload_identity_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_workload_identity_config)
  return desired_workload_identity_config_;
}
inline void ClusterUpdate::set_allocated_desired_workload_identity_config(::google::container::v1::WorkloadIdentityConfig* desired_workload_identity_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_workload_identity_config_;
  }
  if (desired_workload_identity_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_workload_identity_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_workload_identity_config, submessage_arena);
    }
    
  } else {
    
  }
  desired_workload_identity_config_ = desired_workload_identity_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_workload_identity_config)
}

// .google.container.v1.ShieldedNodes desired_shielded_nodes = 48;
inline bool ClusterUpdate::has_desired_shielded_nodes() const {
  return this != internal_default_instance() && desired_shielded_nodes_ != nullptr;
}
inline void ClusterUpdate::clear_desired_shielded_nodes() {
  if (GetArenaNoVirtual() == nullptr && desired_shielded_nodes_ != nullptr) {
    delete desired_shielded_nodes_;
  }
  desired_shielded_nodes_ = nullptr;
}
inline const ::google::container::v1::ShieldedNodes& ClusterUpdate::desired_shielded_nodes() const {
  const ::google::container::v1::ShieldedNodes* p = desired_shielded_nodes_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_shielded_nodes)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ShieldedNodes*>(
      &::google::container::v1::_ShieldedNodes_default_instance_);
}
inline ::google::container::v1::ShieldedNodes* ClusterUpdate::release_desired_shielded_nodes() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_shielded_nodes)
  
  ::google::container::v1::ShieldedNodes* temp = desired_shielded_nodes_;
  desired_shielded_nodes_ = nullptr;
  return temp;
}
inline ::google::container::v1::ShieldedNodes* ClusterUpdate::mutable_desired_shielded_nodes() {
  
  if (desired_shielded_nodes_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ShieldedNodes>(GetArenaNoVirtual());
    desired_shielded_nodes_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_shielded_nodes)
  return desired_shielded_nodes_;
}
inline void ClusterUpdate::set_allocated_desired_shielded_nodes(::google::container::v1::ShieldedNodes* desired_shielded_nodes) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_shielded_nodes_;
  }
  if (desired_shielded_nodes) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_shielded_nodes = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_shielded_nodes, submessage_arena);
    }
    
  } else {
    
  }
  desired_shielded_nodes_ = desired_shielded_nodes;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_shielded_nodes)
}

// .google.container.v1.NodePoolAutoscaling desired_node_pool_autoscaling = 9;
inline bool ClusterUpdate::has_desired_node_pool_autoscaling() const {
  return this != internal_default_instance() && desired_node_pool_autoscaling_ != nullptr;
}
inline void ClusterUpdate::clear_desired_node_pool_autoscaling() {
  if (GetArenaNoVirtual() == nullptr && desired_node_pool_autoscaling_ != nullptr) {
    delete desired_node_pool_autoscaling_;
  }
  desired_node_pool_autoscaling_ = nullptr;
}
inline const ::google::container::v1::NodePoolAutoscaling& ClusterUpdate::desired_node_pool_autoscaling() const {
  const ::google::container::v1::NodePoolAutoscaling* p = desired_node_pool_autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodePoolAutoscaling*>(
      &::google::container::v1::_NodePoolAutoscaling_default_instance_);
}
inline ::google::container::v1::NodePoolAutoscaling* ClusterUpdate::release_desired_node_pool_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
  
  ::google::container::v1::NodePoolAutoscaling* temp = desired_node_pool_autoscaling_;
  desired_node_pool_autoscaling_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodePoolAutoscaling* ClusterUpdate::mutable_desired_node_pool_autoscaling() {
  
  if (desired_node_pool_autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodePoolAutoscaling>(GetArenaNoVirtual());
    desired_node_pool_autoscaling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
  return desired_node_pool_autoscaling_;
}
inline void ClusterUpdate::set_allocated_desired_node_pool_autoscaling(::google::container::v1::NodePoolAutoscaling* desired_node_pool_autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_node_pool_autoscaling_;
  }
  if (desired_node_pool_autoscaling) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_node_pool_autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_node_pool_autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  desired_node_pool_autoscaling_ = desired_node_pool_autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_node_pool_autoscaling)
}

// repeated string desired_locations = 10;
inline int ClusterUpdate::desired_locations_size() const {
  return desired_locations_.size();
}
inline void ClusterUpdate::clear_desired_locations() {
  desired_locations_.Clear();
}
inline const ::std::string& ClusterUpdate::desired_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_.Get(index);
}
inline ::std::string* ClusterUpdate::mutable_desired_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_.Mutable(index);
}
inline void ClusterUpdate::set_desired_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_locations)
  desired_locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_locations)
  desired_locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ClusterUpdate::set_desired_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  desired_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_locations)
}
inline void ClusterUpdate::set_desired_locations(int index, const char* value, size_t size) {
  desired_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_locations)
}
inline ::std::string* ClusterUpdate::add_desired_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_.Add();
}
inline void ClusterUpdate::add_desired_locations(const ::std::string& value) {
  desired_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ClusterUpdate.desired_locations)
}
#if LANG_CXX11
inline void ClusterUpdate::add_desired_locations(::std::string&& value) {
  desired_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ClusterUpdate.desired_locations)
}
#endif
inline void ClusterUpdate::add_desired_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  desired_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ClusterUpdate.desired_locations)
}
inline void ClusterUpdate::add_desired_locations(const char* value, size_t size) {
  desired_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ClusterUpdate.desired_locations)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ClusterUpdate::desired_locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ClusterUpdate.desired_locations)
  return desired_locations_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ClusterUpdate::mutable_desired_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ClusterUpdate.desired_locations)
  return &desired_locations_;
}

// .google.container.v1.MasterAuthorizedNetworksConfig desired_master_authorized_networks_config = 12;
inline bool ClusterUpdate::has_desired_master_authorized_networks_config() const {
  return this != internal_default_instance() && desired_master_authorized_networks_config_ != nullptr;
}
inline void ClusterUpdate::clear_desired_master_authorized_networks_config() {
  if (GetArenaNoVirtual() == nullptr && desired_master_authorized_networks_config_ != nullptr) {
    delete desired_master_authorized_networks_config_;
  }
  desired_master_authorized_networks_config_ = nullptr;
}
inline const ::google::container::v1::MasterAuthorizedNetworksConfig& ClusterUpdate::desired_master_authorized_networks_config() const {
  const ::google::container::v1::MasterAuthorizedNetworksConfig* p = desired_master_authorized_networks_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::MasterAuthorizedNetworksConfig*>(
      &::google::container::v1::_MasterAuthorizedNetworksConfig_default_instance_);
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig* ClusterUpdate::release_desired_master_authorized_networks_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
  
  ::google::container::v1::MasterAuthorizedNetworksConfig* temp = desired_master_authorized_networks_config_;
  desired_master_authorized_networks_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::MasterAuthorizedNetworksConfig* ClusterUpdate::mutable_desired_master_authorized_networks_config() {
  
  if (desired_master_authorized_networks_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::MasterAuthorizedNetworksConfig>(GetArenaNoVirtual());
    desired_master_authorized_networks_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
  return desired_master_authorized_networks_config_;
}
inline void ClusterUpdate::set_allocated_desired_master_authorized_networks_config(::google::container::v1::MasterAuthorizedNetworksConfig* desired_master_authorized_networks_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_master_authorized_networks_config_;
  }
  if (desired_master_authorized_networks_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_master_authorized_networks_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_master_authorized_networks_config, submessage_arena);
    }
    
  } else {
    
  }
  desired_master_authorized_networks_config_ = desired_master_authorized_networks_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_master_authorized_networks_config)
}

// .google.container.v1.ClusterAutoscaling desired_cluster_autoscaling = 15;
inline bool ClusterUpdate::has_desired_cluster_autoscaling() const {
  return this != internal_default_instance() && desired_cluster_autoscaling_ != nullptr;
}
inline void ClusterUpdate::clear_desired_cluster_autoscaling() {
  if (GetArenaNoVirtual() == nullptr && desired_cluster_autoscaling_ != nullptr) {
    delete desired_cluster_autoscaling_;
  }
  desired_cluster_autoscaling_ = nullptr;
}
inline const ::google::container::v1::ClusterAutoscaling& ClusterUpdate::desired_cluster_autoscaling() const {
  const ::google::container::v1::ClusterAutoscaling* p = desired_cluster_autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_cluster_autoscaling)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ClusterAutoscaling*>(
      &::google::container::v1::_ClusterAutoscaling_default_instance_);
}
inline ::google::container::v1::ClusterAutoscaling* ClusterUpdate::release_desired_cluster_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_cluster_autoscaling)
  
  ::google::container::v1::ClusterAutoscaling* temp = desired_cluster_autoscaling_;
  desired_cluster_autoscaling_ = nullptr;
  return temp;
}
inline ::google::container::v1::ClusterAutoscaling* ClusterUpdate::mutable_desired_cluster_autoscaling() {
  
  if (desired_cluster_autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ClusterAutoscaling>(GetArenaNoVirtual());
    desired_cluster_autoscaling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_cluster_autoscaling)
  return desired_cluster_autoscaling_;
}
inline void ClusterUpdate::set_allocated_desired_cluster_autoscaling(::google::container::v1::ClusterAutoscaling* desired_cluster_autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_cluster_autoscaling_;
  }
  if (desired_cluster_autoscaling) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_cluster_autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_cluster_autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  desired_cluster_autoscaling_ = desired_cluster_autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_cluster_autoscaling)
}

// .google.container.v1.BinaryAuthorization desired_binary_authorization = 16;
inline bool ClusterUpdate::has_desired_binary_authorization() const {
  return this != internal_default_instance() && desired_binary_authorization_ != nullptr;
}
inline void ClusterUpdate::clear_desired_binary_authorization() {
  if (GetArenaNoVirtual() == nullptr && desired_binary_authorization_ != nullptr) {
    delete desired_binary_authorization_;
  }
  desired_binary_authorization_ = nullptr;
}
inline const ::google::container::v1::BinaryAuthorization& ClusterUpdate::desired_binary_authorization() const {
  const ::google::container::v1::BinaryAuthorization* p = desired_binary_authorization_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_binary_authorization)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::BinaryAuthorization*>(
      &::google::container::v1::_BinaryAuthorization_default_instance_);
}
inline ::google::container::v1::BinaryAuthorization* ClusterUpdate::release_desired_binary_authorization() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_binary_authorization)
  
  ::google::container::v1::BinaryAuthorization* temp = desired_binary_authorization_;
  desired_binary_authorization_ = nullptr;
  return temp;
}
inline ::google::container::v1::BinaryAuthorization* ClusterUpdate::mutable_desired_binary_authorization() {
  
  if (desired_binary_authorization_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::BinaryAuthorization>(GetArenaNoVirtual());
    desired_binary_authorization_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_binary_authorization)
  return desired_binary_authorization_;
}
inline void ClusterUpdate::set_allocated_desired_binary_authorization(::google::container::v1::BinaryAuthorization* desired_binary_authorization) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_binary_authorization_;
  }
  if (desired_binary_authorization) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_binary_authorization = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_binary_authorization, submessage_arena);
    }
    
  } else {
    
  }
  desired_binary_authorization_ = desired_binary_authorization;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_binary_authorization)
}

// string desired_logging_service = 19;
inline void ClusterUpdate::clear_desired_logging_service() {
  desired_logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_logging_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_logging_service)
  return desired_logging_service_.GetNoArena();
}
inline void ClusterUpdate::set_desired_logging_service(const ::std::string& value) {
  
  desired_logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_logging_service)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_logging_service(::std::string&& value) {
  
  desired_logging_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_logging_service)
}
#endif
inline void ClusterUpdate::set_desired_logging_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desired_logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_logging_service)
}
inline void ClusterUpdate::set_desired_logging_service(const char* value, size_t size) {
  
  desired_logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_logging_service)
}
inline ::std::string* ClusterUpdate::mutable_desired_logging_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_logging_service)
  return desired_logging_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_logging_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_logging_service)
  
  return desired_logging_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_logging_service(::std::string* desired_logging_service) {
  if (desired_logging_service != nullptr) {
    
  } else {
    
  }
  desired_logging_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_logging_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_logging_service)
}

// .google.container.v1.ResourceUsageExportConfig desired_resource_usage_export_config = 21;
inline bool ClusterUpdate::has_desired_resource_usage_export_config() const {
  return this != internal_default_instance() && desired_resource_usage_export_config_ != nullptr;
}
inline void ClusterUpdate::clear_desired_resource_usage_export_config() {
  if (GetArenaNoVirtual() == nullptr && desired_resource_usage_export_config_ != nullptr) {
    delete desired_resource_usage_export_config_;
  }
  desired_resource_usage_export_config_ = nullptr;
}
inline const ::google::container::v1::ResourceUsageExportConfig& ClusterUpdate::desired_resource_usage_export_config() const {
  const ::google::container::v1::ResourceUsageExportConfig* p = desired_resource_usage_export_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_resource_usage_export_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ResourceUsageExportConfig*>(
      &::google::container::v1::_ResourceUsageExportConfig_default_instance_);
}
inline ::google::container::v1::ResourceUsageExportConfig* ClusterUpdate::release_desired_resource_usage_export_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_resource_usage_export_config)
  
  ::google::container::v1::ResourceUsageExportConfig* temp = desired_resource_usage_export_config_;
  desired_resource_usage_export_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::ResourceUsageExportConfig* ClusterUpdate::mutable_desired_resource_usage_export_config() {
  
  if (desired_resource_usage_export_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ResourceUsageExportConfig>(GetArenaNoVirtual());
    desired_resource_usage_export_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_resource_usage_export_config)
  return desired_resource_usage_export_config_;
}
inline void ClusterUpdate::set_allocated_desired_resource_usage_export_config(::google::container::v1::ResourceUsageExportConfig* desired_resource_usage_export_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_resource_usage_export_config_;
  }
  if (desired_resource_usage_export_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_resource_usage_export_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_resource_usage_export_config, submessage_arena);
    }
    
  } else {
    
  }
  desired_resource_usage_export_config_ = desired_resource_usage_export_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_resource_usage_export_config)
}

// .google.container.v1.VerticalPodAutoscaling desired_vertical_pod_autoscaling = 22;
inline bool ClusterUpdate::has_desired_vertical_pod_autoscaling() const {
  return this != internal_default_instance() && desired_vertical_pod_autoscaling_ != nullptr;
}
inline void ClusterUpdate::clear_desired_vertical_pod_autoscaling() {
  if (GetArenaNoVirtual() == nullptr && desired_vertical_pod_autoscaling_ != nullptr) {
    delete desired_vertical_pod_autoscaling_;
  }
  desired_vertical_pod_autoscaling_ = nullptr;
}
inline const ::google::container::v1::VerticalPodAutoscaling& ClusterUpdate::desired_vertical_pod_autoscaling() const {
  const ::google::container::v1::VerticalPodAutoscaling* p = desired_vertical_pod_autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_vertical_pod_autoscaling)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::VerticalPodAutoscaling*>(
      &::google::container::v1::_VerticalPodAutoscaling_default_instance_);
}
inline ::google::container::v1::VerticalPodAutoscaling* ClusterUpdate::release_desired_vertical_pod_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_vertical_pod_autoscaling)
  
  ::google::container::v1::VerticalPodAutoscaling* temp = desired_vertical_pod_autoscaling_;
  desired_vertical_pod_autoscaling_ = nullptr;
  return temp;
}
inline ::google::container::v1::VerticalPodAutoscaling* ClusterUpdate::mutable_desired_vertical_pod_autoscaling() {
  
  if (desired_vertical_pod_autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::VerticalPodAutoscaling>(GetArenaNoVirtual());
    desired_vertical_pod_autoscaling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_vertical_pod_autoscaling)
  return desired_vertical_pod_autoscaling_;
}
inline void ClusterUpdate::set_allocated_desired_vertical_pod_autoscaling(::google::container::v1::VerticalPodAutoscaling* desired_vertical_pod_autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_vertical_pod_autoscaling_;
  }
  if (desired_vertical_pod_autoscaling) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_vertical_pod_autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_vertical_pod_autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  desired_vertical_pod_autoscaling_ = desired_vertical_pod_autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_vertical_pod_autoscaling)
}

// .google.container.v1.PrivateClusterConfig desired_private_cluster_config = 25;
inline bool ClusterUpdate::has_desired_private_cluster_config() const {
  return this != internal_default_instance() && desired_private_cluster_config_ != nullptr;
}
inline void ClusterUpdate::clear_desired_private_cluster_config() {
  if (GetArenaNoVirtual() == nullptr && desired_private_cluster_config_ != nullptr) {
    delete desired_private_cluster_config_;
  }
  desired_private_cluster_config_ = nullptr;
}
inline const ::google::container::v1::PrivateClusterConfig& ClusterUpdate::desired_private_cluster_config() const {
  const ::google::container::v1::PrivateClusterConfig* p = desired_private_cluster_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_private_cluster_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::PrivateClusterConfig*>(
      &::google::container::v1::_PrivateClusterConfig_default_instance_);
}
inline ::google::container::v1::PrivateClusterConfig* ClusterUpdate::release_desired_private_cluster_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_private_cluster_config)
  
  ::google::container::v1::PrivateClusterConfig* temp = desired_private_cluster_config_;
  desired_private_cluster_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::PrivateClusterConfig* ClusterUpdate::mutable_desired_private_cluster_config() {
  
  if (desired_private_cluster_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::PrivateClusterConfig>(GetArenaNoVirtual());
    desired_private_cluster_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_private_cluster_config)
  return desired_private_cluster_config_;
}
inline void ClusterUpdate::set_allocated_desired_private_cluster_config(::google::container::v1::PrivateClusterConfig* desired_private_cluster_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_private_cluster_config_;
  }
  if (desired_private_cluster_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_private_cluster_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_private_cluster_config, submessage_arena);
    }
    
  } else {
    
  }
  desired_private_cluster_config_ = desired_private_cluster_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_private_cluster_config)
}

// .google.container.v1.IntraNodeVisibilityConfig desired_intra_node_visibility_config = 26;
inline bool ClusterUpdate::has_desired_intra_node_visibility_config() const {
  return this != internal_default_instance() && desired_intra_node_visibility_config_ != nullptr;
}
inline void ClusterUpdate::clear_desired_intra_node_visibility_config() {
  if (GetArenaNoVirtual() == nullptr && desired_intra_node_visibility_config_ != nullptr) {
    delete desired_intra_node_visibility_config_;
  }
  desired_intra_node_visibility_config_ = nullptr;
}
inline const ::google::container::v1::IntraNodeVisibilityConfig& ClusterUpdate::desired_intra_node_visibility_config() const {
  const ::google::container::v1::IntraNodeVisibilityConfig* p = desired_intra_node_visibility_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_intra_node_visibility_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::IntraNodeVisibilityConfig*>(
      &::google::container::v1::_IntraNodeVisibilityConfig_default_instance_);
}
inline ::google::container::v1::IntraNodeVisibilityConfig* ClusterUpdate::release_desired_intra_node_visibility_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_intra_node_visibility_config)
  
  ::google::container::v1::IntraNodeVisibilityConfig* temp = desired_intra_node_visibility_config_;
  desired_intra_node_visibility_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::IntraNodeVisibilityConfig* ClusterUpdate::mutable_desired_intra_node_visibility_config() {
  
  if (desired_intra_node_visibility_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::IntraNodeVisibilityConfig>(GetArenaNoVirtual());
    desired_intra_node_visibility_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_intra_node_visibility_config)
  return desired_intra_node_visibility_config_;
}
inline void ClusterUpdate::set_allocated_desired_intra_node_visibility_config(::google::container::v1::IntraNodeVisibilityConfig* desired_intra_node_visibility_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_intra_node_visibility_config_;
  }
  if (desired_intra_node_visibility_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_intra_node_visibility_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_intra_node_visibility_config, submessage_arena);
    }
    
  } else {
    
  }
  desired_intra_node_visibility_config_ = desired_intra_node_visibility_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_intra_node_visibility_config)
}

// .google.container.v1.DefaultSnatStatus desired_default_snat_status = 28;
inline bool ClusterUpdate::has_desired_default_snat_status() const {
  return this != internal_default_instance() && desired_default_snat_status_ != nullptr;
}
inline void ClusterUpdate::clear_desired_default_snat_status() {
  if (GetArenaNoVirtual() == nullptr && desired_default_snat_status_ != nullptr) {
    delete desired_default_snat_status_;
  }
  desired_default_snat_status_ = nullptr;
}
inline const ::google::container::v1::DefaultSnatStatus& ClusterUpdate::desired_default_snat_status() const {
  const ::google::container::v1::DefaultSnatStatus* p = desired_default_snat_status_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_default_snat_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::DefaultSnatStatus*>(
      &::google::container::v1::_DefaultSnatStatus_default_instance_);
}
inline ::google::container::v1::DefaultSnatStatus* ClusterUpdate::release_desired_default_snat_status() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_default_snat_status)
  
  ::google::container::v1::DefaultSnatStatus* temp = desired_default_snat_status_;
  desired_default_snat_status_ = nullptr;
  return temp;
}
inline ::google::container::v1::DefaultSnatStatus* ClusterUpdate::mutable_desired_default_snat_status() {
  
  if (desired_default_snat_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::DefaultSnatStatus>(GetArenaNoVirtual());
    desired_default_snat_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_default_snat_status)
  return desired_default_snat_status_;
}
inline void ClusterUpdate::set_allocated_desired_default_snat_status(::google::container::v1::DefaultSnatStatus* desired_default_snat_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_default_snat_status_;
  }
  if (desired_default_snat_status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_default_snat_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_default_snat_status, submessage_arena);
    }
    
  } else {
    
  }
  desired_default_snat_status_ = desired_default_snat_status;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_default_snat_status)
}

// .google.container.v1.ReleaseChannel desired_release_channel = 31;
inline bool ClusterUpdate::has_desired_release_channel() const {
  return this != internal_default_instance() && desired_release_channel_ != nullptr;
}
inline void ClusterUpdate::clear_desired_release_channel() {
  if (GetArenaNoVirtual() == nullptr && desired_release_channel_ != nullptr) {
    delete desired_release_channel_;
  }
  desired_release_channel_ = nullptr;
}
inline const ::google::container::v1::ReleaseChannel& ClusterUpdate::desired_release_channel() const {
  const ::google::container::v1::ReleaseChannel* p = desired_release_channel_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_release_channel)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ReleaseChannel*>(
      &::google::container::v1::_ReleaseChannel_default_instance_);
}
inline ::google::container::v1::ReleaseChannel* ClusterUpdate::release_desired_release_channel() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_release_channel)
  
  ::google::container::v1::ReleaseChannel* temp = desired_release_channel_;
  desired_release_channel_ = nullptr;
  return temp;
}
inline ::google::container::v1::ReleaseChannel* ClusterUpdate::mutable_desired_release_channel() {
  
  if (desired_release_channel_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ReleaseChannel>(GetArenaNoVirtual());
    desired_release_channel_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_release_channel)
  return desired_release_channel_;
}
inline void ClusterUpdate::set_allocated_desired_release_channel(::google::container::v1::ReleaseChannel* desired_release_channel) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete desired_release_channel_;
  }
  if (desired_release_channel) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      desired_release_channel = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, desired_release_channel, submessage_arena);
    }
    
  } else {
    
  }
  desired_release_channel_ = desired_release_channel;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_release_channel)
}

// string desired_master_version = 100;
inline void ClusterUpdate::clear_desired_master_version() {
  desired_master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClusterUpdate::desired_master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterUpdate.desired_master_version)
  return desired_master_version_.GetNoArena();
}
inline void ClusterUpdate::set_desired_master_version(const ::std::string& value) {
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterUpdate.desired_master_version)
}
#if LANG_CXX11
inline void ClusterUpdate::set_desired_master_version(::std::string&& value) {
  
  desired_master_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ClusterUpdate.desired_master_version)
}
#endif
inline void ClusterUpdate::set_desired_master_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterUpdate.desired_master_version)
}
inline void ClusterUpdate::set_desired_master_version(const char* value, size_t size) {
  
  desired_master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterUpdate.desired_master_version)
}
inline ::std::string* ClusterUpdate::mutable_desired_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterUpdate.desired_master_version)
  return desired_master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterUpdate::release_desired_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterUpdate.desired_master_version)
  
  return desired_master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterUpdate::set_allocated_desired_master_version(::std::string* desired_master_version) {
  if (desired_master_version != nullptr) {
    
  } else {
    
  }
  desired_master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), desired_master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterUpdate.desired_master_version)
}

// -------------------------------------------------------------------

// Operation

// string name = 1;
inline void Operation::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.name)
  return name_.GetNoArena();
}
inline void Operation::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.name)
}
#if LANG_CXX11
inline void Operation::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.name)
}
#endif
inline void Operation::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.name)
}
inline void Operation::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.name)
}
inline ::std::string* Operation::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.name)
}

// string zone = 2 [deprecated = true];
inline void Operation::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.zone)
  return zone_.GetNoArena();
}
inline void Operation::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.zone)
}
#if LANG_CXX11
inline void Operation::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.zone)
}
#endif
inline void Operation::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.zone)
}
inline void Operation::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.zone)
}
inline ::std::string* Operation::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.zone)
}

// .google.container.v1.Operation.Type operation_type = 3;
inline void Operation::clear_operation_type() {
  operation_type_ = 0;
}
inline ::google::container::v1::Operation_Type Operation::operation_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.operation_type)
  return static_cast< ::google::container::v1::Operation_Type >(operation_type_);
}
inline void Operation::set_operation_type(::google::container::v1::Operation_Type value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.operation_type)
}

// .google.container.v1.Operation.Status status = 4;
inline void Operation::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::Operation_Status Operation::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.status)
  return static_cast< ::google::container::v1::Operation_Status >(status_);
}
inline void Operation::set_status(::google::container::v1::Operation_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.status)
}

// string detail = 8;
inline void Operation::clear_detail() {
  detail_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::detail() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.detail)
  return detail_.GetNoArena();
}
inline void Operation::set_detail(const ::std::string& value) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.detail)
}
#if LANG_CXX11
inline void Operation::set_detail(::std::string&& value) {
  
  detail_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.detail)
}
#endif
inline void Operation::set_detail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.detail)
}
inline void Operation::set_detail(const char* value, size_t size) {
  
  detail_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.detail)
}
inline ::std::string* Operation::mutable_detail() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.detail)
  return detail_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_detail() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.detail)
  
  return detail_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_detail(::std::string* detail) {
  if (detail != nullptr) {
    
  } else {
    
  }
  detail_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), detail);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.detail)
}

// string status_message = 5 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline void Operation::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.status_message)
  return status_message_.GetNoArena();
}
inline void Operation::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.status_message)
}
#if LANG_CXX11
inline void Operation::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.status_message)
}
#endif
inline void Operation::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.status_message)
}
inline void Operation::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.status_message)
}
inline ::std::string* Operation::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_status_message(::std::string* status_message) {
  if (status_message != nullptr) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.status_message)
}

// string self_link = 6;
inline void Operation::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.self_link)
  return self_link_.GetNoArena();
}
inline void Operation::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.self_link)
}
#if LANG_CXX11
inline void Operation::set_self_link(::std::string&& value) {
  
  self_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.self_link)
}
#endif
inline void Operation::set_self_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.self_link)
}
inline void Operation::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.self_link)
}
inline ::std::string* Operation::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_self_link(::std::string* self_link) {
  if (self_link != nullptr) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.self_link)
}

// string target_link = 7;
inline void Operation::clear_target_link() {
  target_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::target_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.target_link)
  return target_link_.GetNoArena();
}
inline void Operation::set_target_link(const ::std::string& value) {
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.target_link)
}
#if LANG_CXX11
inline void Operation::set_target_link(::std::string&& value) {
  
  target_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.target_link)
}
#endif
inline void Operation::set_target_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.target_link)
}
inline void Operation::set_target_link(const char* value, size_t size) {
  
  target_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.target_link)
}
inline ::std::string* Operation::mutable_target_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.target_link)
  return target_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_target_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.target_link)
  
  return target_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_target_link(::std::string* target_link) {
  if (target_link != nullptr) {
    
  } else {
    
  }
  target_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), target_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.target_link)
}

// string location = 9;
inline void Operation::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::location() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.location)
  return location_.GetNoArena();
}
inline void Operation::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.location)
}
#if LANG_CXX11
inline void Operation::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.location)
}
#endif
inline void Operation::set_location(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.location)
}
inline void Operation::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.location)
}
inline ::std::string* Operation::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_location() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_location(::std::string* location) {
  if (location != nullptr) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.location)
}

// string start_time = 10;
inline void Operation::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::start_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.start_time)
  return start_time_.GetNoArena();
}
inline void Operation::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.start_time)
}
#if LANG_CXX11
inline void Operation::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.start_time)
}
#endif
inline void Operation::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.start_time)
}
inline void Operation::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.start_time)
}
inline ::std::string* Operation::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_start_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_start_time(::std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.start_time)
}

// string end_time = 11;
inline void Operation::clear_end_time() {
  end_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Operation::end_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.end_time)
  return end_time_.GetNoArena();
}
inline void Operation::set_end_time(const ::std::string& value) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Operation.end_time)
}
#if LANG_CXX11
inline void Operation::set_end_time(::std::string&& value) {
  
  end_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Operation.end_time)
}
#endif
inline void Operation::set_end_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Operation.end_time)
}
inline void Operation::set_end_time(const char* value, size_t size) {
  
  end_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Operation.end_time)
}
inline ::std::string* Operation::mutable_end_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.end_time)
  return end_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Operation::release_end_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.end_time)
  
  return end_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Operation::set_allocated_end_time(::std::string* end_time) {
  if (end_time != nullptr) {
    
  } else {
    
  }
  end_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), end_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.end_time)
}

// .google.container.v1.OperationProgress progress = 12 [(.google.api.field_behavior) = OUTPUT_ONLY];
inline bool Operation::has_progress() const {
  return this != internal_default_instance() && progress_ != nullptr;
}
inline void Operation::clear_progress() {
  if (GetArenaNoVirtual() == nullptr && progress_ != nullptr) {
    delete progress_;
  }
  progress_ = nullptr;
}
inline const ::google::container::v1::OperationProgress& Operation::progress() const {
  const ::google::container::v1::OperationProgress* p = progress_;
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.progress)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::OperationProgress*>(
      &::google::container::v1::_OperationProgress_default_instance_);
}
inline ::google::container::v1::OperationProgress* Operation::release_progress() {
  // @@protoc_insertion_point(field_release:google.container.v1.Operation.progress)
  
  ::google::container::v1::OperationProgress* temp = progress_;
  progress_ = nullptr;
  return temp;
}
inline ::google::container::v1::OperationProgress* Operation::mutable_progress() {
  
  if (progress_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::OperationProgress>(GetArenaNoVirtual());
    progress_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.progress)
  return progress_;
}
inline void Operation::set_allocated_progress(::google::container::v1::OperationProgress* progress) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete progress_;
  }
  if (progress) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      progress = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, progress, submessage_arena);
    }
    
  } else {
    
  }
  progress_ = progress;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Operation.progress)
}

// repeated .google.container.v1.StatusCondition cluster_conditions = 13;
inline int Operation::cluster_conditions_size() const {
  return cluster_conditions_.size();
}
inline void Operation::clear_cluster_conditions() {
  cluster_conditions_.Clear();
}
inline ::google::container::v1::StatusCondition* Operation::mutable_cluster_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.cluster_conditions)
  return cluster_conditions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >*
Operation::mutable_cluster_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Operation.cluster_conditions)
  return &cluster_conditions_;
}
inline const ::google::container::v1::StatusCondition& Operation::cluster_conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.cluster_conditions)
  return cluster_conditions_.Get(index);
}
inline ::google::container::v1::StatusCondition* Operation::add_cluster_conditions() {
  // @@protoc_insertion_point(field_add:google.container.v1.Operation.cluster_conditions)
  return cluster_conditions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >&
Operation::cluster_conditions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Operation.cluster_conditions)
  return cluster_conditions_;
}

// repeated .google.container.v1.StatusCondition nodepool_conditions = 14;
inline int Operation::nodepool_conditions_size() const {
  return nodepool_conditions_.size();
}
inline void Operation::clear_nodepool_conditions() {
  nodepool_conditions_.Clear();
}
inline ::google::container::v1::StatusCondition* Operation::mutable_nodepool_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.Operation.nodepool_conditions)
  return nodepool_conditions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >*
Operation::mutable_nodepool_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.Operation.nodepool_conditions)
  return &nodepool_conditions_;
}
inline const ::google::container::v1::StatusCondition& Operation::nodepool_conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.Operation.nodepool_conditions)
  return nodepool_conditions_.Get(index);
}
inline ::google::container::v1::StatusCondition* Operation::add_nodepool_conditions() {
  // @@protoc_insertion_point(field_add:google.container.v1.Operation.nodepool_conditions)
  return nodepool_conditions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >&
Operation::nodepool_conditions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.Operation.nodepool_conditions)
  return nodepool_conditions_;
}

// -------------------------------------------------------------------

// OperationProgress_Metric

// string name = 1 [(.google.api.field_behavior) = REQUIRED];
inline void OperationProgress_Metric::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperationProgress_Metric::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.OperationProgress.Metric.name)
  return name_.GetNoArena();
}
inline void OperationProgress_Metric::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.OperationProgress.Metric.name)
}
#if LANG_CXX11
inline void OperationProgress_Metric::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.OperationProgress.Metric.name)
}
#endif
inline void OperationProgress_Metric::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.OperationProgress.Metric.name)
}
inline void OperationProgress_Metric::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.OperationProgress.Metric.name)
}
inline ::std::string* OperationProgress_Metric::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.OperationProgress.Metric.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperationProgress_Metric::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.OperationProgress.Metric.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperationProgress_Metric::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.OperationProgress.Metric.name)
}

// int64 int_value = 2;
inline bool OperationProgress_Metric::has_int_value() const {
  return value_case() == kIntValue;
}
inline void OperationProgress_Metric::set_has_int_value() {
  _oneof_case_[0] = kIntValue;
}
inline void OperationProgress_Metric::clear_int_value() {
  if (has_int_value()) {
    value_.int_value_ = PROTOBUF_LONGLONG(0);
    clear_has_value();
  }
}
inline ::google::protobuf::int64 OperationProgress_Metric::int_value() const {
  // @@protoc_insertion_point(field_get:google.container.v1.OperationProgress.Metric.int_value)
  if (has_int_value()) {
    return value_.int_value_;
  }
  return PROTOBUF_LONGLONG(0);
}
inline void OperationProgress_Metric::set_int_value(::google::protobuf::int64 value) {
  if (!has_int_value()) {
    clear_value();
    set_has_int_value();
  }
  value_.int_value_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.OperationProgress.Metric.int_value)
}

// double double_value = 3;
inline bool OperationProgress_Metric::has_double_value() const {
  return value_case() == kDoubleValue;
}
inline void OperationProgress_Metric::set_has_double_value() {
  _oneof_case_[0] = kDoubleValue;
}
inline void OperationProgress_Metric::clear_double_value() {
  if (has_double_value()) {
    value_.double_value_ = 0;
    clear_has_value();
  }
}
inline double OperationProgress_Metric::double_value() const {
  // @@protoc_insertion_point(field_get:google.container.v1.OperationProgress.Metric.double_value)
  if (has_double_value()) {
    return value_.double_value_;
  }
  return 0;
}
inline void OperationProgress_Metric::set_double_value(double value) {
  if (!has_double_value()) {
    clear_value();
    set_has_double_value();
  }
  value_.double_value_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.OperationProgress.Metric.double_value)
}

// string string_value = 4;
inline bool OperationProgress_Metric::has_string_value() const {
  return value_case() == kStringValue;
}
inline void OperationProgress_Metric::set_has_string_value() {
  _oneof_case_[0] = kStringValue;
}
inline void OperationProgress_Metric::clear_string_value() {
  if (has_string_value()) {
    value_.string_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_value();
  }
}
inline const ::std::string& OperationProgress_Metric::string_value() const {
  // @@protoc_insertion_point(field_get:google.container.v1.OperationProgress.Metric.string_value)
  if (has_string_value()) {
    return value_.string_value_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void OperationProgress_Metric::set_string_value(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.OperationProgress.Metric.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.OperationProgress.Metric.string_value)
}
#if LANG_CXX11
inline void OperationProgress_Metric::set_string_value(::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.OperationProgress.Metric.string_value)
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.OperationProgress.Metric.string_value)
}
#endif
inline void OperationProgress_Metric::set_string_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.OperationProgress.Metric.string_value)
}
inline void OperationProgress_Metric::set_string_value(const char* value, size_t size) {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  value_.string_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.OperationProgress.Metric.string_value)
}
inline ::std::string* OperationProgress_Metric::mutable_string_value() {
  if (!has_string_value()) {
    clear_value();
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.OperationProgress.Metric.string_value)
  return value_.string_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperationProgress_Metric::release_string_value() {
  // @@protoc_insertion_point(field_release:google.container.v1.OperationProgress.Metric.string_value)
  if (has_string_value()) {
    clear_has_value();
    return value_.string_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void OperationProgress_Metric::set_allocated_string_value(::std::string* string_value) {
  if (has_value()) {
    clear_value();
  }
  if (string_value != nullptr) {
    set_has_string_value();
    value_.string_value_.UnsafeSetDefault(string_value);
  }
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.OperationProgress.Metric.string_value)
}

inline bool OperationProgress_Metric::has_value() const {
  return value_case() != VALUE_NOT_SET;
}
inline void OperationProgress_Metric::clear_has_value() {
  _oneof_case_[0] = VALUE_NOT_SET;
}
inline OperationProgress_Metric::ValueCase OperationProgress_Metric::value_case() const {
  return OperationProgress_Metric::ValueCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// OperationProgress

// string name = 1;
inline void OperationProgress::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperationProgress::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.OperationProgress.name)
  return name_.GetNoArena();
}
inline void OperationProgress::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.OperationProgress.name)
}
#if LANG_CXX11
inline void OperationProgress::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.OperationProgress.name)
}
#endif
inline void OperationProgress::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.OperationProgress.name)
}
inline void OperationProgress::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.OperationProgress.name)
}
inline ::std::string* OperationProgress::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.OperationProgress.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperationProgress::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.OperationProgress.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperationProgress::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.OperationProgress.name)
}

// .google.container.v1.Operation.Status status = 2;
inline void OperationProgress::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::Operation_Status OperationProgress::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.OperationProgress.status)
  return static_cast< ::google::container::v1::Operation_Status >(status_);
}
inline void OperationProgress::set_status(::google::container::v1::Operation_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.OperationProgress.status)
}

// repeated .google.container.v1.OperationProgress.Metric metrics = 3;
inline int OperationProgress::metrics_size() const {
  return metrics_.size();
}
inline void OperationProgress::clear_metrics() {
  metrics_.Clear();
}
inline ::google::container::v1::OperationProgress_Metric* OperationProgress::mutable_metrics(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.OperationProgress.metrics)
  return metrics_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress_Metric >*
OperationProgress::mutable_metrics() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.OperationProgress.metrics)
  return &metrics_;
}
inline const ::google::container::v1::OperationProgress_Metric& OperationProgress::metrics(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.OperationProgress.metrics)
  return metrics_.Get(index);
}
inline ::google::container::v1::OperationProgress_Metric* OperationProgress::add_metrics() {
  // @@protoc_insertion_point(field_add:google.container.v1.OperationProgress.metrics)
  return metrics_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress_Metric >&
OperationProgress::metrics() const {
  // @@protoc_insertion_point(field_list:google.container.v1.OperationProgress.metrics)
  return metrics_;
}

// repeated .google.container.v1.OperationProgress stages = 4;
inline int OperationProgress::stages_size() const {
  return stages_.size();
}
inline void OperationProgress::clear_stages() {
  stages_.Clear();
}
inline ::google::container::v1::OperationProgress* OperationProgress::mutable_stages(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.OperationProgress.stages)
  return stages_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress >*
OperationProgress::mutable_stages() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.OperationProgress.stages)
  return &stages_;
}
inline const ::google::container::v1::OperationProgress& OperationProgress::stages(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.OperationProgress.stages)
  return stages_.Get(index);
}
inline ::google::container::v1::OperationProgress* OperationProgress::add_stages() {
  // @@protoc_insertion_point(field_add:google.container.v1.OperationProgress.stages)
  return stages_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::OperationProgress >&
OperationProgress::stages() const {
  // @@protoc_insertion_point(field_list:google.container.v1.OperationProgress.stages)
  return stages_;
}

// -------------------------------------------------------------------

// CreateClusterRequest

// string project_id = 1 [deprecated = true];
inline void CreateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CreateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateClusterRequest.project_id)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateClusterRequest.project_id)
}
#endif
inline void CreateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateClusterRequest.project_id)
}
inline void CreateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateClusterRequest.project_id)
}
inline ::std::string* CreateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void CreateClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void CreateClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateClusterRequest.zone)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateClusterRequest.zone)
}
#endif
inline void CreateClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateClusterRequest.zone)
}
inline void CreateClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateClusterRequest.zone)
}
inline ::std::string* CreateClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.zone)
}

// .google.container.v1.Cluster cluster = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateClusterRequest::has_cluster() const {
  return this != internal_default_instance() && cluster_ != nullptr;
}
inline void CreateClusterRequest::clear_cluster() {
  if (GetArenaNoVirtual() == nullptr && cluster_ != nullptr) {
    delete cluster_;
  }
  cluster_ = nullptr;
}
inline const ::google::container::v1::Cluster& CreateClusterRequest::cluster() const {
  const ::google::container::v1::Cluster* p = cluster_;
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.cluster)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::Cluster*>(
      &::google::container::v1::_Cluster_default_instance_);
}
inline ::google::container::v1::Cluster* CreateClusterRequest::release_cluster() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.cluster)
  
  ::google::container::v1::Cluster* temp = cluster_;
  cluster_ = nullptr;
  return temp;
}
inline ::google::container::v1::Cluster* CreateClusterRequest::mutable_cluster() {
  
  if (cluster_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::Cluster>(GetArenaNoVirtual());
    cluster_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.cluster)
  return cluster_;
}
inline void CreateClusterRequest::set_allocated_cluster(::google::container::v1::Cluster* cluster) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete cluster_;
  }
  if (cluster) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      cluster = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, cluster, submessage_arena);
    }
    
  } else {
    
  }
  cluster_ = cluster;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.cluster)
}

// string parent = 5;
inline void CreateClusterRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateClusterRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateClusterRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateClusterRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateClusterRequest.parent)
}
#if LANG_CXX11
inline void CreateClusterRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateClusterRequest.parent)
}
#endif
inline void CreateClusterRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateClusterRequest.parent)
}
inline void CreateClusterRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateClusterRequest.parent)
}
inline ::std::string* CreateClusterRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateClusterRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateClusterRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateClusterRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateClusterRequest::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateClusterRequest.parent)
}

// -------------------------------------------------------------------

// GetClusterRequest

// string project_id = 1 [deprecated = true];
inline void GetClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.project_id)
}
#if LANG_CXX11
inline void GetClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.project_id)
}
#endif
inline void GetClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.project_id)
}
inline void GetClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.project_id)
}
inline ::std::string* GetClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void GetClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void GetClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.zone)
}
#if LANG_CXX11
inline void GetClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.zone)
}
#endif
inline void GetClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.zone)
}
inline void GetClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.zone)
}
inline ::std::string* GetClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void GetClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void GetClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.cluster_id)
}
#if LANG_CXX11
inline void GetClusterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.cluster_id)
}
#endif
inline void GetClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.cluster_id)
}
inline void GetClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.cluster_id)
}
inline ::std::string* GetClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.cluster_id)
}

// string name = 5;
inline void GetClusterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetClusterRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetClusterRequest.name)
  return name_.GetNoArena();
}
inline void GetClusterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetClusterRequest.name)
}
#if LANG_CXX11
inline void GetClusterRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetClusterRequest.name)
}
#endif
inline void GetClusterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetClusterRequest.name)
}
inline void GetClusterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetClusterRequest.name)
}
inline ::std::string* GetClusterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetClusterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetClusterRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetClusterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetClusterRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetClusterRequest.name)
}

// -------------------------------------------------------------------

// UpdateClusterRequest

// string project_id = 1 [deprecated = true];
inline void UpdateClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void UpdateClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.project_id)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.project_id)
}
#endif
inline void UpdateClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.project_id)
}
inline void UpdateClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.project_id)
}
inline ::std::string* UpdateClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void UpdateClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void UpdateClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.zone)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.zone)
}
#endif
inline void UpdateClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.zone)
}
inline void UpdateClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.zone)
}
inline ::std::string* UpdateClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void UpdateClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void UpdateClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.cluster_id)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.cluster_id)
}
#endif
inline void UpdateClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.cluster_id)
}
inline void UpdateClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.cluster_id)
}
inline ::std::string* UpdateClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.cluster_id)
}

// .google.container.v1.ClusterUpdate update = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool UpdateClusterRequest::has_update() const {
  return this != internal_default_instance() && update_ != nullptr;
}
inline void UpdateClusterRequest::clear_update() {
  if (GetArenaNoVirtual() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
}
inline const ::google::container::v1::ClusterUpdate& UpdateClusterRequest::update() const {
  const ::google::container::v1::ClusterUpdate* p = update_;
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.update)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ClusterUpdate*>(
      &::google::container::v1::_ClusterUpdate_default_instance_);
}
inline ::google::container::v1::ClusterUpdate* UpdateClusterRequest::release_update() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.update)
  
  ::google::container::v1::ClusterUpdate* temp = update_;
  update_ = nullptr;
  return temp;
}
inline ::google::container::v1::ClusterUpdate* UpdateClusterRequest::mutable_update() {
  
  if (update_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ClusterUpdate>(GetArenaNoVirtual());
    update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.update)
  return update_;
}
inline void UpdateClusterRequest::set_allocated_update(::google::container::v1::ClusterUpdate* update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete update_;
  }
  if (update) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.update)
}

// string name = 5;
inline void UpdateClusterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateClusterRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateClusterRequest.name)
  return name_.GetNoArena();
}
inline void UpdateClusterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateClusterRequest.name)
}
#if LANG_CXX11
inline void UpdateClusterRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateClusterRequest.name)
}
#endif
inline void UpdateClusterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateClusterRequest.name)
}
inline void UpdateClusterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateClusterRequest.name)
}
inline ::std::string* UpdateClusterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateClusterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateClusterRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateClusterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateClusterRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateClusterRequest.name)
}

// -------------------------------------------------------------------

// UpdateNodePoolRequest

// string project_id = 1 [deprecated = true];
inline void UpdateNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.project_id)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.project_id)
}
#endif
inline void UpdateNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.project_id)
}
inline void UpdateNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.project_id)
}
inline ::std::string* UpdateNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void UpdateNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.zone)
  return zone_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.zone)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.zone)
}
#endif
inline void UpdateNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.zone)
}
inline void UpdateNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.zone)
}
inline ::std::string* UpdateNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void UpdateNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
#endif
inline void UpdateNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
inline void UpdateNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.cluster_id)
}
inline ::std::string* UpdateNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.cluster_id)
}

// string node_pool_id = 4 [deprecated = true];
inline void UpdateNodePoolRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
#endif
inline void UpdateNodePoolRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
inline void UpdateNodePoolRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}
inline ::std::string* UpdateNodePoolRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != nullptr) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.node_pool_id)
}

// string node_version = 5 [(.google.api.field_behavior) = REQUIRED];
inline void UpdateNodePoolRequest::clear_node_version() {
  node_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::node_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.node_version)
  return node_version_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_node_version(const ::std::string& value) {
  
  node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.node_version)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_node_version(::std::string&& value) {
  
  node_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.node_version)
}
#endif
inline void UpdateNodePoolRequest::set_node_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.node_version)
}
inline void UpdateNodePoolRequest::set_node_version(const char* value, size_t size) {
  
  node_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.node_version)
}
inline ::std::string* UpdateNodePoolRequest::mutable_node_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.node_version)
  return node_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_node_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.node_version)
  
  return node_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_node_version(::std::string* node_version) {
  if (node_version != nullptr) {
    
  } else {
    
  }
  node_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.node_version)
}

// string image_type = 6 [(.google.api.field_behavior) = REQUIRED];
inline void UpdateNodePoolRequest::clear_image_type() {
  image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.image_type)
  return image_type_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_image_type(const ::std::string& value) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.image_type)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_image_type(::std::string&& value) {
  
  image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.image_type)
}
#endif
inline void UpdateNodePoolRequest::set_image_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.image_type)
}
inline void UpdateNodePoolRequest::set_image_type(const char* value, size_t size) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.image_type)
}
inline ::std::string* UpdateNodePoolRequest::mutable_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.image_type)
  return image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.image_type)
  
  return image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_image_type(::std::string* image_type) {
  if (image_type != nullptr) {
    
  } else {
    
  }
  image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.image_type)
}

// string name = 8;
inline void UpdateNodePoolRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateNodePoolRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.name)
  return name_.GetNoArena();
}
inline void UpdateNodePoolRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.name)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateNodePoolRequest.name)
}
#endif
inline void UpdateNodePoolRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.name)
}
inline void UpdateNodePoolRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.name)
}
inline ::std::string* UpdateNodePoolRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateNodePoolRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateNodePoolRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.name)
}

// repeated string locations = 13;
inline int UpdateNodePoolRequest::locations_size() const {
  return locations_.size();
}
inline void UpdateNodePoolRequest::clear_locations() {
  locations_.Clear();
}
inline const ::std::string& UpdateNodePoolRequest::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.locations)
  return locations_.Get(index);
}
inline ::std::string* UpdateNodePoolRequest::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.locations)
  return locations_.Mutable(index);
}
inline void UpdateNodePoolRequest::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateNodePoolRequest.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void UpdateNodePoolRequest::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateNodePoolRequest.locations)
}
inline void UpdateNodePoolRequest::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateNodePoolRequest.locations)
}
inline ::std::string* UpdateNodePoolRequest::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.UpdateNodePoolRequest.locations)
  return locations_.Add();
}
inline void UpdateNodePoolRequest::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.UpdateNodePoolRequest.locations)
}
#if LANG_CXX11
inline void UpdateNodePoolRequest::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.UpdateNodePoolRequest.locations)
}
#endif
inline void UpdateNodePoolRequest::add_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.UpdateNodePoolRequest.locations)
}
inline void UpdateNodePoolRequest::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.UpdateNodePoolRequest.locations)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
UpdateNodePoolRequest::locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.UpdateNodePoolRequest.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
UpdateNodePoolRequest::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.UpdateNodePoolRequest.locations)
  return &locations_;
}

// .google.container.v1.WorkloadMetadataConfig workload_metadata_config = 14;
inline bool UpdateNodePoolRequest::has_workload_metadata_config() const {
  return this != internal_default_instance() && workload_metadata_config_ != nullptr;
}
inline void UpdateNodePoolRequest::clear_workload_metadata_config() {
  if (GetArenaNoVirtual() == nullptr && workload_metadata_config_ != nullptr) {
    delete workload_metadata_config_;
  }
  workload_metadata_config_ = nullptr;
}
inline const ::google::container::v1::WorkloadMetadataConfig& UpdateNodePoolRequest::workload_metadata_config() const {
  const ::google::container::v1::WorkloadMetadataConfig* p = workload_metadata_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.workload_metadata_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::WorkloadMetadataConfig*>(
      &::google::container::v1::_WorkloadMetadataConfig_default_instance_);
}
inline ::google::container::v1::WorkloadMetadataConfig* UpdateNodePoolRequest::release_workload_metadata_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.workload_metadata_config)
  
  ::google::container::v1::WorkloadMetadataConfig* temp = workload_metadata_config_;
  workload_metadata_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::WorkloadMetadataConfig* UpdateNodePoolRequest::mutable_workload_metadata_config() {
  
  if (workload_metadata_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::WorkloadMetadataConfig>(GetArenaNoVirtual());
    workload_metadata_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.workload_metadata_config)
  return workload_metadata_config_;
}
inline void UpdateNodePoolRequest::set_allocated_workload_metadata_config(::google::container::v1::WorkloadMetadataConfig* workload_metadata_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete workload_metadata_config_;
  }
  if (workload_metadata_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      workload_metadata_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, workload_metadata_config, submessage_arena);
    }
    
  } else {
    
  }
  workload_metadata_config_ = workload_metadata_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.workload_metadata_config)
}

// .google.container.v1.NodePool.UpgradeSettings upgrade_settings = 15;
inline bool UpdateNodePoolRequest::has_upgrade_settings() const {
  return this != internal_default_instance() && upgrade_settings_ != nullptr;
}
inline void UpdateNodePoolRequest::clear_upgrade_settings() {
  if (GetArenaNoVirtual() == nullptr && upgrade_settings_ != nullptr) {
    delete upgrade_settings_;
  }
  upgrade_settings_ = nullptr;
}
inline const ::google::container::v1::NodePool_UpgradeSettings& UpdateNodePoolRequest::upgrade_settings() const {
  const ::google::container::v1::NodePool_UpgradeSettings* p = upgrade_settings_;
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateNodePoolRequest.upgrade_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodePool_UpgradeSettings*>(
      &::google::container::v1::_NodePool_UpgradeSettings_default_instance_);
}
inline ::google::container::v1::NodePool_UpgradeSettings* UpdateNodePoolRequest::release_upgrade_settings() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateNodePoolRequest.upgrade_settings)
  
  ::google::container::v1::NodePool_UpgradeSettings* temp = upgrade_settings_;
  upgrade_settings_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodePool_UpgradeSettings* UpdateNodePoolRequest::mutable_upgrade_settings() {
  
  if (upgrade_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodePool_UpgradeSettings>(GetArenaNoVirtual());
    upgrade_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateNodePoolRequest.upgrade_settings)
  return upgrade_settings_;
}
inline void UpdateNodePoolRequest::set_allocated_upgrade_settings(::google::container::v1::NodePool_UpgradeSettings* upgrade_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upgrade_settings_;
  }
  if (upgrade_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upgrade_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upgrade_settings, submessage_arena);
    }
    
  } else {
    
  }
  upgrade_settings_ = upgrade_settings;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateNodePoolRequest.upgrade_settings)
}

// -------------------------------------------------------------------

// SetNodePoolAutoscalingRequest

// string project_id = 1 [deprecated = true];
inline void SetNodePoolAutoscalingRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolAutoscalingRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetNodePoolAutoscalingRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
#if LANG_CXX11
inline void SetNodePoolAutoscalingRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
#endif
inline void SetNodePoolAutoscalingRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
inline void SetNodePoolAutoscalingRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}
inline ::std::string* SetNodePoolAutoscalingRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolAutoscalingRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolAutoscalingRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetNodePoolAutoscalingRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolAutoscalingRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.zone)
  return zone_.GetNoArena();
}
inline void SetNodePoolAutoscalingRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
#if LANG_CXX11
inline void SetNodePoolAutoscalingRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
#endif
inline void SetNodePoolAutoscalingRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
inline void SetNodePoolAutoscalingRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}
inline ::std::string* SetNodePoolAutoscalingRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolAutoscalingRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolAutoscalingRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetNodePoolAutoscalingRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolAutoscalingRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetNodePoolAutoscalingRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
#if LANG_CXX11
inline void SetNodePoolAutoscalingRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
#endif
inline void SetNodePoolAutoscalingRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
inline void SetNodePoolAutoscalingRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}
inline ::std::string* SetNodePoolAutoscalingRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolAutoscalingRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolAutoscalingRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.cluster_id)
}

// string node_pool_id = 4 [deprecated = true];
inline void SetNodePoolAutoscalingRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolAutoscalingRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void SetNodePoolAutoscalingRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
#if LANG_CXX11
inline void SetNodePoolAutoscalingRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
#endif
inline void SetNodePoolAutoscalingRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
inline void SetNodePoolAutoscalingRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}
inline ::std::string* SetNodePoolAutoscalingRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolAutoscalingRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolAutoscalingRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != nullptr) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.node_pool_id)
}

// .google.container.v1.NodePoolAutoscaling autoscaling = 5 [(.google.api.field_behavior) = REQUIRED];
inline bool SetNodePoolAutoscalingRequest::has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != nullptr;
}
inline void SetNodePoolAutoscalingRequest::clear_autoscaling() {
  if (GetArenaNoVirtual() == nullptr && autoscaling_ != nullptr) {
    delete autoscaling_;
  }
  autoscaling_ = nullptr;
}
inline const ::google::container::v1::NodePoolAutoscaling& SetNodePoolAutoscalingRequest::autoscaling() const {
  const ::google::container::v1::NodePoolAutoscaling* p = autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodePoolAutoscaling*>(
      &::google::container::v1::_NodePoolAutoscaling_default_instance_);
}
inline ::google::container::v1::NodePoolAutoscaling* SetNodePoolAutoscalingRequest::release_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
  
  ::google::container::v1::NodePoolAutoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodePoolAutoscaling* SetNodePoolAutoscalingRequest::mutable_autoscaling() {
  
  if (autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodePoolAutoscaling>(GetArenaNoVirtual());
    autoscaling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
  return autoscaling_;
}
inline void SetNodePoolAutoscalingRequest::set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete autoscaling_;
  }
  if (autoscaling) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.autoscaling)
}

// string name = 6;
inline void SetNodePoolAutoscalingRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolAutoscalingRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolAutoscalingRequest.name)
  return name_.GetNoArena();
}
inline void SetNodePoolAutoscalingRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolAutoscalingRequest.name)
}
#if LANG_CXX11
inline void SetNodePoolAutoscalingRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolAutoscalingRequest.name)
}
#endif
inline void SetNodePoolAutoscalingRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolAutoscalingRequest.name)
}
inline void SetNodePoolAutoscalingRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolAutoscalingRequest.name)
}
inline ::std::string* SetNodePoolAutoscalingRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolAutoscalingRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolAutoscalingRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolAutoscalingRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolAutoscalingRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolAutoscalingRequest.name)
}

// -------------------------------------------------------------------

// SetLoggingServiceRequest

// string project_id = 1 [deprecated = true];
inline void SetLoggingServiceRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLoggingServiceRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetLoggingServiceRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.project_id)
}
#if LANG_CXX11
inline void SetLoggingServiceRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.project_id)
}
#endif
inline void SetLoggingServiceRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.project_id)
}
inline void SetLoggingServiceRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.project_id)
}
inline ::std::string* SetLoggingServiceRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLoggingServiceRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLoggingServiceRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetLoggingServiceRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLoggingServiceRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.zone)
  return zone_.GetNoArena();
}
inline void SetLoggingServiceRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.zone)
}
#if LANG_CXX11
inline void SetLoggingServiceRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.zone)
}
#endif
inline void SetLoggingServiceRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.zone)
}
inline void SetLoggingServiceRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.zone)
}
inline ::std::string* SetLoggingServiceRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLoggingServiceRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLoggingServiceRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetLoggingServiceRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLoggingServiceRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetLoggingServiceRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
#if LANG_CXX11
inline void SetLoggingServiceRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
#endif
inline void SetLoggingServiceRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
inline void SetLoggingServiceRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.cluster_id)
}
inline ::std::string* SetLoggingServiceRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLoggingServiceRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLoggingServiceRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.cluster_id)
}

// string logging_service = 4 [(.google.api.field_behavior) = REQUIRED];
inline void SetLoggingServiceRequest::clear_logging_service() {
  logging_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLoggingServiceRequest::logging_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.logging_service)
  return logging_service_.GetNoArena();
}
inline void SetLoggingServiceRequest::set_logging_service(const ::std::string& value) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.logging_service)
}
#if LANG_CXX11
inline void SetLoggingServiceRequest::set_logging_service(::std::string&& value) {
  
  logging_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.logging_service)
}
#endif
inline void SetLoggingServiceRequest::set_logging_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.logging_service)
}
inline void SetLoggingServiceRequest::set_logging_service(const char* value, size_t size) {
  
  logging_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.logging_service)
}
inline ::std::string* SetLoggingServiceRequest::mutable_logging_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.logging_service)
  return logging_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLoggingServiceRequest::release_logging_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.logging_service)
  
  return logging_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLoggingServiceRequest::set_allocated_logging_service(::std::string* logging_service) {
  if (logging_service != nullptr) {
    
  } else {
    
  }
  logging_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logging_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.logging_service)
}

// string name = 5;
inline void SetLoggingServiceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLoggingServiceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLoggingServiceRequest.name)
  return name_.GetNoArena();
}
inline void SetLoggingServiceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLoggingServiceRequest.name)
}
#if LANG_CXX11
inline void SetLoggingServiceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLoggingServiceRequest.name)
}
#endif
inline void SetLoggingServiceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLoggingServiceRequest.name)
}
inline void SetLoggingServiceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLoggingServiceRequest.name)
}
inline ::std::string* SetLoggingServiceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLoggingServiceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLoggingServiceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLoggingServiceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLoggingServiceRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLoggingServiceRequest.name)
}

// -------------------------------------------------------------------

// SetMonitoringServiceRequest

// string project_id = 1 [deprecated = true];
inline void SetMonitoringServiceRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMonitoringServiceRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetMonitoringServiceRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.project_id)
}
#if LANG_CXX11
inline void SetMonitoringServiceRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.project_id)
}
#endif
inline void SetMonitoringServiceRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.project_id)
}
inline void SetMonitoringServiceRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.project_id)
}
inline ::std::string* SetMonitoringServiceRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMonitoringServiceRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMonitoringServiceRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetMonitoringServiceRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMonitoringServiceRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.zone)
  return zone_.GetNoArena();
}
inline void SetMonitoringServiceRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.zone)
}
#if LANG_CXX11
inline void SetMonitoringServiceRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.zone)
}
#endif
inline void SetMonitoringServiceRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.zone)
}
inline void SetMonitoringServiceRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.zone)
}
inline ::std::string* SetMonitoringServiceRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMonitoringServiceRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMonitoringServiceRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetMonitoringServiceRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMonitoringServiceRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetMonitoringServiceRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
#if LANG_CXX11
inline void SetMonitoringServiceRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
#endif
inline void SetMonitoringServiceRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
inline void SetMonitoringServiceRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}
inline ::std::string* SetMonitoringServiceRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMonitoringServiceRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMonitoringServiceRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.cluster_id)
}

// string monitoring_service = 4 [(.google.api.field_behavior) = REQUIRED];
inline void SetMonitoringServiceRequest::clear_monitoring_service() {
  monitoring_service_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMonitoringServiceRequest::monitoring_service() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
  return monitoring_service_.GetNoArena();
}
inline void SetMonitoringServiceRequest::set_monitoring_service(const ::std::string& value) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
#if LANG_CXX11
inline void SetMonitoringServiceRequest::set_monitoring_service(::std::string&& value) {
  
  monitoring_service_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
#endif
inline void SetMonitoringServiceRequest::set_monitoring_service(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
inline void SetMonitoringServiceRequest::set_monitoring_service(const char* value, size_t size) {
  
  monitoring_service_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}
inline ::std::string* SetMonitoringServiceRequest::mutable_monitoring_service() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
  return monitoring_service_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMonitoringServiceRequest::release_monitoring_service() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
  
  return monitoring_service_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMonitoringServiceRequest::set_allocated_monitoring_service(::std::string* monitoring_service) {
  if (monitoring_service != nullptr) {
    
  } else {
    
  }
  monitoring_service_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), monitoring_service);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.monitoring_service)
}

// string name = 6;
inline void SetMonitoringServiceRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMonitoringServiceRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMonitoringServiceRequest.name)
  return name_.GetNoArena();
}
inline void SetMonitoringServiceRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMonitoringServiceRequest.name)
}
#if LANG_CXX11
inline void SetMonitoringServiceRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMonitoringServiceRequest.name)
}
#endif
inline void SetMonitoringServiceRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMonitoringServiceRequest.name)
}
inline void SetMonitoringServiceRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMonitoringServiceRequest.name)
}
inline ::std::string* SetMonitoringServiceRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMonitoringServiceRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMonitoringServiceRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMonitoringServiceRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMonitoringServiceRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMonitoringServiceRequest.name)
}

// -------------------------------------------------------------------

// SetAddonsConfigRequest

// string project_id = 1 [deprecated = true];
inline void SetAddonsConfigRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAddonsConfigRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetAddonsConfigRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.project_id)
}
#if LANG_CXX11
inline void SetAddonsConfigRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.project_id)
}
#endif
inline void SetAddonsConfigRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.project_id)
}
inline void SetAddonsConfigRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.project_id)
}
inline ::std::string* SetAddonsConfigRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAddonsConfigRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAddonsConfigRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetAddonsConfigRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAddonsConfigRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.zone)
  return zone_.GetNoArena();
}
inline void SetAddonsConfigRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.zone)
}
#if LANG_CXX11
inline void SetAddonsConfigRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.zone)
}
#endif
inline void SetAddonsConfigRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.zone)
}
inline void SetAddonsConfigRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.zone)
}
inline ::std::string* SetAddonsConfigRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAddonsConfigRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAddonsConfigRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetAddonsConfigRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAddonsConfigRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetAddonsConfigRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
#if LANG_CXX11
inline void SetAddonsConfigRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
#endif
inline void SetAddonsConfigRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
inline void SetAddonsConfigRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.cluster_id)
}
inline ::std::string* SetAddonsConfigRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAddonsConfigRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAddonsConfigRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.cluster_id)
}

// .google.container.v1.AddonsConfig addons_config = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool SetAddonsConfigRequest::has_addons_config() const {
  return this != internal_default_instance() && addons_config_ != nullptr;
}
inline void SetAddonsConfigRequest::clear_addons_config() {
  if (GetArenaNoVirtual() == nullptr && addons_config_ != nullptr) {
    delete addons_config_;
  }
  addons_config_ = nullptr;
}
inline const ::google::container::v1::AddonsConfig& SetAddonsConfigRequest::addons_config() const {
  const ::google::container::v1::AddonsConfig* p = addons_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.addons_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::AddonsConfig*>(
      &::google::container::v1::_AddonsConfig_default_instance_);
}
inline ::google::container::v1::AddonsConfig* SetAddonsConfigRequest::release_addons_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.addons_config)
  
  ::google::container::v1::AddonsConfig* temp = addons_config_;
  addons_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::AddonsConfig* SetAddonsConfigRequest::mutable_addons_config() {
  
  if (addons_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::AddonsConfig>(GetArenaNoVirtual());
    addons_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.addons_config)
  return addons_config_;
}
inline void SetAddonsConfigRequest::set_allocated_addons_config(::google::container::v1::AddonsConfig* addons_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete addons_config_;
  }
  if (addons_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      addons_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, addons_config, submessage_arena);
    }
    
  } else {
    
  }
  addons_config_ = addons_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.addons_config)
}

// string name = 6;
inline void SetAddonsConfigRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetAddonsConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetAddonsConfigRequest.name)
  return name_.GetNoArena();
}
inline void SetAddonsConfigRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetAddonsConfigRequest.name)
}
#if LANG_CXX11
inline void SetAddonsConfigRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetAddonsConfigRequest.name)
}
#endif
inline void SetAddonsConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetAddonsConfigRequest.name)
}
inline void SetAddonsConfigRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetAddonsConfigRequest.name)
}
inline ::std::string* SetAddonsConfigRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetAddonsConfigRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetAddonsConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetAddonsConfigRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetAddonsConfigRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetAddonsConfigRequest.name)
}

// -------------------------------------------------------------------

// SetLocationsRequest

// string project_id = 1 [deprecated = true];
inline void SetLocationsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLocationsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetLocationsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.project_id)
}
#if LANG_CXX11
inline void SetLocationsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.project_id)
}
#endif
inline void SetLocationsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.project_id)
}
inline void SetLocationsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.project_id)
}
inline ::std::string* SetLocationsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLocationsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLocationsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetLocationsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLocationsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.zone)
  return zone_.GetNoArena();
}
inline void SetLocationsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.zone)
}
#if LANG_CXX11
inline void SetLocationsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.zone)
}
#endif
inline void SetLocationsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.zone)
}
inline void SetLocationsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.zone)
}
inline ::std::string* SetLocationsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLocationsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLocationsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetLocationsRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLocationsRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetLocationsRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.cluster_id)
}
#if LANG_CXX11
inline void SetLocationsRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.cluster_id)
}
#endif
inline void SetLocationsRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.cluster_id)
}
inline void SetLocationsRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.cluster_id)
}
inline ::std::string* SetLocationsRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLocationsRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLocationsRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.cluster_id)
}

// repeated string locations = 4 [(.google.api.field_behavior) = REQUIRED];
inline int SetLocationsRequest::locations_size() const {
  return locations_.size();
}
inline void SetLocationsRequest::clear_locations() {
  locations_.Clear();
}
inline const ::std::string& SetLocationsRequest::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.locations)
  return locations_.Get(index);
}
inline ::std::string* SetLocationsRequest::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.locations)
  return locations_.Mutable(index);
}
inline void SetLocationsRequest::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void SetLocationsRequest::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void SetLocationsRequest::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.locations)
}
inline void SetLocationsRequest::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.locations)
}
inline ::std::string* SetLocationsRequest::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.SetLocationsRequest.locations)
  return locations_.Add();
}
inline void SetLocationsRequest::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.SetLocationsRequest.locations)
}
#if LANG_CXX11
inline void SetLocationsRequest::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.SetLocationsRequest.locations)
}
#endif
inline void SetLocationsRequest::add_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.SetLocationsRequest.locations)
}
inline void SetLocationsRequest::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.SetLocationsRequest.locations)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
SetLocationsRequest::locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.SetLocationsRequest.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
SetLocationsRequest::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.SetLocationsRequest.locations)
  return &locations_;
}

// string name = 6;
inline void SetLocationsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLocationsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLocationsRequest.name)
  return name_.GetNoArena();
}
inline void SetLocationsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLocationsRequest.name)
}
#if LANG_CXX11
inline void SetLocationsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLocationsRequest.name)
}
#endif
inline void SetLocationsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLocationsRequest.name)
}
inline void SetLocationsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLocationsRequest.name)
}
inline ::std::string* SetLocationsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLocationsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLocationsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLocationsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLocationsRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLocationsRequest.name)
}

// -------------------------------------------------------------------

// UpdateMasterRequest

// string project_id = 1 [deprecated = true];
inline void UpdateMasterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMasterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void UpdateMasterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.project_id)
}
#if LANG_CXX11
inline void UpdateMasterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.project_id)
}
#endif
inline void UpdateMasterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.project_id)
}
inline void UpdateMasterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.project_id)
}
inline ::std::string* UpdateMasterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMasterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMasterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void UpdateMasterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMasterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.zone)
  return zone_.GetNoArena();
}
inline void UpdateMasterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.zone)
}
#if LANG_CXX11
inline void UpdateMasterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.zone)
}
#endif
inline void UpdateMasterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.zone)
}
inline void UpdateMasterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.zone)
}
inline ::std::string* UpdateMasterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMasterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMasterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void UpdateMasterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMasterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void UpdateMasterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.cluster_id)
}
#if LANG_CXX11
inline void UpdateMasterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.cluster_id)
}
#endif
inline void UpdateMasterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.cluster_id)
}
inline void UpdateMasterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.cluster_id)
}
inline ::std::string* UpdateMasterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMasterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMasterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.cluster_id)
}

// string master_version = 4 [(.google.api.field_behavior) = REQUIRED];
inline void UpdateMasterRequest::clear_master_version() {
  master_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMasterRequest::master_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.master_version)
  return master_version_.GetNoArena();
}
inline void UpdateMasterRequest::set_master_version(const ::std::string& value) {
  
  master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.master_version)
}
#if LANG_CXX11
inline void UpdateMasterRequest::set_master_version(::std::string&& value) {
  
  master_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.master_version)
}
#endif
inline void UpdateMasterRequest::set_master_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.master_version)
}
inline void UpdateMasterRequest::set_master_version(const char* value, size_t size) {
  
  master_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.master_version)
}
inline ::std::string* UpdateMasterRequest::mutable_master_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.master_version)
  return master_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMasterRequest::release_master_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.master_version)
  
  return master_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMasterRequest::set_allocated_master_version(::std::string* master_version) {
  if (master_version != nullptr) {
    
  } else {
    
  }
  master_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), master_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.master_version)
}

// string name = 7;
inline void UpdateMasterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UpdateMasterRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UpdateMasterRequest.name)
  return name_.GetNoArena();
}
inline void UpdateMasterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UpdateMasterRequest.name)
}
#if LANG_CXX11
inline void UpdateMasterRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UpdateMasterRequest.name)
}
#endif
inline void UpdateMasterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UpdateMasterRequest.name)
}
inline void UpdateMasterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UpdateMasterRequest.name)
}
inline ::std::string* UpdateMasterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UpdateMasterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateMasterRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.UpdateMasterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateMasterRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UpdateMasterRequest.name)
}

// -------------------------------------------------------------------

// SetMasterAuthRequest

// string project_id = 1 [deprecated = true];
inline void SetMasterAuthRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMasterAuthRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetMasterAuthRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.project_id)
}
#if LANG_CXX11
inline void SetMasterAuthRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.project_id)
}
#endif
inline void SetMasterAuthRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.project_id)
}
inline void SetMasterAuthRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.project_id)
}
inline ::std::string* SetMasterAuthRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMasterAuthRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMasterAuthRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetMasterAuthRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMasterAuthRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.zone)
  return zone_.GetNoArena();
}
inline void SetMasterAuthRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.zone)
}
#if LANG_CXX11
inline void SetMasterAuthRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.zone)
}
#endif
inline void SetMasterAuthRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.zone)
}
inline void SetMasterAuthRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.zone)
}
inline ::std::string* SetMasterAuthRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMasterAuthRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMasterAuthRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetMasterAuthRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMasterAuthRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetMasterAuthRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.cluster_id)
}
#if LANG_CXX11
inline void SetMasterAuthRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.cluster_id)
}
#endif
inline void SetMasterAuthRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.cluster_id)
}
inline void SetMasterAuthRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.cluster_id)
}
inline ::std::string* SetMasterAuthRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMasterAuthRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMasterAuthRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.cluster_id)
}

// .google.container.v1.SetMasterAuthRequest.Action action = 4 [(.google.api.field_behavior) = REQUIRED];
inline void SetMasterAuthRequest::clear_action() {
  action_ = 0;
}
inline ::google::container::v1::SetMasterAuthRequest_Action SetMasterAuthRequest::action() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.action)
  return static_cast< ::google::container::v1::SetMasterAuthRequest_Action >(action_);
}
inline void SetMasterAuthRequest::set_action(::google::container::v1::SetMasterAuthRequest_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.action)
}

// .google.container.v1.MasterAuth update = 5 [(.google.api.field_behavior) = REQUIRED];
inline bool SetMasterAuthRequest::has_update() const {
  return this != internal_default_instance() && update_ != nullptr;
}
inline void SetMasterAuthRequest::clear_update() {
  if (GetArenaNoVirtual() == nullptr && update_ != nullptr) {
    delete update_;
  }
  update_ = nullptr;
}
inline const ::google::container::v1::MasterAuth& SetMasterAuthRequest::update() const {
  const ::google::container::v1::MasterAuth* p = update_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.update)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::MasterAuth*>(
      &::google::container::v1::_MasterAuth_default_instance_);
}
inline ::google::container::v1::MasterAuth* SetMasterAuthRequest::release_update() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.update)
  
  ::google::container::v1::MasterAuth* temp = update_;
  update_ = nullptr;
  return temp;
}
inline ::google::container::v1::MasterAuth* SetMasterAuthRequest::mutable_update() {
  
  if (update_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::MasterAuth>(GetArenaNoVirtual());
    update_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.update)
  return update_;
}
inline void SetMasterAuthRequest::set_allocated_update(::google::container::v1::MasterAuth* update) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete update_;
  }
  if (update) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      update = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, update, submessage_arena);
    }
    
  } else {
    
  }
  update_ = update;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.update)
}

// string name = 7;
inline void SetMasterAuthRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMasterAuthRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMasterAuthRequest.name)
  return name_.GetNoArena();
}
inline void SetMasterAuthRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMasterAuthRequest.name)
}
#if LANG_CXX11
inline void SetMasterAuthRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMasterAuthRequest.name)
}
#endif
inline void SetMasterAuthRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMasterAuthRequest.name)
}
inline void SetMasterAuthRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMasterAuthRequest.name)
}
inline ::std::string* SetMasterAuthRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMasterAuthRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMasterAuthRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMasterAuthRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMasterAuthRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMasterAuthRequest.name)
}

// -------------------------------------------------------------------

// DeleteClusterRequest

// string project_id = 1 [deprecated = true];
inline void DeleteClusterRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.project_id)
  return project_id_.GetNoArena();
}
inline void DeleteClusterRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.project_id)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.project_id)
}
#endif
inline void DeleteClusterRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.project_id)
}
inline void DeleteClusterRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.project_id)
}
inline ::std::string* DeleteClusterRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void DeleteClusterRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.zone)
  return zone_.GetNoArena();
}
inline void DeleteClusterRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.zone)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.zone)
}
#endif
inline void DeleteClusterRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.zone)
}
inline void DeleteClusterRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.zone)
}
inline ::std::string* DeleteClusterRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void DeleteClusterRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void DeleteClusterRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.cluster_id)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.cluster_id)
}
#endif
inline void DeleteClusterRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.cluster_id)
}
inline void DeleteClusterRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.cluster_id)
}
inline ::std::string* DeleteClusterRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.cluster_id)
}

// string name = 4;
inline void DeleteClusterRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteClusterRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteClusterRequest.name)
  return name_.GetNoArena();
}
inline void DeleteClusterRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteClusterRequest.name)
}
#if LANG_CXX11
inline void DeleteClusterRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteClusterRequest.name)
}
#endif
inline void DeleteClusterRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteClusterRequest.name)
}
inline void DeleteClusterRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteClusterRequest.name)
}
inline ::std::string* DeleteClusterRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteClusterRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteClusterRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteClusterRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteClusterRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteClusterRequest.name)
}

// -------------------------------------------------------------------

// ListClustersRequest

// string project_id = 1 [deprecated = true];
inline void ListClustersRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListClustersRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersRequest.project_id)
}
#if LANG_CXX11
inline void ListClustersRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListClustersRequest.project_id)
}
#endif
inline void ListClustersRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersRequest.project_id)
}
inline void ListClustersRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersRequest.project_id)
}
inline ::std::string* ListClustersRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListClustersRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListClustersRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void ListClustersRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersRequest.zone)
  return zone_.GetNoArena();
}
inline void ListClustersRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersRequest.zone)
}
#if LANG_CXX11
inline void ListClustersRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListClustersRequest.zone)
}
#endif
inline void ListClustersRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersRequest.zone)
}
inline void ListClustersRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersRequest.zone)
}
inline ::std::string* ListClustersRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListClustersRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListClustersRequest.zone)
}

// string parent = 4;
inline void ListClustersRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListClustersRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersRequest.parent)
  return parent_.GetNoArena();
}
inline void ListClustersRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersRequest.parent)
}
#if LANG_CXX11
inline void ListClustersRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListClustersRequest.parent)
}
#endif
inline void ListClustersRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersRequest.parent)
}
inline void ListClustersRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersRequest.parent)
}
inline ::std::string* ListClustersRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListClustersRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListClustersRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListClustersRequest::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListClustersRequest.parent)
}

// -------------------------------------------------------------------

// ListClustersResponse

// repeated .google.container.v1.Cluster clusters = 1;
inline int ListClustersResponse::clusters_size() const {
  return clusters_.size();
}
inline void ListClustersResponse::clear_clusters() {
  clusters_.Clear();
}
inline ::google::container::v1::Cluster* ListClustersResponse::mutable_clusters(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >*
ListClustersResponse::mutable_clusters() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListClustersResponse.clusters)
  return &clusters_;
}
inline const ::google::container::v1::Cluster& ListClustersResponse::clusters(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Get(index);
}
inline ::google::container::v1::Cluster* ListClustersResponse::add_clusters() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.clusters)
  return clusters_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Cluster >&
ListClustersResponse::clusters() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListClustersResponse.clusters)
  return clusters_;
}

// repeated string missing_zones = 2;
inline int ListClustersResponse::missing_zones_size() const {
  return missing_zones_.size();
}
inline void ListClustersResponse::clear_missing_zones() {
  missing_zones_.Clear();
}
inline const ::std::string& ListClustersResponse::missing_zones(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Get(index);
}
inline ::std::string* ListClustersResponse::mutable_missing_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Mutable(index);
}
inline void ListClustersResponse::set_missing_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListClustersResponse::set_missing_zones(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListClustersResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListClustersResponse::set_missing_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missing_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListClustersResponse.missing_zones)
}
inline void ListClustersResponse::set_missing_zones(int index, const char* value, size_t size) {
  missing_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListClustersResponse.missing_zones)
}
inline ::std::string* ListClustersResponse::add_missing_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_.Add();
}
inline void ListClustersResponse::add_missing_zones(const ::std::string& value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.missing_zones)
}
#if LANG_CXX11
inline void ListClustersResponse::add_missing_zones(::std::string&& value) {
  missing_zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ListClustersResponse.missing_zones)
}
#endif
inline void ListClustersResponse::add_missing_zones(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ListClustersResponse.missing_zones)
}
inline void ListClustersResponse::add_missing_zones(const char* value, size_t size) {
  missing_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ListClustersResponse.missing_zones)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ListClustersResponse::missing_zones() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListClustersResponse.missing_zones)
  return missing_zones_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ListClustersResponse::mutable_missing_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListClustersResponse.missing_zones)
  return &missing_zones_;
}

// -------------------------------------------------------------------

// GetOperationRequest

// string project_id = 1 [deprecated = true];
inline void GetOperationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetOperationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.project_id)
}
#if LANG_CXX11
inline void GetOperationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.project_id)
}
#endif
inline void GetOperationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.project_id)
}
inline void GetOperationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.project_id)
}
inline ::std::string* GetOperationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void GetOperationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.zone)
  return zone_.GetNoArena();
}
inline void GetOperationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.zone)
}
#if LANG_CXX11
inline void GetOperationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.zone)
}
#endif
inline void GetOperationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.zone)
}
inline void GetOperationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.zone)
}
inline ::std::string* GetOperationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.zone)
}

// string operation_id = 3 [deprecated = true];
inline void GetOperationRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.operation_id)
  return operation_id_.GetNoArena();
}
inline void GetOperationRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.operation_id)
}
#if LANG_CXX11
inline void GetOperationRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.operation_id)
}
#endif
inline void GetOperationRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.operation_id)
}
inline void GetOperationRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.operation_id)
}
inline ::std::string* GetOperationRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.operation_id)
}

// string name = 5;
inline void GetOperationRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOperationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOperationRequest.name)
  return name_.GetNoArena();
}
inline void GetOperationRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOperationRequest.name)
}
#if LANG_CXX11
inline void GetOperationRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOperationRequest.name)
}
#endif
inline void GetOperationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOperationRequest.name)
}
inline void GetOperationRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOperationRequest.name)
}
inline ::std::string* GetOperationRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOperationRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOperationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOperationRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOperationRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOperationRequest.name)
}

// -------------------------------------------------------------------

// ListOperationsRequest

// string project_id = 1 [deprecated = true];
inline void ListOperationsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOperationsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListOperationsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsRequest.project_id)
}
#if LANG_CXX11
inline void ListOperationsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListOperationsRequest.project_id)
}
#endif
inline void ListOperationsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsRequest.project_id)
}
inline void ListOperationsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsRequest.project_id)
}
inline ::std::string* ListOperationsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOperationsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListOperationsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOperationsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListOperationsRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void ListOperationsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOperationsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsRequest.zone)
  return zone_.GetNoArena();
}
inline void ListOperationsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsRequest.zone)
}
#if LANG_CXX11
inline void ListOperationsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListOperationsRequest.zone)
}
#endif
inline void ListOperationsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsRequest.zone)
}
inline void ListOperationsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsRequest.zone)
}
inline ::std::string* ListOperationsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOperationsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListOperationsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOperationsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListOperationsRequest.zone)
}

// string parent = 4;
inline void ListOperationsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListOperationsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsRequest.parent)
  return parent_.GetNoArena();
}
inline void ListOperationsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsRequest.parent)
}
#if LANG_CXX11
inline void ListOperationsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListOperationsRequest.parent)
}
#endif
inline void ListOperationsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsRequest.parent)
}
inline void ListOperationsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsRequest.parent)
}
inline ::std::string* ListOperationsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListOperationsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListOperationsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListOperationsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListOperationsRequest.parent)
}

// -------------------------------------------------------------------

// CancelOperationRequest

// string project_id = 1 [deprecated = true];
inline void CancelOperationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOperationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CancelOperationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.project_id)
}
#if LANG_CXX11
inline void CancelOperationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.project_id)
}
#endif
inline void CancelOperationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.project_id)
}
inline void CancelOperationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.project_id)
}
inline ::std::string* CancelOperationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOperationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOperationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void CancelOperationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOperationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.zone)
  return zone_.GetNoArena();
}
inline void CancelOperationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.zone)
}
#if LANG_CXX11
inline void CancelOperationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.zone)
}
#endif
inline void CancelOperationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.zone)
}
inline void CancelOperationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.zone)
}
inline ::std::string* CancelOperationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOperationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOperationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.zone)
}

// string operation_id = 3 [deprecated = true];
inline void CancelOperationRequest::clear_operation_id() {
  operation_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOperationRequest::operation_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.operation_id)
  return operation_id_.GetNoArena();
}
inline void CancelOperationRequest::set_operation_id(const ::std::string& value) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.operation_id)
}
#if LANG_CXX11
inline void CancelOperationRequest::set_operation_id(::std::string&& value) {
  
  operation_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.operation_id)
}
#endif
inline void CancelOperationRequest::set_operation_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.operation_id)
}
inline void CancelOperationRequest::set_operation_id(const char* value, size_t size) {
  
  operation_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.operation_id)
}
inline ::std::string* CancelOperationRequest::mutable_operation_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.operation_id)
  return operation_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOperationRequest::release_operation_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.operation_id)
  
  return operation_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOperationRequest::set_allocated_operation_id(::std::string* operation_id) {
  if (operation_id != nullptr) {
    
  } else {
    
  }
  operation_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), operation_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.operation_id)
}

// string name = 4;
inline void CancelOperationRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CancelOperationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CancelOperationRequest.name)
  return name_.GetNoArena();
}
inline void CancelOperationRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CancelOperationRequest.name)
}
#if LANG_CXX11
inline void CancelOperationRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CancelOperationRequest.name)
}
#endif
inline void CancelOperationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CancelOperationRequest.name)
}
inline void CancelOperationRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CancelOperationRequest.name)
}
inline ::std::string* CancelOperationRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CancelOperationRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CancelOperationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.CancelOperationRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CancelOperationRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CancelOperationRequest.name)
}

// -------------------------------------------------------------------

// ListOperationsResponse

// repeated .google.container.v1.Operation operations = 1;
inline int ListOperationsResponse::operations_size() const {
  return operations_.size();
}
inline void ListOperationsResponse::clear_operations() {
  operations_.Clear();
}
inline ::google::container::v1::Operation* ListOperationsResponse::mutable_operations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsResponse.operations)
  return operations_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >*
ListOperationsResponse::mutable_operations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListOperationsResponse.operations)
  return &operations_;
}
inline const ::google::container::v1::Operation& ListOperationsResponse::operations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsResponse.operations)
  return operations_.Get(index);
}
inline ::google::container::v1::Operation* ListOperationsResponse::add_operations() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.operations)
  return operations_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Operation >&
ListOperationsResponse::operations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListOperationsResponse.operations)
  return operations_;
}

// repeated string missing_zones = 2;
inline int ListOperationsResponse::missing_zones_size() const {
  return missing_zones_.size();
}
inline void ListOperationsResponse::clear_missing_zones() {
  missing_zones_.Clear();
}
inline const ::std::string& ListOperationsResponse::missing_zones(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Get(index);
}
inline ::std::string* ListOperationsResponse::mutable_missing_zones(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Mutable(index);
}
inline void ListOperationsResponse::set_missing_zones(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ListOperationsResponse::set_missing_zones(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ListOperationsResponse.missing_zones)
  missing_zones_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ListOperationsResponse::set_missing_zones(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missing_zones_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListOperationsResponse.missing_zones)
}
inline void ListOperationsResponse::set_missing_zones(int index, const char* value, size_t size) {
  missing_zones_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListOperationsResponse.missing_zones)
}
inline ::std::string* ListOperationsResponse::add_missing_zones() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_.Add();
}
inline void ListOperationsResponse::add_missing_zones(const ::std::string& value) {
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.missing_zones)
}
#if LANG_CXX11
inline void ListOperationsResponse::add_missing_zones(::std::string&& value) {
  missing_zones_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ListOperationsResponse.missing_zones)
}
#endif
inline void ListOperationsResponse::add_missing_zones(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  missing_zones_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ListOperationsResponse.missing_zones)
}
inline void ListOperationsResponse::add_missing_zones(const char* value, size_t size) {
  missing_zones_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ListOperationsResponse.missing_zones)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ListOperationsResponse::missing_zones() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListOperationsResponse.missing_zones)
  return missing_zones_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ListOperationsResponse::mutable_missing_zones() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListOperationsResponse.missing_zones)
  return &missing_zones_;
}

// -------------------------------------------------------------------

// GetServerConfigRequest

// string project_id = 1 [deprecated = true];
inline void GetServerConfigRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServerConfigRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetServerConfigRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetServerConfigRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetServerConfigRequest.project_id)
}
#if LANG_CXX11
inline void GetServerConfigRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetServerConfigRequest.project_id)
}
#endif
inline void GetServerConfigRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetServerConfigRequest.project_id)
}
inline void GetServerConfigRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetServerConfigRequest.project_id)
}
inline ::std::string* GetServerConfigRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetServerConfigRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServerConfigRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetServerConfigRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerConfigRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetServerConfigRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void GetServerConfigRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServerConfigRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetServerConfigRequest.zone)
  return zone_.GetNoArena();
}
inline void GetServerConfigRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetServerConfigRequest.zone)
}
#if LANG_CXX11
inline void GetServerConfigRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetServerConfigRequest.zone)
}
#endif
inline void GetServerConfigRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetServerConfigRequest.zone)
}
inline void GetServerConfigRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetServerConfigRequest.zone)
}
inline ::std::string* GetServerConfigRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetServerConfigRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServerConfigRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetServerConfigRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerConfigRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetServerConfigRequest.zone)
}

// string name = 4;
inline void GetServerConfigRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetServerConfigRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetServerConfigRequest.name)
  return name_.GetNoArena();
}
inline void GetServerConfigRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetServerConfigRequest.name)
}
#if LANG_CXX11
inline void GetServerConfigRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetServerConfigRequest.name)
}
#endif
inline void GetServerConfigRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetServerConfigRequest.name)
}
inline void GetServerConfigRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetServerConfigRequest.name)
}
inline ::std::string* GetServerConfigRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetServerConfigRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetServerConfigRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetServerConfigRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetServerConfigRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetServerConfigRequest.name)
}

// -------------------------------------------------------------------

// ServerConfig_ReleaseChannelConfig

// .google.container.v1.ReleaseChannel.Channel channel = 1;
inline void ServerConfig_ReleaseChannelConfig::clear_channel() {
  channel_ = 0;
}
inline ::google::container::v1::ReleaseChannel_Channel ServerConfig_ReleaseChannelConfig::channel() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.ReleaseChannelConfig.channel)
  return static_cast< ::google::container::v1::ReleaseChannel_Channel >(channel_);
}
inline void ServerConfig_ReleaseChannelConfig::set_channel(::google::container::v1::ReleaseChannel_Channel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.ReleaseChannelConfig.channel)
}

// string default_version = 2;
inline void ServerConfig_ReleaseChannelConfig::clear_default_version() {
  default_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerConfig_ReleaseChannelConfig::default_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.ReleaseChannelConfig.default_version)
  return default_version_.GetNoArena();
}
inline void ServerConfig_ReleaseChannelConfig::set_default_version(const ::std::string& value) {
  
  default_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.ReleaseChannelConfig.default_version)
}
#if LANG_CXX11
inline void ServerConfig_ReleaseChannelConfig::set_default_version(::std::string&& value) {
  
  default_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ServerConfig.ReleaseChannelConfig.default_version)
}
#endif
inline void ServerConfig_ReleaseChannelConfig::set_default_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.ReleaseChannelConfig.default_version)
}
inline void ServerConfig_ReleaseChannelConfig::set_default_version(const char* value, size_t size) {
  
  default_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.ReleaseChannelConfig.default_version)
}
inline ::std::string* ServerConfig_ReleaseChannelConfig::mutable_default_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.ReleaseChannelConfig.default_version)
  return default_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig_ReleaseChannelConfig::release_default_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ServerConfig.ReleaseChannelConfig.default_version)
  
  return default_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig_ReleaseChannelConfig::set_allocated_default_version(::std::string* default_version) {
  if (default_version != nullptr) {
    
  } else {
    
  }
  default_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ServerConfig.ReleaseChannelConfig.default_version)
}

// repeated string valid_versions = 4;
inline int ServerConfig_ReleaseChannelConfig::valid_versions_size() const {
  return valid_versions_.size();
}
inline void ServerConfig_ReleaseChannelConfig::clear_valid_versions() {
  valid_versions_.Clear();
}
inline const ::std::string& ServerConfig_ReleaseChannelConfig::valid_versions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
  return valid_versions_.Get(index);
}
inline ::std::string* ServerConfig_ReleaseChannelConfig::mutable_valid_versions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
  return valid_versions_.Mutable(index);
}
inline void ServerConfig_ReleaseChannelConfig::set_valid_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
  valid_versions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerConfig_ReleaseChannelConfig::set_valid_versions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
  valid_versions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerConfig_ReleaseChannelConfig::set_valid_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valid_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
}
inline void ServerConfig_ReleaseChannelConfig::set_valid_versions(int index, const char* value, size_t size) {
  valid_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
}
inline ::std::string* ServerConfig_ReleaseChannelConfig::add_valid_versions() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
  return valid_versions_.Add();
}
inline void ServerConfig_ReleaseChannelConfig::add_valid_versions(const ::std::string& value) {
  valid_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
}
#if LANG_CXX11
inline void ServerConfig_ReleaseChannelConfig::add_valid_versions(::std::string&& value) {
  valid_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
}
#endif
inline void ServerConfig_ReleaseChannelConfig::add_valid_versions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valid_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
}
inline void ServerConfig_ReleaseChannelConfig::add_valid_versions(const char* value, size_t size) {
  valid_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ServerConfig_ReleaseChannelConfig::valid_versions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
  return valid_versions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ServerConfig_ReleaseChannelConfig::mutable_valid_versions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.ReleaseChannelConfig.valid_versions)
  return &valid_versions_;
}

// -------------------------------------------------------------------

// ServerConfig

// string default_cluster_version = 1;
inline void ServerConfig::clear_default_cluster_version() {
  default_cluster_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerConfig::default_cluster_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.default_cluster_version)
  return default_cluster_version_.GetNoArena();
}
inline void ServerConfig::set_default_cluster_version(const ::std::string& value) {
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.default_cluster_version)
}
#if LANG_CXX11
inline void ServerConfig::set_default_cluster_version(::std::string&& value) {
  
  default_cluster_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ServerConfig.default_cluster_version)
}
#endif
inline void ServerConfig::set_default_cluster_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.default_cluster_version)
}
inline void ServerConfig::set_default_cluster_version(const char* value, size_t size) {
  
  default_cluster_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.default_cluster_version)
}
inline ::std::string* ServerConfig::mutable_default_cluster_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.default_cluster_version)
  return default_cluster_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_default_cluster_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.ServerConfig.default_cluster_version)
  
  return default_cluster_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_default_cluster_version(::std::string* default_cluster_version) {
  if (default_cluster_version != nullptr) {
    
  } else {
    
  }
  default_cluster_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_cluster_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ServerConfig.default_cluster_version)
}

// repeated string valid_node_versions = 3;
inline int ServerConfig::valid_node_versions_size() const {
  return valid_node_versions_.size();
}
inline void ServerConfig::clear_valid_node_versions() {
  valid_node_versions_.Clear();
}
inline const ::std::string& ServerConfig::valid_node_versions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Get(index);
}
inline ::std::string* ServerConfig::mutable_valid_node_versions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Mutable(index);
}
inline void ServerConfig::set_valid_node_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_node_versions)
  valid_node_versions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerConfig::set_valid_node_versions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_node_versions)
  valid_node_versions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerConfig::set_valid_node_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valid_node_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_node_versions)
}
inline void ServerConfig::set_valid_node_versions(int index, const char* value, size_t size) {
  valid_node_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_node_versions)
}
inline ::std::string* ServerConfig::add_valid_node_versions() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_.Add();
}
inline void ServerConfig::add_valid_node_versions(const ::std::string& value) {
  valid_node_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_node_versions)
}
#if LANG_CXX11
inline void ServerConfig::add_valid_node_versions(::std::string&& value) {
  valid_node_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_node_versions)
}
#endif
inline void ServerConfig::add_valid_node_versions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valid_node_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_node_versions)
}
inline void ServerConfig::add_valid_node_versions(const char* value, size_t size) {
  valid_node_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_node_versions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ServerConfig::valid_node_versions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_node_versions)
  return valid_node_versions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ServerConfig::mutable_valid_node_versions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_node_versions)
  return &valid_node_versions_;
}

// string default_image_type = 4;
inline void ServerConfig::clear_default_image_type() {
  default_image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ServerConfig::default_image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.default_image_type)
  return default_image_type_.GetNoArena();
}
inline void ServerConfig::set_default_image_type(const ::std::string& value) {
  
  default_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.default_image_type)
}
#if LANG_CXX11
inline void ServerConfig::set_default_image_type(::std::string&& value) {
  
  default_image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ServerConfig.default_image_type)
}
#endif
inline void ServerConfig::set_default_image_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  default_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.default_image_type)
}
inline void ServerConfig::set_default_image_type(const char* value, size_t size) {
  
  default_image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.default_image_type)
}
inline ::std::string* ServerConfig::mutable_default_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.default_image_type)
  return default_image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ServerConfig::release_default_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.ServerConfig.default_image_type)
  
  return default_image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ServerConfig::set_allocated_default_image_type(::std::string* default_image_type) {
  if (default_image_type != nullptr) {
    
  } else {
    
  }
  default_image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ServerConfig.default_image_type)
}

// repeated string valid_image_types = 5;
inline int ServerConfig::valid_image_types_size() const {
  return valid_image_types_.size();
}
inline void ServerConfig::clear_valid_image_types() {
  valid_image_types_.Clear();
}
inline const ::std::string& ServerConfig::valid_image_types(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_.Get(index);
}
inline ::std::string* ServerConfig::mutable_valid_image_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_.Mutable(index);
}
inline void ServerConfig::set_valid_image_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_image_types)
  valid_image_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerConfig::set_valid_image_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_image_types)
  valid_image_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerConfig::set_valid_image_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valid_image_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_image_types)
}
inline void ServerConfig::set_valid_image_types(int index, const char* value, size_t size) {
  valid_image_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_image_types)
}
inline ::std::string* ServerConfig::add_valid_image_types() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_.Add();
}
inline void ServerConfig::add_valid_image_types(const ::std::string& value) {
  valid_image_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_image_types)
}
#if LANG_CXX11
inline void ServerConfig::add_valid_image_types(::std::string&& value) {
  valid_image_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_image_types)
}
#endif
inline void ServerConfig::add_valid_image_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valid_image_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_image_types)
}
inline void ServerConfig::add_valid_image_types(const char* value, size_t size) {
  valid_image_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_image_types)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ServerConfig::valid_image_types() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_image_types)
  return valid_image_types_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ServerConfig::mutable_valid_image_types() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_image_types)
  return &valid_image_types_;
}

// repeated string valid_master_versions = 6;
inline int ServerConfig::valid_master_versions_size() const {
  return valid_master_versions_.size();
}
inline void ServerConfig::clear_valid_master_versions() {
  valid_master_versions_.Clear();
}
inline const ::std::string& ServerConfig::valid_master_versions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_.Get(index);
}
inline ::std::string* ServerConfig::mutable_valid_master_versions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_.Mutable(index);
}
inline void ServerConfig::set_valid_master_versions(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_master_versions)
  valid_master_versions_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ServerConfig::set_valid_master_versions(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ServerConfig.valid_master_versions)
  valid_master_versions_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ServerConfig::set_valid_master_versions(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valid_master_versions_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ServerConfig.valid_master_versions)
}
inline void ServerConfig::set_valid_master_versions(int index, const char* value, size_t size) {
  valid_master_versions_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ServerConfig.valid_master_versions)
}
inline ::std::string* ServerConfig::add_valid_master_versions() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_.Add();
}
inline void ServerConfig::add_valid_master_versions(const ::std::string& value) {
  valid_master_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_master_versions)
}
#if LANG_CXX11
inline void ServerConfig::add_valid_master_versions(::std::string&& value) {
  valid_master_versions_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.valid_master_versions)
}
#endif
inline void ServerConfig::add_valid_master_versions(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  valid_master_versions_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ServerConfig.valid_master_versions)
}
inline void ServerConfig::add_valid_master_versions(const char* value, size_t size) {
  valid_master_versions_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ServerConfig.valid_master_versions)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ServerConfig::valid_master_versions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.valid_master_versions)
  return valid_master_versions_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ServerConfig::mutable_valid_master_versions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.valid_master_versions)
  return &valid_master_versions_;
}

// repeated .google.container.v1.ServerConfig.ReleaseChannelConfig channels = 9;
inline int ServerConfig::channels_size() const {
  return channels_.size();
}
inline void ServerConfig::clear_channels() {
  channels_.Clear();
}
inline ::google::container::v1::ServerConfig_ReleaseChannelConfig* ServerConfig::mutable_channels(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ServerConfig.channels)
  return channels_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::ServerConfig_ReleaseChannelConfig >*
ServerConfig::mutable_channels() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ServerConfig.channels)
  return &channels_;
}
inline const ::google::container::v1::ServerConfig_ReleaseChannelConfig& ServerConfig::channels(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ServerConfig.channels)
  return channels_.Get(index);
}
inline ::google::container::v1::ServerConfig_ReleaseChannelConfig* ServerConfig::add_channels() {
  // @@protoc_insertion_point(field_add:google.container.v1.ServerConfig.channels)
  return channels_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::ServerConfig_ReleaseChannelConfig >&
ServerConfig::channels() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ServerConfig.channels)
  return channels_;
}

// -------------------------------------------------------------------

// CreateNodePoolRequest

// string project_id = 1 [deprecated = true];
inline void CreateNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CreateNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.project_id)
}
#if LANG_CXX11
inline void CreateNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.project_id)
}
#endif
inline void CreateNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.project_id)
}
inline void CreateNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.project_id)
}
inline ::std::string* CreateNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void CreateNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.zone)
  return zone_.GetNoArena();
}
inline void CreateNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.zone)
}
#if LANG_CXX11
inline void CreateNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.zone)
}
#endif
inline void CreateNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.zone)
}
inline void CreateNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.zone)
}
inline ::std::string* CreateNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void CreateNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void CreateNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.cluster_id)
}
#if LANG_CXX11
inline void CreateNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.cluster_id)
}
#endif
inline void CreateNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.cluster_id)
}
inline void CreateNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.cluster_id)
}
inline ::std::string* CreateNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.cluster_id)
}

// .google.container.v1.NodePool node_pool = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool CreateNodePoolRequest::has_node_pool() const {
  return this != internal_default_instance() && node_pool_ != nullptr;
}
inline void CreateNodePoolRequest::clear_node_pool() {
  if (GetArenaNoVirtual() == nullptr && node_pool_ != nullptr) {
    delete node_pool_;
  }
  node_pool_ = nullptr;
}
inline const ::google::container::v1::NodePool& CreateNodePoolRequest::node_pool() const {
  const ::google::container::v1::NodePool* p = node_pool_;
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.node_pool)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodePool*>(
      &::google::container::v1::_NodePool_default_instance_);
}
inline ::google::container::v1::NodePool* CreateNodePoolRequest::release_node_pool() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.node_pool)
  
  ::google::container::v1::NodePool* temp = node_pool_;
  node_pool_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodePool* CreateNodePoolRequest::mutable_node_pool() {
  
  if (node_pool_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodePool>(GetArenaNoVirtual());
    node_pool_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.node_pool)
  return node_pool_;
}
inline void CreateNodePoolRequest::set_allocated_node_pool(::google::container::v1::NodePool* node_pool) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete node_pool_;
  }
  if (node_pool) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      node_pool = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, node_pool, submessage_arena);
    }
    
  } else {
    
  }
  node_pool_ = node_pool;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.node_pool)
}

// string parent = 6;
inline void CreateNodePoolRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CreateNodePoolRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CreateNodePoolRequest.parent)
  return parent_.GetNoArena();
}
inline void CreateNodePoolRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CreateNodePoolRequest.parent)
}
#if LANG_CXX11
inline void CreateNodePoolRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CreateNodePoolRequest.parent)
}
#endif
inline void CreateNodePoolRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CreateNodePoolRequest.parent)
}
inline void CreateNodePoolRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CreateNodePoolRequest.parent)
}
inline ::std::string* CreateNodePoolRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CreateNodePoolRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateNodePoolRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.container.v1.CreateNodePoolRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateNodePoolRequest::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CreateNodePoolRequest.parent)
}

// -------------------------------------------------------------------

// DeleteNodePoolRequest

// string project_id = 1 [deprecated = true];
inline void DeleteNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
inline void DeleteNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.project_id)
}
#if LANG_CXX11
inline void DeleteNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.project_id)
}
#endif
inline void DeleteNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.project_id)
}
inline void DeleteNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.project_id)
}
inline ::std::string* DeleteNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void DeleteNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.zone)
  return zone_.GetNoArena();
}
inline void DeleteNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.zone)
}
#if LANG_CXX11
inline void DeleteNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.zone)
}
#endif
inline void DeleteNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.zone)
}
inline void DeleteNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.zone)
}
inline ::std::string* DeleteNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void DeleteNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void DeleteNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
#if LANG_CXX11
inline void DeleteNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
#endif
inline void DeleteNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
inline void DeleteNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.cluster_id)
}
inline ::std::string* DeleteNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.cluster_id)
}

// string node_pool_id = 4 [deprecated = true];
inline void DeleteNodePoolRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNodePoolRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void DeleteNodePoolRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
#if LANG_CXX11
inline void DeleteNodePoolRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
#endif
inline void DeleteNodePoolRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
inline void DeleteNodePoolRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}
inline ::std::string* DeleteNodePoolRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNodePoolRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNodePoolRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != nullptr) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.node_pool_id)
}

// string name = 6;
inline void DeleteNodePoolRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DeleteNodePoolRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DeleteNodePoolRequest.name)
  return name_.GetNoArena();
}
inline void DeleteNodePoolRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DeleteNodePoolRequest.name)
}
#if LANG_CXX11
inline void DeleteNodePoolRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DeleteNodePoolRequest.name)
}
#endif
inline void DeleteNodePoolRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DeleteNodePoolRequest.name)
}
inline void DeleteNodePoolRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DeleteNodePoolRequest.name)
}
inline ::std::string* DeleteNodePoolRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DeleteNodePoolRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteNodePoolRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.DeleteNodePoolRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteNodePoolRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DeleteNodePoolRequest.name)
}

// -------------------------------------------------------------------

// ListNodePoolsRequest

// string project_id = 1 [deprecated = true];
inline void ListNodePoolsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNodePoolsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void ListNodePoolsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.project_id)
}
#if LANG_CXX11
inline void ListNodePoolsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.project_id)
}
#endif
inline void ListNodePoolsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.project_id)
}
inline void ListNodePoolsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.project_id)
}
inline ::std::string* ListNodePoolsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNodePoolsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNodePoolsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void ListNodePoolsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNodePoolsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.zone)
  return zone_.GetNoArena();
}
inline void ListNodePoolsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.zone)
}
#if LANG_CXX11
inline void ListNodePoolsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.zone)
}
#endif
inline void ListNodePoolsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.zone)
}
inline void ListNodePoolsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.zone)
}
inline ::std::string* ListNodePoolsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNodePoolsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNodePoolsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void ListNodePoolsRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNodePoolsRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void ListNodePoolsRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.cluster_id)
}
#if LANG_CXX11
inline void ListNodePoolsRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.cluster_id)
}
#endif
inline void ListNodePoolsRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.cluster_id)
}
inline void ListNodePoolsRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.cluster_id)
}
inline ::std::string* ListNodePoolsRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNodePoolsRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNodePoolsRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.cluster_id)
}

// string parent = 5;
inline void ListNodePoolsRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListNodePoolsRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsRequest.parent)
  return parent_.GetNoArena();
}
inline void ListNodePoolsRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListNodePoolsRequest.parent)
}
#if LANG_CXX11
inline void ListNodePoolsRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListNodePoolsRequest.parent)
}
#endif
inline void ListNodePoolsRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListNodePoolsRequest.parent)
}
inline void ListNodePoolsRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListNodePoolsRequest.parent)
}
inline ::std::string* ListNodePoolsRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListNodePoolsRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListNodePoolsRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListNodePoolsRequest::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListNodePoolsRequest.parent)
}

// -------------------------------------------------------------------

// GetNodePoolRequest

// string project_id = 1 [deprecated = true];
inline void GetNodePoolRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNodePoolRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.project_id)
  return project_id_.GetNoArena();
}
inline void GetNodePoolRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.project_id)
}
#if LANG_CXX11
inline void GetNodePoolRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.project_id)
}
#endif
inline void GetNodePoolRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.project_id)
}
inline void GetNodePoolRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.project_id)
}
inline ::std::string* GetNodePoolRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNodePoolRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodePoolRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void GetNodePoolRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNodePoolRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.zone)
  return zone_.GetNoArena();
}
inline void GetNodePoolRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.zone)
}
#if LANG_CXX11
inline void GetNodePoolRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.zone)
}
#endif
inline void GetNodePoolRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.zone)
}
inline void GetNodePoolRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.zone)
}
inline ::std::string* GetNodePoolRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNodePoolRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodePoolRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void GetNodePoolRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNodePoolRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void GetNodePoolRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.cluster_id)
}
#if LANG_CXX11
inline void GetNodePoolRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.cluster_id)
}
#endif
inline void GetNodePoolRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.cluster_id)
}
inline void GetNodePoolRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.cluster_id)
}
inline ::std::string* GetNodePoolRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNodePoolRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodePoolRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.cluster_id)
}

// string node_pool_id = 4 [deprecated = true];
inline void GetNodePoolRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNodePoolRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void GetNodePoolRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.node_pool_id)
}
#if LANG_CXX11
inline void GetNodePoolRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.node_pool_id)
}
#endif
inline void GetNodePoolRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.node_pool_id)
}
inline void GetNodePoolRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.node_pool_id)
}
inline ::std::string* GetNodePoolRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNodePoolRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodePoolRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != nullptr) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.node_pool_id)
}

// string name = 6;
inline void GetNodePoolRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetNodePoolRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetNodePoolRequest.name)
  return name_.GetNoArena();
}
inline void GetNodePoolRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetNodePoolRequest.name)
}
#if LANG_CXX11
inline void GetNodePoolRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetNodePoolRequest.name)
}
#endif
inline void GetNodePoolRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetNodePoolRequest.name)
}
inline void GetNodePoolRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetNodePoolRequest.name)
}
inline ::std::string* GetNodePoolRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetNodePoolRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetNodePoolRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetNodePoolRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetNodePoolRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetNodePoolRequest.name)
}

// -------------------------------------------------------------------

// NodePool_UpgradeSettings

// int32 max_surge = 1;
inline void NodePool_UpgradeSettings::clear_max_surge() {
  max_surge_ = 0;
}
inline ::google::protobuf::int32 NodePool_UpgradeSettings::max_surge() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.UpgradeSettings.max_surge)
  return max_surge_;
}
inline void NodePool_UpgradeSettings::set_max_surge(::google::protobuf::int32 value) {
  
  max_surge_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.UpgradeSettings.max_surge)
}

// int32 max_unavailable = 2;
inline void NodePool_UpgradeSettings::clear_max_unavailable() {
  max_unavailable_ = 0;
}
inline ::google::protobuf::int32 NodePool_UpgradeSettings::max_unavailable() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.UpgradeSettings.max_unavailable)
  return max_unavailable_;
}
inline void NodePool_UpgradeSettings::set_max_unavailable(::google::protobuf::int32 value) {
  
  max_unavailable_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.UpgradeSettings.max_unavailable)
}

// -------------------------------------------------------------------

// NodePool

// string name = 1;
inline void NodePool::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodePool::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.name)
  return name_.GetNoArena();
}
inline void NodePool::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.name)
}
#if LANG_CXX11
inline void NodePool::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.name)
}
#endif
inline void NodePool::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.name)
}
inline void NodePool::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.name)
}
inline ::std::string* NodePool::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodePool::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodePool::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.name)
}

// .google.container.v1.NodeConfig config = 2;
inline bool NodePool::has_config() const {
  return this != internal_default_instance() && config_ != nullptr;
}
inline void NodePool::clear_config() {
  if (GetArenaNoVirtual() == nullptr && config_ != nullptr) {
    delete config_;
  }
  config_ = nullptr;
}
inline const ::google::container::v1::NodeConfig& NodePool::config() const {
  const ::google::container::v1::NodeConfig* p = config_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodeConfig*>(
      &::google::container::v1::_NodeConfig_default_instance_);
}
inline ::google::container::v1::NodeConfig* NodePool::release_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.config)
  
  ::google::container::v1::NodeConfig* temp = config_;
  config_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodeConfig* NodePool::mutable_config() {
  
  if (config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodeConfig>(GetArenaNoVirtual());
    config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.config)
  return config_;
}
inline void NodePool::set_allocated_config(::google::container::v1::NodeConfig* config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete config_;
  }
  if (config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, config, submessage_arena);
    }
    
  } else {
    
  }
  config_ = config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.config)
}

// int32 initial_node_count = 3;
inline void NodePool::clear_initial_node_count() {
  initial_node_count_ = 0;
}
inline ::google::protobuf::int32 NodePool::initial_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.initial_node_count)
  return initial_node_count_;
}
inline void NodePool::set_initial_node_count(::google::protobuf::int32 value) {
  
  initial_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.initial_node_count)
}

// repeated string locations = 13;
inline int NodePool::locations_size() const {
  return locations_.size();
}
inline void NodePool::clear_locations() {
  locations_.Clear();
}
inline const ::std::string& NodePool::locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.locations)
  return locations_.Get(index);
}
inline ::std::string* NodePool::mutable_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.locations)
  return locations_.Mutable(index);
}
inline void NodePool::set_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.locations)
  locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodePool::set_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.locations)
  locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodePool::set_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.locations)
}
inline void NodePool::set_locations(int index, const char* value, size_t size) {
  locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.locations)
}
inline ::std::string* NodePool::add_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodePool.locations)
  return locations_.Add();
}
inline void NodePool::add_locations(const ::std::string& value) {
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodePool.locations)
}
#if LANG_CXX11
inline void NodePool::add_locations(::std::string&& value) {
  locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodePool.locations)
}
#endif
inline void NodePool::add_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodePool.locations)
}
inline void NodePool::add_locations(const char* value, size_t size) {
  locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodePool.locations)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NodePool::locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodePool.locations)
  return locations_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
NodePool::mutable_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodePool.locations)
  return &locations_;
}

// string self_link = 100;
inline void NodePool::clear_self_link() {
  self_link_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodePool::self_link() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.self_link)
  return self_link_.GetNoArena();
}
inline void NodePool::set_self_link(const ::std::string& value) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.self_link)
}
#if LANG_CXX11
inline void NodePool::set_self_link(::std::string&& value) {
  
  self_link_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.self_link)
}
#endif
inline void NodePool::set_self_link(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.self_link)
}
inline void NodePool::set_self_link(const char* value, size_t size) {
  
  self_link_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.self_link)
}
inline ::std::string* NodePool::mutable_self_link() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.self_link)
  return self_link_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodePool::release_self_link() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.self_link)
  
  return self_link_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodePool::set_allocated_self_link(::std::string* self_link) {
  if (self_link != nullptr) {
    
  } else {
    
  }
  self_link_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), self_link);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.self_link)
}

// string version = 101;
inline void NodePool::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodePool::version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.version)
  return version_.GetNoArena();
}
inline void NodePool::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.version)
}
#if LANG_CXX11
inline void NodePool::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.version)
}
#endif
inline void NodePool::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.version)
}
inline void NodePool::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.version)
}
inline ::std::string* NodePool::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodePool::release_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodePool::set_allocated_version(::std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.version)
}

// repeated string instance_group_urls = 102;
inline int NodePool::instance_group_urls_size() const {
  return instance_group_urls_.size();
}
inline void NodePool::clear_instance_group_urls() {
  instance_group_urls_.Clear();
}
inline const ::std::string& NodePool::instance_group_urls(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_.Get(index);
}
inline ::std::string* NodePool::mutable_instance_group_urls(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_.Mutable(index);
}
inline void NodePool::set_instance_group_urls(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void NodePool::set_instance_group_urls(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.instance_group_urls)
  instance_group_urls_.Mutable(index)->assign(std::move(value));
}
#endif
inline void NodePool::set_instance_group_urls(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instance_group_urls_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.instance_group_urls)
}
inline void NodePool::set_instance_group_urls(int index, const char* value, size_t size) {
  instance_group_urls_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.instance_group_urls)
}
inline ::std::string* NodePool::add_instance_group_urls() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_.Add();
}
inline void NodePool::add_instance_group_urls(const ::std::string& value) {
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.NodePool.instance_group_urls)
}
#if LANG_CXX11
inline void NodePool::add_instance_group_urls(::std::string&& value) {
  instance_group_urls_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.NodePool.instance_group_urls)
}
#endif
inline void NodePool::add_instance_group_urls(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  instance_group_urls_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.NodePool.instance_group_urls)
}
inline void NodePool::add_instance_group_urls(const char* value, size_t size) {
  instance_group_urls_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.NodePool.instance_group_urls)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
NodePool::instance_group_urls() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodePool.instance_group_urls)
  return instance_group_urls_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
NodePool::mutable_instance_group_urls() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodePool.instance_group_urls)
  return &instance_group_urls_;
}

// .google.container.v1.NodePool.Status status = 103;
inline void NodePool::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::NodePool_Status NodePool::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.status)
  return static_cast< ::google::container::v1::NodePool_Status >(status_);
}
inline void NodePool::set_status(::google::container::v1::NodePool_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.status)
}

// string status_message = 104 [deprecated = true];
inline void NodePool::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NodePool::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.status_message)
  return status_message_.GetNoArena();
}
inline void NodePool::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.status_message)
}
#if LANG_CXX11
inline void NodePool::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NodePool.status_message)
}
#endif
inline void NodePool::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NodePool.status_message)
}
inline void NodePool::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NodePool.status_message)
}
inline ::std::string* NodePool::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodePool::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodePool::set_allocated_status_message(::std::string* status_message) {
  if (status_message != nullptr) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.status_message)
}

// .google.container.v1.NodePoolAutoscaling autoscaling = 4;
inline bool NodePool::has_autoscaling() const {
  return this != internal_default_instance() && autoscaling_ != nullptr;
}
inline void NodePool::clear_autoscaling() {
  if (GetArenaNoVirtual() == nullptr && autoscaling_ != nullptr) {
    delete autoscaling_;
  }
  autoscaling_ = nullptr;
}
inline const ::google::container::v1::NodePoolAutoscaling& NodePool::autoscaling() const {
  const ::google::container::v1::NodePoolAutoscaling* p = autoscaling_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.autoscaling)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodePoolAutoscaling*>(
      &::google::container::v1::_NodePoolAutoscaling_default_instance_);
}
inline ::google::container::v1::NodePoolAutoscaling* NodePool::release_autoscaling() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.autoscaling)
  
  ::google::container::v1::NodePoolAutoscaling* temp = autoscaling_;
  autoscaling_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodePoolAutoscaling* NodePool::mutable_autoscaling() {
  
  if (autoscaling_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodePoolAutoscaling>(GetArenaNoVirtual());
    autoscaling_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.autoscaling)
  return autoscaling_;
}
inline void NodePool::set_allocated_autoscaling(::google::container::v1::NodePoolAutoscaling* autoscaling) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete autoscaling_;
  }
  if (autoscaling) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autoscaling = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, autoscaling, submessage_arena);
    }
    
  } else {
    
  }
  autoscaling_ = autoscaling;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.autoscaling)
}

// .google.container.v1.NodeManagement management = 5;
inline bool NodePool::has_management() const {
  return this != internal_default_instance() && management_ != nullptr;
}
inline void NodePool::clear_management() {
  if (GetArenaNoVirtual() == nullptr && management_ != nullptr) {
    delete management_;
  }
  management_ = nullptr;
}
inline const ::google::container::v1::NodeManagement& NodePool::management() const {
  const ::google::container::v1::NodeManagement* p = management_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.management)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodeManagement*>(
      &::google::container::v1::_NodeManagement_default_instance_);
}
inline ::google::container::v1::NodeManagement* NodePool::release_management() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.management)
  
  ::google::container::v1::NodeManagement* temp = management_;
  management_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodeManagement* NodePool::mutable_management() {
  
  if (management_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodeManagement>(GetArenaNoVirtual());
    management_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.management)
  return management_;
}
inline void NodePool::set_allocated_management(::google::container::v1::NodeManagement* management) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete management_;
  }
  if (management) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      management = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, management, submessage_arena);
    }
    
  } else {
    
  }
  management_ = management;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.management)
}

// .google.container.v1.MaxPodsConstraint max_pods_constraint = 6;
inline bool NodePool::has_max_pods_constraint() const {
  return this != internal_default_instance() && max_pods_constraint_ != nullptr;
}
inline void NodePool::clear_max_pods_constraint() {
  if (GetArenaNoVirtual() == nullptr && max_pods_constraint_ != nullptr) {
    delete max_pods_constraint_;
  }
  max_pods_constraint_ = nullptr;
}
inline const ::google::container::v1::MaxPodsConstraint& NodePool::max_pods_constraint() const {
  const ::google::container::v1::MaxPodsConstraint* p = max_pods_constraint_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.max_pods_constraint)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::MaxPodsConstraint*>(
      &::google::container::v1::_MaxPodsConstraint_default_instance_);
}
inline ::google::container::v1::MaxPodsConstraint* NodePool::release_max_pods_constraint() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.max_pods_constraint)
  
  ::google::container::v1::MaxPodsConstraint* temp = max_pods_constraint_;
  max_pods_constraint_ = nullptr;
  return temp;
}
inline ::google::container::v1::MaxPodsConstraint* NodePool::mutable_max_pods_constraint() {
  
  if (max_pods_constraint_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::MaxPodsConstraint>(GetArenaNoVirtual());
    max_pods_constraint_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.max_pods_constraint)
  return max_pods_constraint_;
}
inline void NodePool::set_allocated_max_pods_constraint(::google::container::v1::MaxPodsConstraint* max_pods_constraint) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete max_pods_constraint_;
  }
  if (max_pods_constraint) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      max_pods_constraint = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, max_pods_constraint, submessage_arena);
    }
    
  } else {
    
  }
  max_pods_constraint_ = max_pods_constraint;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.max_pods_constraint)
}

// repeated .google.container.v1.StatusCondition conditions = 105;
inline int NodePool::conditions_size() const {
  return conditions_.size();
}
inline void NodePool::clear_conditions() {
  conditions_.Clear();
}
inline ::google::container::v1::StatusCondition* NodePool::mutable_conditions(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.conditions)
  return conditions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >*
NodePool::mutable_conditions() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.NodePool.conditions)
  return &conditions_;
}
inline const ::google::container::v1::StatusCondition& NodePool::conditions(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.conditions)
  return conditions_.Get(index);
}
inline ::google::container::v1::StatusCondition* NodePool::add_conditions() {
  // @@protoc_insertion_point(field_add:google.container.v1.NodePool.conditions)
  return conditions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::StatusCondition >&
NodePool::conditions() const {
  // @@protoc_insertion_point(field_list:google.container.v1.NodePool.conditions)
  return conditions_;
}

// int32 pod_ipv4_cidr_size = 7;
inline void NodePool::clear_pod_ipv4_cidr_size() {
  pod_ipv4_cidr_size_ = 0;
}
inline ::google::protobuf::int32 NodePool::pod_ipv4_cidr_size() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.pod_ipv4_cidr_size)
  return pod_ipv4_cidr_size_;
}
inline void NodePool::set_pod_ipv4_cidr_size(::google::protobuf::int32 value) {
  
  pod_ipv4_cidr_size_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePool.pod_ipv4_cidr_size)
}

// .google.container.v1.NodePool.UpgradeSettings upgrade_settings = 107;
inline bool NodePool::has_upgrade_settings() const {
  return this != internal_default_instance() && upgrade_settings_ != nullptr;
}
inline void NodePool::clear_upgrade_settings() {
  if (GetArenaNoVirtual() == nullptr && upgrade_settings_ != nullptr) {
    delete upgrade_settings_;
  }
  upgrade_settings_ = nullptr;
}
inline const ::google::container::v1::NodePool_UpgradeSettings& NodePool::upgrade_settings() const {
  const ::google::container::v1::NodePool_UpgradeSettings* p = upgrade_settings_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodePool.upgrade_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodePool_UpgradeSettings*>(
      &::google::container::v1::_NodePool_UpgradeSettings_default_instance_);
}
inline ::google::container::v1::NodePool_UpgradeSettings* NodePool::release_upgrade_settings() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodePool.upgrade_settings)
  
  ::google::container::v1::NodePool_UpgradeSettings* temp = upgrade_settings_;
  upgrade_settings_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodePool_UpgradeSettings* NodePool::mutable_upgrade_settings() {
  
  if (upgrade_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodePool_UpgradeSettings>(GetArenaNoVirtual());
    upgrade_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodePool.upgrade_settings)
  return upgrade_settings_;
}
inline void NodePool::set_allocated_upgrade_settings(::google::container::v1::NodePool_UpgradeSettings* upgrade_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upgrade_settings_;
  }
  if (upgrade_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upgrade_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upgrade_settings, submessage_arena);
    }
    
  } else {
    
  }
  upgrade_settings_ = upgrade_settings;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodePool.upgrade_settings)
}

// -------------------------------------------------------------------

// NodeManagement

// bool auto_upgrade = 1;
inline void NodeManagement::clear_auto_upgrade() {
  auto_upgrade_ = false;
}
inline bool NodeManagement::auto_upgrade() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeManagement.auto_upgrade)
  return auto_upgrade_;
}
inline void NodeManagement::set_auto_upgrade(bool value) {
  
  auto_upgrade_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeManagement.auto_upgrade)
}

// bool auto_repair = 2;
inline void NodeManagement::clear_auto_repair() {
  auto_repair_ = false;
}
inline bool NodeManagement::auto_repair() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodeManagement.auto_repair)
  return auto_repair_;
}
inline void NodeManagement::set_auto_repair(bool value) {
  
  auto_repair_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodeManagement.auto_repair)
}

// .google.container.v1.AutoUpgradeOptions upgrade_options = 10;
inline bool NodeManagement::has_upgrade_options() const {
  return this != internal_default_instance() && upgrade_options_ != nullptr;
}
inline void NodeManagement::clear_upgrade_options() {
  if (GetArenaNoVirtual() == nullptr && upgrade_options_ != nullptr) {
    delete upgrade_options_;
  }
  upgrade_options_ = nullptr;
}
inline const ::google::container::v1::AutoUpgradeOptions& NodeManagement::upgrade_options() const {
  const ::google::container::v1::AutoUpgradeOptions* p = upgrade_options_;
  // @@protoc_insertion_point(field_get:google.container.v1.NodeManagement.upgrade_options)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::AutoUpgradeOptions*>(
      &::google::container::v1::_AutoUpgradeOptions_default_instance_);
}
inline ::google::container::v1::AutoUpgradeOptions* NodeManagement::release_upgrade_options() {
  // @@protoc_insertion_point(field_release:google.container.v1.NodeManagement.upgrade_options)
  
  ::google::container::v1::AutoUpgradeOptions* temp = upgrade_options_;
  upgrade_options_ = nullptr;
  return temp;
}
inline ::google::container::v1::AutoUpgradeOptions* NodeManagement::mutable_upgrade_options() {
  
  if (upgrade_options_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::AutoUpgradeOptions>(GetArenaNoVirtual());
    upgrade_options_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NodeManagement.upgrade_options)
  return upgrade_options_;
}
inline void NodeManagement::set_allocated_upgrade_options(::google::container::v1::AutoUpgradeOptions* upgrade_options) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upgrade_options_;
  }
  if (upgrade_options) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upgrade_options = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upgrade_options, submessage_arena);
    }
    
  } else {
    
  }
  upgrade_options_ = upgrade_options;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NodeManagement.upgrade_options)
}

// -------------------------------------------------------------------

// AutoUpgradeOptions

// string auto_upgrade_start_time = 1;
inline void AutoUpgradeOptions::clear_auto_upgrade_start_time() {
  auto_upgrade_start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoUpgradeOptions::auto_upgrade_start_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
  return auto_upgrade_start_time_.GetNoArena();
}
inline void AutoUpgradeOptions::set_auto_upgrade_start_time(const ::std::string& value) {
  
  auto_upgrade_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
#if LANG_CXX11
inline void AutoUpgradeOptions::set_auto_upgrade_start_time(::std::string&& value) {
  
  auto_upgrade_start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
#endif
inline void AutoUpgradeOptions::set_auto_upgrade_start_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  auto_upgrade_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
inline void AutoUpgradeOptions::set_auto_upgrade_start_time(const char* value, size_t size) {
  
  auto_upgrade_start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}
inline ::std::string* AutoUpgradeOptions::mutable_auto_upgrade_start_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
  return auto_upgrade_start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoUpgradeOptions::release_auto_upgrade_start_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
  
  return auto_upgrade_start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoUpgradeOptions::set_allocated_auto_upgrade_start_time(::std::string* auto_upgrade_start_time) {
  if (auto_upgrade_start_time != nullptr) {
    
  } else {
    
  }
  auto_upgrade_start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), auto_upgrade_start_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoUpgradeOptions.auto_upgrade_start_time)
}

// string description = 2;
inline void AutoUpgradeOptions::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoUpgradeOptions::description() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoUpgradeOptions.description)
  return description_.GetNoArena();
}
inline void AutoUpgradeOptions::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoUpgradeOptions.description)
}
#if LANG_CXX11
inline void AutoUpgradeOptions::set_description(::std::string&& value) {
  
  description_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoUpgradeOptions.description)
}
#endif
inline void AutoUpgradeOptions::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoUpgradeOptions.description)
}
inline void AutoUpgradeOptions::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoUpgradeOptions.description)
}
inline ::std::string* AutoUpgradeOptions::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoUpgradeOptions.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoUpgradeOptions::release_description() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoUpgradeOptions.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoUpgradeOptions::set_allocated_description(::std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoUpgradeOptions.description)
}

// -------------------------------------------------------------------

// MaintenancePolicy

// .google.container.v1.MaintenanceWindow window = 1;
inline bool MaintenancePolicy::has_window() const {
  return this != internal_default_instance() && window_ != nullptr;
}
inline void MaintenancePolicy::clear_window() {
  if (GetArenaNoVirtual() == nullptr && window_ != nullptr) {
    delete window_;
  }
  window_ = nullptr;
}
inline const ::google::container::v1::MaintenanceWindow& MaintenancePolicy::window() const {
  const ::google::container::v1::MaintenanceWindow* p = window_;
  // @@protoc_insertion_point(field_get:google.container.v1.MaintenancePolicy.window)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::MaintenanceWindow*>(
      &::google::container::v1::_MaintenanceWindow_default_instance_);
}
inline ::google::container::v1::MaintenanceWindow* MaintenancePolicy::release_window() {
  // @@protoc_insertion_point(field_release:google.container.v1.MaintenancePolicy.window)
  
  ::google::container::v1::MaintenanceWindow* temp = window_;
  window_ = nullptr;
  return temp;
}
inline ::google::container::v1::MaintenanceWindow* MaintenancePolicy::mutable_window() {
  
  if (window_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::MaintenanceWindow>(GetArenaNoVirtual());
    window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.MaintenancePolicy.window)
  return window_;
}
inline void MaintenancePolicy::set_allocated_window(::google::container::v1::MaintenanceWindow* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_;
  }
  if (window) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MaintenancePolicy.window)
}

// string resource_version = 3;
inline void MaintenancePolicy::clear_resource_version() {
  resource_version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MaintenancePolicy::resource_version() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MaintenancePolicy.resource_version)
  return resource_version_.GetNoArena();
}
inline void MaintenancePolicy::set_resource_version(const ::std::string& value) {
  
  resource_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.MaintenancePolicy.resource_version)
}
#if LANG_CXX11
inline void MaintenancePolicy::set_resource_version(::std::string&& value) {
  
  resource_version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.MaintenancePolicy.resource_version)
}
#endif
inline void MaintenancePolicy::set_resource_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.MaintenancePolicy.resource_version)
}
inline void MaintenancePolicy::set_resource_version(const char* value, size_t size) {
  
  resource_version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.MaintenancePolicy.resource_version)
}
inline ::std::string* MaintenancePolicy::mutable_resource_version() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.MaintenancePolicy.resource_version)
  return resource_version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MaintenancePolicy::release_resource_version() {
  // @@protoc_insertion_point(field_release:google.container.v1.MaintenancePolicy.resource_version)
  
  return resource_version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MaintenancePolicy::set_allocated_resource_version(::std::string* resource_version) {
  if (resource_version != nullptr) {
    
  } else {
    
  }
  resource_version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_version);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.MaintenancePolicy.resource_version)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// MaintenanceWindow

// .google.container.v1.DailyMaintenanceWindow daily_maintenance_window = 2;
inline bool MaintenanceWindow::has_daily_maintenance_window() const {
  return policy_case() == kDailyMaintenanceWindow;
}
inline void MaintenanceWindow::set_has_daily_maintenance_window() {
  _oneof_case_[0] = kDailyMaintenanceWindow;
}
inline void MaintenanceWindow::clear_daily_maintenance_window() {
  if (has_daily_maintenance_window()) {
    delete policy_.daily_maintenance_window_;
    clear_has_policy();
  }
}
inline ::google::container::v1::DailyMaintenanceWindow* MaintenanceWindow::release_daily_maintenance_window() {
  // @@protoc_insertion_point(field_release:google.container.v1.MaintenanceWindow.daily_maintenance_window)
  if (has_daily_maintenance_window()) {
    clear_has_policy();
      ::google::container::v1::DailyMaintenanceWindow* temp = policy_.daily_maintenance_window_;
    policy_.daily_maintenance_window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::container::v1::DailyMaintenanceWindow& MaintenanceWindow::daily_maintenance_window() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MaintenanceWindow.daily_maintenance_window)
  return has_daily_maintenance_window()
      ? *policy_.daily_maintenance_window_
      : *reinterpret_cast< ::google::container::v1::DailyMaintenanceWindow*>(&::google::container::v1::_DailyMaintenanceWindow_default_instance_);
}
inline ::google::container::v1::DailyMaintenanceWindow* MaintenanceWindow::mutable_daily_maintenance_window() {
  if (!has_daily_maintenance_window()) {
    clear_policy();
    set_has_daily_maintenance_window();
    policy_.daily_maintenance_window_ = CreateMaybeMessage< ::google::container::v1::DailyMaintenanceWindow >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.MaintenanceWindow.daily_maintenance_window)
  return policy_.daily_maintenance_window_;
}

// .google.container.v1.RecurringTimeWindow recurring_window = 3;
inline bool MaintenanceWindow::has_recurring_window() const {
  return policy_case() == kRecurringWindow;
}
inline void MaintenanceWindow::set_has_recurring_window() {
  _oneof_case_[0] = kRecurringWindow;
}
inline void MaintenanceWindow::clear_recurring_window() {
  if (has_recurring_window()) {
    delete policy_.recurring_window_;
    clear_has_policy();
  }
}
inline ::google::container::v1::RecurringTimeWindow* MaintenanceWindow::release_recurring_window() {
  // @@protoc_insertion_point(field_release:google.container.v1.MaintenanceWindow.recurring_window)
  if (has_recurring_window()) {
    clear_has_policy();
      ::google::container::v1::RecurringTimeWindow* temp = policy_.recurring_window_;
    policy_.recurring_window_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::google::container::v1::RecurringTimeWindow& MaintenanceWindow::recurring_window() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MaintenanceWindow.recurring_window)
  return has_recurring_window()
      ? *policy_.recurring_window_
      : *reinterpret_cast< ::google::container::v1::RecurringTimeWindow*>(&::google::container::v1::_RecurringTimeWindow_default_instance_);
}
inline ::google::container::v1::RecurringTimeWindow* MaintenanceWindow::mutable_recurring_window() {
  if (!has_recurring_window()) {
    clear_policy();
    set_has_recurring_window();
    policy_.recurring_window_ = CreateMaybeMessage< ::google::container::v1::RecurringTimeWindow >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.MaintenanceWindow.recurring_window)
  return policy_.recurring_window_;
}

// map<string, .google.container.v1.TimeWindow> maintenance_exclusions = 4;
inline int MaintenanceWindow::maintenance_exclusions_size() const {
  return maintenance_exclusions_.size();
}
inline void MaintenanceWindow::clear_maintenance_exclusions() {
  maintenance_exclusions_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::google::container::v1::TimeWindow >&
MaintenanceWindow::maintenance_exclusions() const {
  // @@protoc_insertion_point(field_map:google.container.v1.MaintenanceWindow.maintenance_exclusions)
  return maintenance_exclusions_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::google::container::v1::TimeWindow >*
MaintenanceWindow::mutable_maintenance_exclusions() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.MaintenanceWindow.maintenance_exclusions)
  return maintenance_exclusions_.MutableMap();
}

inline bool MaintenanceWindow::has_policy() const {
  return policy_case() != POLICY_NOT_SET;
}
inline void MaintenanceWindow::clear_has_policy() {
  _oneof_case_[0] = POLICY_NOT_SET;
}
inline MaintenanceWindow::PolicyCase MaintenanceWindow::policy_case() const {
  return MaintenanceWindow::PolicyCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TimeWindow

// .google.protobuf.Timestamp start_time = 1;
inline bool TimeWindow::has_start_time() const {
  return this != internal_default_instance() && start_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& TimeWindow::start_time() const {
  const ::google::protobuf::Timestamp* p = start_time_;
  // @@protoc_insertion_point(field_get:google.container.v1.TimeWindow.start_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeWindow::release_start_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.TimeWindow.start_time)
  
  ::google::protobuf::Timestamp* temp = start_time_;
  start_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeWindow::mutable_start_time() {
  
  if (start_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    start_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.TimeWindow.start_time)
  return start_time_;
}
inline void TimeWindow::set_allocated_start_time(::google::protobuf::Timestamp* start_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(start_time_);
  }
  if (start_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(start_time)->GetArena();
    if (message_arena != submessage_arena) {
      start_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, start_time, submessage_arena);
    }
    
  } else {
    
  }
  start_time_ = start_time;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.TimeWindow.start_time)
}

// .google.protobuf.Timestamp end_time = 2;
inline bool TimeWindow::has_end_time() const {
  return this != internal_default_instance() && end_time_ != nullptr;
}
inline const ::google::protobuf::Timestamp& TimeWindow::end_time() const {
  const ::google::protobuf::Timestamp* p = end_time_;
  // @@protoc_insertion_point(field_get:google.container.v1.TimeWindow.end_time)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::protobuf::Timestamp*>(
      &::google::protobuf::_Timestamp_default_instance_);
}
inline ::google::protobuf::Timestamp* TimeWindow::release_end_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.TimeWindow.end_time)
  
  ::google::protobuf::Timestamp* temp = end_time_;
  end_time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TimeWindow::mutable_end_time() {
  
  if (end_time_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::protobuf::Timestamp>(GetArenaNoVirtual());
    end_time_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.TimeWindow.end_time)
  return end_time_;
}
inline void TimeWindow::set_allocated_end_time(::google::protobuf::Timestamp* end_time) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(end_time_);
  }
  if (end_time) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(end_time)->GetArena();
    if (message_arena != submessage_arena) {
      end_time = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, end_time, submessage_arena);
    }
    
  } else {
    
  }
  end_time_ = end_time;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.TimeWindow.end_time)
}

// -------------------------------------------------------------------

// RecurringTimeWindow

// .google.container.v1.TimeWindow window = 1;
inline bool RecurringTimeWindow::has_window() const {
  return this != internal_default_instance() && window_ != nullptr;
}
inline void RecurringTimeWindow::clear_window() {
  if (GetArenaNoVirtual() == nullptr && window_ != nullptr) {
    delete window_;
  }
  window_ = nullptr;
}
inline const ::google::container::v1::TimeWindow& RecurringTimeWindow::window() const {
  const ::google::container::v1::TimeWindow* p = window_;
  // @@protoc_insertion_point(field_get:google.container.v1.RecurringTimeWindow.window)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::TimeWindow*>(
      &::google::container::v1::_TimeWindow_default_instance_);
}
inline ::google::container::v1::TimeWindow* RecurringTimeWindow::release_window() {
  // @@protoc_insertion_point(field_release:google.container.v1.RecurringTimeWindow.window)
  
  ::google::container::v1::TimeWindow* temp = window_;
  window_ = nullptr;
  return temp;
}
inline ::google::container::v1::TimeWindow* RecurringTimeWindow::mutable_window() {
  
  if (window_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::TimeWindow>(GetArenaNoVirtual());
    window_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.RecurringTimeWindow.window)
  return window_;
}
inline void RecurringTimeWindow::set_allocated_window(::google::container::v1::TimeWindow* window) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete window_;
  }
  if (window) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      window = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, window, submessage_arena);
    }
    
  } else {
    
  }
  window_ = window;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RecurringTimeWindow.window)
}

// string recurrence = 2;
inline void RecurringTimeWindow::clear_recurrence() {
  recurrence_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RecurringTimeWindow::recurrence() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RecurringTimeWindow.recurrence)
  return recurrence_.GetNoArena();
}
inline void RecurringTimeWindow::set_recurrence(const ::std::string& value) {
  
  recurrence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RecurringTimeWindow.recurrence)
}
#if LANG_CXX11
inline void RecurringTimeWindow::set_recurrence(::std::string&& value) {
  
  recurrence_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RecurringTimeWindow.recurrence)
}
#endif
inline void RecurringTimeWindow::set_recurrence(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  recurrence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RecurringTimeWindow.recurrence)
}
inline void RecurringTimeWindow::set_recurrence(const char* value, size_t size) {
  
  recurrence_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RecurringTimeWindow.recurrence)
}
inline ::std::string* RecurringTimeWindow::mutable_recurrence() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RecurringTimeWindow.recurrence)
  return recurrence_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecurringTimeWindow::release_recurrence() {
  // @@protoc_insertion_point(field_release:google.container.v1.RecurringTimeWindow.recurrence)
  
  return recurrence_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecurringTimeWindow::set_allocated_recurrence(::std::string* recurrence) {
  if (recurrence != nullptr) {
    
  } else {
    
  }
  recurrence_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recurrence);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RecurringTimeWindow.recurrence)
}

// -------------------------------------------------------------------

// DailyMaintenanceWindow

// string start_time = 2;
inline void DailyMaintenanceWindow::clear_start_time() {
  start_time_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DailyMaintenanceWindow::start_time() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DailyMaintenanceWindow.start_time)
  return start_time_.GetNoArena();
}
inline void DailyMaintenanceWindow::set_start_time(const ::std::string& value) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DailyMaintenanceWindow.start_time)
}
#if LANG_CXX11
inline void DailyMaintenanceWindow::set_start_time(::std::string&& value) {
  
  start_time_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DailyMaintenanceWindow.start_time)
}
#endif
inline void DailyMaintenanceWindow::set_start_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DailyMaintenanceWindow.start_time)
}
inline void DailyMaintenanceWindow::set_start_time(const char* value, size_t size) {
  
  start_time_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DailyMaintenanceWindow.start_time)
}
inline ::std::string* DailyMaintenanceWindow::mutable_start_time() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DailyMaintenanceWindow.start_time)
  return start_time_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DailyMaintenanceWindow::release_start_time() {
  // @@protoc_insertion_point(field_release:google.container.v1.DailyMaintenanceWindow.start_time)
  
  return start_time_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DailyMaintenanceWindow::set_allocated_start_time(::std::string* start_time) {
  if (start_time != nullptr) {
    
  } else {
    
  }
  start_time_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), start_time);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DailyMaintenanceWindow.start_time)
}

// string duration = 3;
inline void DailyMaintenanceWindow::clear_duration() {
  duration_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DailyMaintenanceWindow::duration() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DailyMaintenanceWindow.duration)
  return duration_.GetNoArena();
}
inline void DailyMaintenanceWindow::set_duration(const ::std::string& value) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DailyMaintenanceWindow.duration)
}
#if LANG_CXX11
inline void DailyMaintenanceWindow::set_duration(::std::string&& value) {
  
  duration_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DailyMaintenanceWindow.duration)
}
#endif
inline void DailyMaintenanceWindow::set_duration(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DailyMaintenanceWindow.duration)
}
inline void DailyMaintenanceWindow::set_duration(const char* value, size_t size) {
  
  duration_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DailyMaintenanceWindow.duration)
}
inline ::std::string* DailyMaintenanceWindow::mutable_duration() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DailyMaintenanceWindow.duration)
  return duration_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DailyMaintenanceWindow::release_duration() {
  // @@protoc_insertion_point(field_release:google.container.v1.DailyMaintenanceWindow.duration)
  
  return duration_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DailyMaintenanceWindow::set_allocated_duration(::std::string* duration) {
  if (duration != nullptr) {
    
  } else {
    
  }
  duration_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), duration);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DailyMaintenanceWindow.duration)
}

// -------------------------------------------------------------------

// SetNodePoolManagementRequest

// string project_id = 1 [deprecated = true];
inline void SetNodePoolManagementRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolManagementRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetNodePoolManagementRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.project_id)
}
#if LANG_CXX11
inline void SetNodePoolManagementRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.project_id)
}
#endif
inline void SetNodePoolManagementRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.project_id)
}
inline void SetNodePoolManagementRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.project_id)
}
inline ::std::string* SetNodePoolManagementRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolManagementRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolManagementRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetNodePoolManagementRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolManagementRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.zone)
  return zone_.GetNoArena();
}
inline void SetNodePoolManagementRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.zone)
}
#if LANG_CXX11
inline void SetNodePoolManagementRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.zone)
}
#endif
inline void SetNodePoolManagementRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.zone)
}
inline void SetNodePoolManagementRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.zone)
}
inline ::std::string* SetNodePoolManagementRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolManagementRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolManagementRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetNodePoolManagementRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolManagementRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetNodePoolManagementRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
#if LANG_CXX11
inline void SetNodePoolManagementRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
#endif
inline void SetNodePoolManagementRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
inline void SetNodePoolManagementRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}
inline ::std::string* SetNodePoolManagementRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolManagementRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolManagementRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.cluster_id)
}

// string node_pool_id = 4 [deprecated = true];
inline void SetNodePoolManagementRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolManagementRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void SetNodePoolManagementRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
#if LANG_CXX11
inline void SetNodePoolManagementRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
#endif
inline void SetNodePoolManagementRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
inline void SetNodePoolManagementRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}
inline ::std::string* SetNodePoolManagementRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolManagementRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolManagementRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != nullptr) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.node_pool_id)
}

// .google.container.v1.NodeManagement management = 5 [(.google.api.field_behavior) = REQUIRED];
inline bool SetNodePoolManagementRequest::has_management() const {
  return this != internal_default_instance() && management_ != nullptr;
}
inline void SetNodePoolManagementRequest::clear_management() {
  if (GetArenaNoVirtual() == nullptr && management_ != nullptr) {
    delete management_;
  }
  management_ = nullptr;
}
inline const ::google::container::v1::NodeManagement& SetNodePoolManagementRequest::management() const {
  const ::google::container::v1::NodeManagement* p = management_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.management)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodeManagement*>(
      &::google::container::v1::_NodeManagement_default_instance_);
}
inline ::google::container::v1::NodeManagement* SetNodePoolManagementRequest::release_management() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.management)
  
  ::google::container::v1::NodeManagement* temp = management_;
  management_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodeManagement* SetNodePoolManagementRequest::mutable_management() {
  
  if (management_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodeManagement>(GetArenaNoVirtual());
    management_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.management)
  return management_;
}
inline void SetNodePoolManagementRequest::set_allocated_management(::google::container::v1::NodeManagement* management) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete management_;
  }
  if (management) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      management = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, management, submessage_arena);
    }
    
  } else {
    
  }
  management_ = management;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.management)
}

// string name = 7;
inline void SetNodePoolManagementRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolManagementRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolManagementRequest.name)
  return name_.GetNoArena();
}
inline void SetNodePoolManagementRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolManagementRequest.name)
}
#if LANG_CXX11
inline void SetNodePoolManagementRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolManagementRequest.name)
}
#endif
inline void SetNodePoolManagementRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolManagementRequest.name)
}
inline void SetNodePoolManagementRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolManagementRequest.name)
}
inline ::std::string* SetNodePoolManagementRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolManagementRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolManagementRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolManagementRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolManagementRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolManagementRequest.name)
}

// -------------------------------------------------------------------

// SetNodePoolSizeRequest

// string project_id = 1 [deprecated = true];
inline void SetNodePoolSizeRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolSizeRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetNodePoolSizeRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.project_id)
}
#if LANG_CXX11
inline void SetNodePoolSizeRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.project_id)
}
#endif
inline void SetNodePoolSizeRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.project_id)
}
inline void SetNodePoolSizeRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.project_id)
}
inline ::std::string* SetNodePoolSizeRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolSizeRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolSizeRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetNodePoolSizeRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolSizeRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.zone)
  return zone_.GetNoArena();
}
inline void SetNodePoolSizeRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.zone)
}
#if LANG_CXX11
inline void SetNodePoolSizeRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.zone)
}
#endif
inline void SetNodePoolSizeRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.zone)
}
inline void SetNodePoolSizeRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.zone)
}
inline ::std::string* SetNodePoolSizeRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolSizeRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolSizeRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetNodePoolSizeRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolSizeRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetNodePoolSizeRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
#if LANG_CXX11
inline void SetNodePoolSizeRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
#endif
inline void SetNodePoolSizeRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
inline void SetNodePoolSizeRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}
inline ::std::string* SetNodePoolSizeRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolSizeRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolSizeRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.cluster_id)
}

// string node_pool_id = 4 [deprecated = true];
inline void SetNodePoolSizeRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolSizeRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void SetNodePoolSizeRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
#if LANG_CXX11
inline void SetNodePoolSizeRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
#endif
inline void SetNodePoolSizeRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
inline void SetNodePoolSizeRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}
inline ::std::string* SetNodePoolSizeRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolSizeRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolSizeRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != nullptr) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.node_pool_id)
}

// int32 node_count = 5 [(.google.api.field_behavior) = REQUIRED];
inline void SetNodePoolSizeRequest::clear_node_count() {
  node_count_ = 0;
}
inline ::google::protobuf::int32 SetNodePoolSizeRequest::node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.node_count)
  return node_count_;
}
inline void SetNodePoolSizeRequest::set_node_count(::google::protobuf::int32 value) {
  
  node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.node_count)
}

// string name = 7;
inline void SetNodePoolSizeRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNodePoolSizeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNodePoolSizeRequest.name)
  return name_.GetNoArena();
}
inline void SetNodePoolSizeRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNodePoolSizeRequest.name)
}
#if LANG_CXX11
inline void SetNodePoolSizeRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNodePoolSizeRequest.name)
}
#endif
inline void SetNodePoolSizeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNodePoolSizeRequest.name)
}
inline void SetNodePoolSizeRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNodePoolSizeRequest.name)
}
inline ::std::string* SetNodePoolSizeRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNodePoolSizeRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNodePoolSizeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNodePoolSizeRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNodePoolSizeRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNodePoolSizeRequest.name)
}

// -------------------------------------------------------------------

// RollbackNodePoolUpgradeRequest

// string project_id = 1 [deprecated = true];
inline void RollbackNodePoolUpgradeRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackNodePoolUpgradeRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
  return project_id_.GetNoArena();
}
inline void RollbackNodePoolUpgradeRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
#if LANG_CXX11
inline void RollbackNodePoolUpgradeRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
#endif
inline void RollbackNodePoolUpgradeRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
inline void RollbackNodePoolUpgradeRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}
inline ::std::string* RollbackNodePoolUpgradeRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackNodePoolUpgradeRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackNodePoolUpgradeRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void RollbackNodePoolUpgradeRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackNodePoolUpgradeRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
  return zone_.GetNoArena();
}
inline void RollbackNodePoolUpgradeRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
#if LANG_CXX11
inline void RollbackNodePoolUpgradeRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
#endif
inline void RollbackNodePoolUpgradeRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
inline void RollbackNodePoolUpgradeRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}
inline ::std::string* RollbackNodePoolUpgradeRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackNodePoolUpgradeRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackNodePoolUpgradeRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void RollbackNodePoolUpgradeRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackNodePoolUpgradeRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void RollbackNodePoolUpgradeRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
#if LANG_CXX11
inline void RollbackNodePoolUpgradeRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
#endif
inline void RollbackNodePoolUpgradeRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
inline void RollbackNodePoolUpgradeRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}
inline ::std::string* RollbackNodePoolUpgradeRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackNodePoolUpgradeRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackNodePoolUpgradeRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.cluster_id)
}

// string node_pool_id = 4 [deprecated = true];
inline void RollbackNodePoolUpgradeRequest::clear_node_pool_id() {
  node_pool_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackNodePoolUpgradeRequest::node_pool_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
  return node_pool_id_.GetNoArena();
}
inline void RollbackNodePoolUpgradeRequest::set_node_pool_id(const ::std::string& value) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
#if LANG_CXX11
inline void RollbackNodePoolUpgradeRequest::set_node_pool_id(::std::string&& value) {
  
  node_pool_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
#endif
inline void RollbackNodePoolUpgradeRequest::set_node_pool_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
inline void RollbackNodePoolUpgradeRequest::set_node_pool_id(const char* value, size_t size) {
  
  node_pool_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}
inline ::std::string* RollbackNodePoolUpgradeRequest::mutable_node_pool_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
  return node_pool_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackNodePoolUpgradeRequest::release_node_pool_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
  
  return node_pool_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackNodePoolUpgradeRequest::set_allocated_node_pool_id(::std::string* node_pool_id) {
  if (node_pool_id != nullptr) {
    
  } else {
    
  }
  node_pool_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), node_pool_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.node_pool_id)
}

// string name = 6;
inline void RollbackNodePoolUpgradeRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& RollbackNodePoolUpgradeRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.RollbackNodePoolUpgradeRequest.name)
  return name_.GetNoArena();
}
inline void RollbackNodePoolUpgradeRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.RollbackNodePoolUpgradeRequest.name)
}
#if LANG_CXX11
inline void RollbackNodePoolUpgradeRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.RollbackNodePoolUpgradeRequest.name)
}
#endif
inline void RollbackNodePoolUpgradeRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.RollbackNodePoolUpgradeRequest.name)
}
inline void RollbackNodePoolUpgradeRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.RollbackNodePoolUpgradeRequest.name)
}
inline ::std::string* RollbackNodePoolUpgradeRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.RollbackNodePoolUpgradeRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RollbackNodePoolUpgradeRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.RollbackNodePoolUpgradeRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RollbackNodePoolUpgradeRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.RollbackNodePoolUpgradeRequest.name)
}

// -------------------------------------------------------------------

// ListNodePoolsResponse

// repeated .google.container.v1.NodePool node_pools = 1;
inline int ListNodePoolsResponse::node_pools_size() const {
  return node_pools_.size();
}
inline void ListNodePoolsResponse::clear_node_pools() {
  node_pools_.Clear();
}
inline ::google::container::v1::NodePool* ListNodePoolsResponse::mutable_node_pools(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >*
ListNodePoolsResponse::mutable_node_pools() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListNodePoolsResponse.node_pools)
  return &node_pools_;
}
inline const ::google::container::v1::NodePool& ListNodePoolsResponse::node_pools(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_.Get(index);
}
inline ::google::container::v1::NodePool* ListNodePoolsResponse::add_node_pools() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::NodePool >&
ListNodePoolsResponse::node_pools() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListNodePoolsResponse.node_pools)
  return node_pools_;
}

// -------------------------------------------------------------------

// ClusterAutoscaling

// bool enable_node_autoprovisioning = 1;
inline void ClusterAutoscaling::clear_enable_node_autoprovisioning() {
  enable_node_autoprovisioning_ = false;
}
inline bool ClusterAutoscaling::enable_node_autoprovisioning() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterAutoscaling.enable_node_autoprovisioning)
  return enable_node_autoprovisioning_;
}
inline void ClusterAutoscaling::set_enable_node_autoprovisioning(bool value) {
  
  enable_node_autoprovisioning_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterAutoscaling.enable_node_autoprovisioning)
}

// repeated .google.container.v1.ResourceLimit resource_limits = 2;
inline int ClusterAutoscaling::resource_limits_size() const {
  return resource_limits_.size();
}
inline void ClusterAutoscaling::clear_resource_limits() {
  resource_limits_.Clear();
}
inline ::google::container::v1::ResourceLimit* ClusterAutoscaling::mutable_resource_limits(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterAutoscaling.resource_limits)
  return resource_limits_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::ResourceLimit >*
ClusterAutoscaling::mutable_resource_limits() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ClusterAutoscaling.resource_limits)
  return &resource_limits_;
}
inline const ::google::container::v1::ResourceLimit& ClusterAutoscaling::resource_limits(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterAutoscaling.resource_limits)
  return resource_limits_.Get(index);
}
inline ::google::container::v1::ResourceLimit* ClusterAutoscaling::add_resource_limits() {
  // @@protoc_insertion_point(field_add:google.container.v1.ClusterAutoscaling.resource_limits)
  return resource_limits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::ResourceLimit >&
ClusterAutoscaling::resource_limits() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ClusterAutoscaling.resource_limits)
  return resource_limits_;
}

// .google.container.v1.AutoprovisioningNodePoolDefaults autoprovisioning_node_pool_defaults = 4;
inline bool ClusterAutoscaling::has_autoprovisioning_node_pool_defaults() const {
  return this != internal_default_instance() && autoprovisioning_node_pool_defaults_ != nullptr;
}
inline void ClusterAutoscaling::clear_autoprovisioning_node_pool_defaults() {
  if (GetArenaNoVirtual() == nullptr && autoprovisioning_node_pool_defaults_ != nullptr) {
    delete autoprovisioning_node_pool_defaults_;
  }
  autoprovisioning_node_pool_defaults_ = nullptr;
}
inline const ::google::container::v1::AutoprovisioningNodePoolDefaults& ClusterAutoscaling::autoprovisioning_node_pool_defaults() const {
  const ::google::container::v1::AutoprovisioningNodePoolDefaults* p = autoprovisioning_node_pool_defaults_;
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterAutoscaling.autoprovisioning_node_pool_defaults)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::AutoprovisioningNodePoolDefaults*>(
      &::google::container::v1::_AutoprovisioningNodePoolDefaults_default_instance_);
}
inline ::google::container::v1::AutoprovisioningNodePoolDefaults* ClusterAutoscaling::release_autoprovisioning_node_pool_defaults() {
  // @@protoc_insertion_point(field_release:google.container.v1.ClusterAutoscaling.autoprovisioning_node_pool_defaults)
  
  ::google::container::v1::AutoprovisioningNodePoolDefaults* temp = autoprovisioning_node_pool_defaults_;
  autoprovisioning_node_pool_defaults_ = nullptr;
  return temp;
}
inline ::google::container::v1::AutoprovisioningNodePoolDefaults* ClusterAutoscaling::mutable_autoprovisioning_node_pool_defaults() {
  
  if (autoprovisioning_node_pool_defaults_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::AutoprovisioningNodePoolDefaults>(GetArenaNoVirtual());
    autoprovisioning_node_pool_defaults_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterAutoscaling.autoprovisioning_node_pool_defaults)
  return autoprovisioning_node_pool_defaults_;
}
inline void ClusterAutoscaling::set_allocated_autoprovisioning_node_pool_defaults(::google::container::v1::AutoprovisioningNodePoolDefaults* autoprovisioning_node_pool_defaults) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete autoprovisioning_node_pool_defaults_;
  }
  if (autoprovisioning_node_pool_defaults) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      autoprovisioning_node_pool_defaults = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, autoprovisioning_node_pool_defaults, submessage_arena);
    }
    
  } else {
    
  }
  autoprovisioning_node_pool_defaults_ = autoprovisioning_node_pool_defaults;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ClusterAutoscaling.autoprovisioning_node_pool_defaults)
}

// repeated string autoprovisioning_locations = 5;
inline int ClusterAutoscaling::autoprovisioning_locations_size() const {
  return autoprovisioning_locations_.size();
}
inline void ClusterAutoscaling::clear_autoprovisioning_locations() {
  autoprovisioning_locations_.Clear();
}
inline const ::std::string& ClusterAutoscaling::autoprovisioning_locations(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
  return autoprovisioning_locations_.Get(index);
}
inline ::std::string* ClusterAutoscaling::mutable_autoprovisioning_locations(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
  return autoprovisioning_locations_.Mutable(index);
}
inline void ClusterAutoscaling::set_autoprovisioning_locations(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
  autoprovisioning_locations_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ClusterAutoscaling::set_autoprovisioning_locations(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
  autoprovisioning_locations_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ClusterAutoscaling::set_autoprovisioning_locations(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  autoprovisioning_locations_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
}
inline void ClusterAutoscaling::set_autoprovisioning_locations(int index, const char* value, size_t size) {
  autoprovisioning_locations_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
}
inline ::std::string* ClusterAutoscaling::add_autoprovisioning_locations() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
  return autoprovisioning_locations_.Add();
}
inline void ClusterAutoscaling::add_autoprovisioning_locations(const ::std::string& value) {
  autoprovisioning_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
}
#if LANG_CXX11
inline void ClusterAutoscaling::add_autoprovisioning_locations(::std::string&& value) {
  autoprovisioning_locations_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
}
#endif
inline void ClusterAutoscaling::add_autoprovisioning_locations(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  autoprovisioning_locations_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
}
inline void ClusterAutoscaling::add_autoprovisioning_locations(const char* value, size_t size) {
  autoprovisioning_locations_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
ClusterAutoscaling::autoprovisioning_locations() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
  return autoprovisioning_locations_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
ClusterAutoscaling::mutable_autoprovisioning_locations() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ClusterAutoscaling.autoprovisioning_locations)
  return &autoprovisioning_locations_;
}

// -------------------------------------------------------------------

// AutoprovisioningNodePoolDefaults

// repeated string oauth_scopes = 1;
inline int AutoprovisioningNodePoolDefaults::oauth_scopes_size() const {
  return oauth_scopes_.size();
}
inline void AutoprovisioningNodePoolDefaults::clear_oauth_scopes() {
  oauth_scopes_.Clear();
}
inline const ::std::string& AutoprovisioningNodePoolDefaults::oauth_scopes(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
  return oauth_scopes_.Get(index);
}
inline ::std::string* AutoprovisioningNodePoolDefaults::mutable_oauth_scopes(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
  return oauth_scopes_.Mutable(index);
}
inline void AutoprovisioningNodePoolDefaults::set_oauth_scopes(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
  oauth_scopes_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AutoprovisioningNodePoolDefaults::set_oauth_scopes(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
  oauth_scopes_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AutoprovisioningNodePoolDefaults::set_oauth_scopes(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  oauth_scopes_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
}
inline void AutoprovisioningNodePoolDefaults::set_oauth_scopes(int index, const char* value, size_t size) {
  oauth_scopes_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
}
inline ::std::string* AutoprovisioningNodePoolDefaults::add_oauth_scopes() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
  return oauth_scopes_.Add();
}
inline void AutoprovisioningNodePoolDefaults::add_oauth_scopes(const ::std::string& value) {
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
}
#if LANG_CXX11
inline void AutoprovisioningNodePoolDefaults::add_oauth_scopes(::std::string&& value) {
  oauth_scopes_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
}
#endif
inline void AutoprovisioningNodePoolDefaults::add_oauth_scopes(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  oauth_scopes_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
}
inline void AutoprovisioningNodePoolDefaults::add_oauth_scopes(const char* value, size_t size) {
  oauth_scopes_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
AutoprovisioningNodePoolDefaults::oauth_scopes() const {
  // @@protoc_insertion_point(field_list:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
  return oauth_scopes_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
AutoprovisioningNodePoolDefaults::mutable_oauth_scopes() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.AutoprovisioningNodePoolDefaults.oauth_scopes)
  return &oauth_scopes_;
}

// string service_account = 2;
inline void AutoprovisioningNodePoolDefaults::clear_service_account() {
  service_account_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoprovisioningNodePoolDefaults::service_account() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.service_account)
  return service_account_.GetNoArena();
}
inline void AutoprovisioningNodePoolDefaults::set_service_account(const ::std::string& value) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoprovisioningNodePoolDefaults.service_account)
}
#if LANG_CXX11
inline void AutoprovisioningNodePoolDefaults::set_service_account(::std::string&& value) {
  
  service_account_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoprovisioningNodePoolDefaults.service_account)
}
#endif
inline void AutoprovisioningNodePoolDefaults::set_service_account(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoprovisioningNodePoolDefaults.service_account)
}
inline void AutoprovisioningNodePoolDefaults::set_service_account(const char* value, size_t size) {
  
  service_account_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoprovisioningNodePoolDefaults.service_account)
}
inline ::std::string* AutoprovisioningNodePoolDefaults::mutable_service_account() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.service_account)
  return service_account_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoprovisioningNodePoolDefaults::release_service_account() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoprovisioningNodePoolDefaults.service_account)
  
  return service_account_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoprovisioningNodePoolDefaults::set_allocated_service_account(::std::string* service_account) {
  if (service_account != nullptr) {
    
  } else {
    
  }
  service_account_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), service_account);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoprovisioningNodePoolDefaults.service_account)
}

// .google.container.v1.NodePool.UpgradeSettings upgrade_settings = 3;
inline bool AutoprovisioningNodePoolDefaults::has_upgrade_settings() const {
  return this != internal_default_instance() && upgrade_settings_ != nullptr;
}
inline void AutoprovisioningNodePoolDefaults::clear_upgrade_settings() {
  if (GetArenaNoVirtual() == nullptr && upgrade_settings_ != nullptr) {
    delete upgrade_settings_;
  }
  upgrade_settings_ = nullptr;
}
inline const ::google::container::v1::NodePool_UpgradeSettings& AutoprovisioningNodePoolDefaults::upgrade_settings() const {
  const ::google::container::v1::NodePool_UpgradeSettings* p = upgrade_settings_;
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.upgrade_settings)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodePool_UpgradeSettings*>(
      &::google::container::v1::_NodePool_UpgradeSettings_default_instance_);
}
inline ::google::container::v1::NodePool_UpgradeSettings* AutoprovisioningNodePoolDefaults::release_upgrade_settings() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoprovisioningNodePoolDefaults.upgrade_settings)
  
  ::google::container::v1::NodePool_UpgradeSettings* temp = upgrade_settings_;
  upgrade_settings_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodePool_UpgradeSettings* AutoprovisioningNodePoolDefaults::mutable_upgrade_settings() {
  
  if (upgrade_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodePool_UpgradeSettings>(GetArenaNoVirtual());
    upgrade_settings_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.upgrade_settings)
  return upgrade_settings_;
}
inline void AutoprovisioningNodePoolDefaults::set_allocated_upgrade_settings(::google::container::v1::NodePool_UpgradeSettings* upgrade_settings) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete upgrade_settings_;
  }
  if (upgrade_settings) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      upgrade_settings = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, upgrade_settings, submessage_arena);
    }
    
  } else {
    
  }
  upgrade_settings_ = upgrade_settings;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoprovisioningNodePoolDefaults.upgrade_settings)
}

// .google.container.v1.NodeManagement management = 4;
inline bool AutoprovisioningNodePoolDefaults::has_management() const {
  return this != internal_default_instance() && management_ != nullptr;
}
inline void AutoprovisioningNodePoolDefaults::clear_management() {
  if (GetArenaNoVirtual() == nullptr && management_ != nullptr) {
    delete management_;
  }
  management_ = nullptr;
}
inline const ::google::container::v1::NodeManagement& AutoprovisioningNodePoolDefaults::management() const {
  const ::google::container::v1::NodeManagement* p = management_;
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.management)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NodeManagement*>(
      &::google::container::v1::_NodeManagement_default_instance_);
}
inline ::google::container::v1::NodeManagement* AutoprovisioningNodePoolDefaults::release_management() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoprovisioningNodePoolDefaults.management)
  
  ::google::container::v1::NodeManagement* temp = management_;
  management_ = nullptr;
  return temp;
}
inline ::google::container::v1::NodeManagement* AutoprovisioningNodePoolDefaults::mutable_management() {
  
  if (management_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NodeManagement>(GetArenaNoVirtual());
    management_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.management)
  return management_;
}
inline void AutoprovisioningNodePoolDefaults::set_allocated_management(::google::container::v1::NodeManagement* management) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete management_;
  }
  if (management) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      management = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, management, submessage_arena);
    }
    
  } else {
    
  }
  management_ = management;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoprovisioningNodePoolDefaults.management)
}

// string min_cpu_platform = 5;
inline void AutoprovisioningNodePoolDefaults::clear_min_cpu_platform() {
  min_cpu_platform_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoprovisioningNodePoolDefaults::min_cpu_platform() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.min_cpu_platform)
  return min_cpu_platform_.GetNoArena();
}
inline void AutoprovisioningNodePoolDefaults::set_min_cpu_platform(const ::std::string& value) {
  
  min_cpu_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoprovisioningNodePoolDefaults.min_cpu_platform)
}
#if LANG_CXX11
inline void AutoprovisioningNodePoolDefaults::set_min_cpu_platform(::std::string&& value) {
  
  min_cpu_platform_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoprovisioningNodePoolDefaults.min_cpu_platform)
}
#endif
inline void AutoprovisioningNodePoolDefaults::set_min_cpu_platform(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  min_cpu_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoprovisioningNodePoolDefaults.min_cpu_platform)
}
inline void AutoprovisioningNodePoolDefaults::set_min_cpu_platform(const char* value, size_t size) {
  
  min_cpu_platform_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoprovisioningNodePoolDefaults.min_cpu_platform)
}
inline ::std::string* AutoprovisioningNodePoolDefaults::mutable_min_cpu_platform() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.min_cpu_platform)
  return min_cpu_platform_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoprovisioningNodePoolDefaults::release_min_cpu_platform() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoprovisioningNodePoolDefaults.min_cpu_platform)
  
  return min_cpu_platform_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoprovisioningNodePoolDefaults::set_allocated_min_cpu_platform(::std::string* min_cpu_platform) {
  if (min_cpu_platform != nullptr) {
    
  } else {
    
  }
  min_cpu_platform_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), min_cpu_platform);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoprovisioningNodePoolDefaults.min_cpu_platform)
}

// int32 disk_size_gb = 6;
inline void AutoprovisioningNodePoolDefaults::clear_disk_size_gb() {
  disk_size_gb_ = 0;
}
inline ::google::protobuf::int32 AutoprovisioningNodePoolDefaults::disk_size_gb() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.disk_size_gb)
  return disk_size_gb_;
}
inline void AutoprovisioningNodePoolDefaults::set_disk_size_gb(::google::protobuf::int32 value) {
  
  disk_size_gb_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.AutoprovisioningNodePoolDefaults.disk_size_gb)
}

// string disk_type = 7;
inline void AutoprovisioningNodePoolDefaults::clear_disk_type() {
  disk_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoprovisioningNodePoolDefaults::disk_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.disk_type)
  return disk_type_.GetNoArena();
}
inline void AutoprovisioningNodePoolDefaults::set_disk_type(const ::std::string& value) {
  
  disk_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoprovisioningNodePoolDefaults.disk_type)
}
#if LANG_CXX11
inline void AutoprovisioningNodePoolDefaults::set_disk_type(::std::string&& value) {
  
  disk_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoprovisioningNodePoolDefaults.disk_type)
}
#endif
inline void AutoprovisioningNodePoolDefaults::set_disk_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  disk_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoprovisioningNodePoolDefaults.disk_type)
}
inline void AutoprovisioningNodePoolDefaults::set_disk_type(const char* value, size_t size) {
  
  disk_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoprovisioningNodePoolDefaults.disk_type)
}
inline ::std::string* AutoprovisioningNodePoolDefaults::mutable_disk_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.disk_type)
  return disk_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoprovisioningNodePoolDefaults::release_disk_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoprovisioningNodePoolDefaults.disk_type)
  
  return disk_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoprovisioningNodePoolDefaults::set_allocated_disk_type(::std::string* disk_type) {
  if (disk_type != nullptr) {
    
  } else {
    
  }
  disk_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), disk_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoprovisioningNodePoolDefaults.disk_type)
}

// .google.container.v1.ShieldedInstanceConfig shielded_instance_config = 8;
inline bool AutoprovisioningNodePoolDefaults::has_shielded_instance_config() const {
  return this != internal_default_instance() && shielded_instance_config_ != nullptr;
}
inline void AutoprovisioningNodePoolDefaults::clear_shielded_instance_config() {
  if (GetArenaNoVirtual() == nullptr && shielded_instance_config_ != nullptr) {
    delete shielded_instance_config_;
  }
  shielded_instance_config_ = nullptr;
}
inline const ::google::container::v1::ShieldedInstanceConfig& AutoprovisioningNodePoolDefaults::shielded_instance_config() const {
  const ::google::container::v1::ShieldedInstanceConfig* p = shielded_instance_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.shielded_instance_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ShieldedInstanceConfig*>(
      &::google::container::v1::_ShieldedInstanceConfig_default_instance_);
}
inline ::google::container::v1::ShieldedInstanceConfig* AutoprovisioningNodePoolDefaults::release_shielded_instance_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoprovisioningNodePoolDefaults.shielded_instance_config)
  
  ::google::container::v1::ShieldedInstanceConfig* temp = shielded_instance_config_;
  shielded_instance_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::ShieldedInstanceConfig* AutoprovisioningNodePoolDefaults::mutable_shielded_instance_config() {
  
  if (shielded_instance_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ShieldedInstanceConfig>(GetArenaNoVirtual());
    shielded_instance_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.shielded_instance_config)
  return shielded_instance_config_;
}
inline void AutoprovisioningNodePoolDefaults::set_allocated_shielded_instance_config(::google::container::v1::ShieldedInstanceConfig* shielded_instance_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shielded_instance_config_;
  }
  if (shielded_instance_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shielded_instance_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, shielded_instance_config, submessage_arena);
    }
    
  } else {
    
  }
  shielded_instance_config_ = shielded_instance_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoprovisioningNodePoolDefaults.shielded_instance_config)
}

// string boot_disk_kms_key = 9;
inline void AutoprovisioningNodePoolDefaults::clear_boot_disk_kms_key() {
  boot_disk_kms_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoprovisioningNodePoolDefaults::boot_disk_kms_key() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.boot_disk_kms_key)
  return boot_disk_kms_key_.GetNoArena();
}
inline void AutoprovisioningNodePoolDefaults::set_boot_disk_kms_key(const ::std::string& value) {
  
  boot_disk_kms_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoprovisioningNodePoolDefaults.boot_disk_kms_key)
}
#if LANG_CXX11
inline void AutoprovisioningNodePoolDefaults::set_boot_disk_kms_key(::std::string&& value) {
  
  boot_disk_kms_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoprovisioningNodePoolDefaults.boot_disk_kms_key)
}
#endif
inline void AutoprovisioningNodePoolDefaults::set_boot_disk_kms_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  boot_disk_kms_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoprovisioningNodePoolDefaults.boot_disk_kms_key)
}
inline void AutoprovisioningNodePoolDefaults::set_boot_disk_kms_key(const char* value, size_t size) {
  
  boot_disk_kms_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoprovisioningNodePoolDefaults.boot_disk_kms_key)
}
inline ::std::string* AutoprovisioningNodePoolDefaults::mutable_boot_disk_kms_key() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.boot_disk_kms_key)
  return boot_disk_kms_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoprovisioningNodePoolDefaults::release_boot_disk_kms_key() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoprovisioningNodePoolDefaults.boot_disk_kms_key)
  
  return boot_disk_kms_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoprovisioningNodePoolDefaults::set_allocated_boot_disk_kms_key(::std::string* boot_disk_kms_key) {
  if (boot_disk_kms_key != nullptr) {
    
  } else {
    
  }
  boot_disk_kms_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), boot_disk_kms_key);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoprovisioningNodePoolDefaults.boot_disk_kms_key)
}

// string image_type = 10;
inline void AutoprovisioningNodePoolDefaults::clear_image_type() {
  image_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AutoprovisioningNodePoolDefaults::image_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AutoprovisioningNodePoolDefaults.image_type)
  return image_type_.GetNoArena();
}
inline void AutoprovisioningNodePoolDefaults::set_image_type(const ::std::string& value) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AutoprovisioningNodePoolDefaults.image_type)
}
#if LANG_CXX11
inline void AutoprovisioningNodePoolDefaults::set_image_type(::std::string&& value) {
  
  image_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AutoprovisioningNodePoolDefaults.image_type)
}
#endif
inline void AutoprovisioningNodePoolDefaults::set_image_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AutoprovisioningNodePoolDefaults.image_type)
}
inline void AutoprovisioningNodePoolDefaults::set_image_type(const char* value, size_t size) {
  
  image_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AutoprovisioningNodePoolDefaults.image_type)
}
inline ::std::string* AutoprovisioningNodePoolDefaults::mutable_image_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AutoprovisioningNodePoolDefaults.image_type)
  return image_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AutoprovisioningNodePoolDefaults::release_image_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.AutoprovisioningNodePoolDefaults.image_type)
  
  return image_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AutoprovisioningNodePoolDefaults::set_allocated_image_type(::std::string* image_type) {
  if (image_type != nullptr) {
    
  } else {
    
  }
  image_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), image_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AutoprovisioningNodePoolDefaults.image_type)
}

// -------------------------------------------------------------------

// ResourceLimit

// string resource_type = 1;
inline void ResourceLimit::clear_resource_type() {
  resource_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceLimit::resource_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ResourceLimit.resource_type)
  return resource_type_.GetNoArena();
}
inline void ResourceLimit::set_resource_type(const ::std::string& value) {
  
  resource_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ResourceLimit.resource_type)
}
#if LANG_CXX11
inline void ResourceLimit::set_resource_type(::std::string&& value) {
  
  resource_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ResourceLimit.resource_type)
}
#endif
inline void ResourceLimit::set_resource_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  resource_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ResourceLimit.resource_type)
}
inline void ResourceLimit::set_resource_type(const char* value, size_t size) {
  
  resource_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ResourceLimit.resource_type)
}
inline ::std::string* ResourceLimit::mutable_resource_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ResourceLimit.resource_type)
  return resource_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceLimit::release_resource_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.ResourceLimit.resource_type)
  
  return resource_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceLimit::set_allocated_resource_type(::std::string* resource_type) {
  if (resource_type != nullptr) {
    
  } else {
    
  }
  resource_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), resource_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ResourceLimit.resource_type)
}

// int64 minimum = 2;
inline void ResourceLimit::clear_minimum() {
  minimum_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ResourceLimit::minimum() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ResourceLimit.minimum)
  return minimum_;
}
inline void ResourceLimit::set_minimum(::google::protobuf::int64 value) {
  
  minimum_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ResourceLimit.minimum)
}

// int64 maximum = 3;
inline void ResourceLimit::clear_maximum() {
  maximum_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 ResourceLimit::maximum() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ResourceLimit.maximum)
  return maximum_;
}
inline void ResourceLimit::set_maximum(::google::protobuf::int64 value) {
  
  maximum_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ResourceLimit.maximum)
}

// -------------------------------------------------------------------

// NodePoolAutoscaling

// bool enabled = 1;
inline void NodePoolAutoscaling::clear_enabled() {
  enabled_ = false;
}
inline bool NodePoolAutoscaling::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.enabled)
  return enabled_;
}
inline void NodePoolAutoscaling::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.enabled)
}

// int32 min_node_count = 2;
inline void NodePoolAutoscaling::clear_min_node_count() {
  min_node_count_ = 0;
}
inline ::google::protobuf::int32 NodePoolAutoscaling::min_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.min_node_count)
  return min_node_count_;
}
inline void NodePoolAutoscaling::set_min_node_count(::google::protobuf::int32 value) {
  
  min_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.min_node_count)
}

// int32 max_node_count = 3;
inline void NodePoolAutoscaling::clear_max_node_count() {
  max_node_count_ = 0;
}
inline ::google::protobuf::int32 NodePoolAutoscaling::max_node_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.max_node_count)
  return max_node_count_;
}
inline void NodePoolAutoscaling::set_max_node_count(::google::protobuf::int32 value) {
  
  max_node_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.max_node_count)
}

// bool autoprovisioned = 4;
inline void NodePoolAutoscaling::clear_autoprovisioned() {
  autoprovisioned_ = false;
}
inline bool NodePoolAutoscaling::autoprovisioned() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NodePoolAutoscaling.autoprovisioned)
  return autoprovisioned_;
}
inline void NodePoolAutoscaling::set_autoprovisioned(bool value) {
  
  autoprovisioned_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NodePoolAutoscaling.autoprovisioned)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// SetLabelsRequest

// string project_id = 1 [deprecated = true];
inline void SetLabelsRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLabelsRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetLabelsRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.project_id)
}
#if LANG_CXX11
inline void SetLabelsRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.project_id)
}
#endif
inline void SetLabelsRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.project_id)
}
inline void SetLabelsRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.project_id)
}
inline ::std::string* SetLabelsRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLabelsRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLabelsRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetLabelsRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLabelsRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.zone)
  return zone_.GetNoArena();
}
inline void SetLabelsRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.zone)
}
#if LANG_CXX11
inline void SetLabelsRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.zone)
}
#endif
inline void SetLabelsRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.zone)
}
inline void SetLabelsRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.zone)
}
inline ::std::string* SetLabelsRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLabelsRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLabelsRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetLabelsRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLabelsRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetLabelsRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.cluster_id)
}
#if LANG_CXX11
inline void SetLabelsRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.cluster_id)
}
#endif
inline void SetLabelsRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.cluster_id)
}
inline void SetLabelsRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.cluster_id)
}
inline ::std::string* SetLabelsRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLabelsRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLabelsRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.cluster_id)
}

// map<string, string> resource_labels = 4 [(.google.api.field_behavior) = REQUIRED];
inline int SetLabelsRequest::resource_labels_size() const {
  return resource_labels_.size();
}
inline void SetLabelsRequest::clear_resource_labels() {
  resource_labels_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
SetLabelsRequest::resource_labels() const {
  // @@protoc_insertion_point(field_map:google.container.v1.SetLabelsRequest.resource_labels)
  return resource_labels_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
SetLabelsRequest::mutable_resource_labels() {
  // @@protoc_insertion_point(field_mutable_map:google.container.v1.SetLabelsRequest.resource_labels)
  return resource_labels_.MutableMap();
}

// string label_fingerprint = 5 [(.google.api.field_behavior) = REQUIRED];
inline void SetLabelsRequest::clear_label_fingerprint() {
  label_fingerprint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLabelsRequest::label_fingerprint() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.label_fingerprint)
  return label_fingerprint_.GetNoArena();
}
inline void SetLabelsRequest::set_label_fingerprint(const ::std::string& value) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.label_fingerprint)
}
#if LANG_CXX11
inline void SetLabelsRequest::set_label_fingerprint(::std::string&& value) {
  
  label_fingerprint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.label_fingerprint)
}
#endif
inline void SetLabelsRequest::set_label_fingerprint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.label_fingerprint)
}
inline void SetLabelsRequest::set_label_fingerprint(const char* value, size_t size) {
  
  label_fingerprint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.label_fingerprint)
}
inline ::std::string* SetLabelsRequest::mutable_label_fingerprint() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.label_fingerprint)
  return label_fingerprint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLabelsRequest::release_label_fingerprint() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.label_fingerprint)
  
  return label_fingerprint_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLabelsRequest::set_allocated_label_fingerprint(::std::string* label_fingerprint) {
  if (label_fingerprint != nullptr) {
    
  } else {
    
  }
  label_fingerprint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), label_fingerprint);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.label_fingerprint)
}

// string name = 7;
inline void SetLabelsRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLabelsRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLabelsRequest.name)
  return name_.GetNoArena();
}
inline void SetLabelsRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLabelsRequest.name)
}
#if LANG_CXX11
inline void SetLabelsRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLabelsRequest.name)
}
#endif
inline void SetLabelsRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLabelsRequest.name)
}
inline void SetLabelsRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLabelsRequest.name)
}
inline ::std::string* SetLabelsRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLabelsRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLabelsRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLabelsRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLabelsRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLabelsRequest.name)
}

// -------------------------------------------------------------------

// SetLegacyAbacRequest

// string project_id = 1 [deprecated = true];
inline void SetLegacyAbacRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLegacyAbacRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetLegacyAbacRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.project_id)
}
#if LANG_CXX11
inline void SetLegacyAbacRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.project_id)
}
#endif
inline void SetLegacyAbacRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.project_id)
}
inline void SetLegacyAbacRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.project_id)
}
inline ::std::string* SetLegacyAbacRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLegacyAbacRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLegacyAbacRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetLegacyAbacRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLegacyAbacRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.zone)
  return zone_.GetNoArena();
}
inline void SetLegacyAbacRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.zone)
}
#if LANG_CXX11
inline void SetLegacyAbacRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.zone)
}
#endif
inline void SetLegacyAbacRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.zone)
}
inline void SetLegacyAbacRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.zone)
}
inline ::std::string* SetLegacyAbacRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLegacyAbacRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLegacyAbacRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetLegacyAbacRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLegacyAbacRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetLegacyAbacRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
#if LANG_CXX11
inline void SetLegacyAbacRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
#endif
inline void SetLegacyAbacRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
inline void SetLegacyAbacRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.cluster_id)
}
inline ::std::string* SetLegacyAbacRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLegacyAbacRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLegacyAbacRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.cluster_id)
}

// bool enabled = 4 [(.google.api.field_behavior) = REQUIRED];
inline void SetLegacyAbacRequest::clear_enabled() {
  enabled_ = false;
}
inline bool SetLegacyAbacRequest::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.enabled)
  return enabled_;
}
inline void SetLegacyAbacRequest::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.enabled)
}

// string name = 6;
inline void SetLegacyAbacRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetLegacyAbacRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetLegacyAbacRequest.name)
  return name_.GetNoArena();
}
inline void SetLegacyAbacRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetLegacyAbacRequest.name)
}
#if LANG_CXX11
inline void SetLegacyAbacRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetLegacyAbacRequest.name)
}
#endif
inline void SetLegacyAbacRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetLegacyAbacRequest.name)
}
inline void SetLegacyAbacRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetLegacyAbacRequest.name)
}
inline ::std::string* SetLegacyAbacRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetLegacyAbacRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetLegacyAbacRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetLegacyAbacRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetLegacyAbacRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetLegacyAbacRequest.name)
}

// -------------------------------------------------------------------

// StartIPRotationRequest

// string project_id = 1 [deprecated = true];
inline void StartIPRotationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartIPRotationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.project_id)
  return project_id_.GetNoArena();
}
inline void StartIPRotationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.project_id)
}
#if LANG_CXX11
inline void StartIPRotationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.project_id)
}
#endif
inline void StartIPRotationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.project_id)
}
inline void StartIPRotationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.project_id)
}
inline ::std::string* StartIPRotationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartIPRotationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartIPRotationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void StartIPRotationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartIPRotationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.zone)
  return zone_.GetNoArena();
}
inline void StartIPRotationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.zone)
}
#if LANG_CXX11
inline void StartIPRotationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.zone)
}
#endif
inline void StartIPRotationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.zone)
}
inline void StartIPRotationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.zone)
}
inline ::std::string* StartIPRotationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartIPRotationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartIPRotationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void StartIPRotationRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartIPRotationRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void StartIPRotationRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.cluster_id)
}
#if LANG_CXX11
inline void StartIPRotationRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.cluster_id)
}
#endif
inline void StartIPRotationRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.cluster_id)
}
inline void StartIPRotationRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.cluster_id)
}
inline ::std::string* StartIPRotationRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartIPRotationRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartIPRotationRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.cluster_id)
}

// string name = 6;
inline void StartIPRotationRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StartIPRotationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.name)
  return name_.GetNoArena();
}
inline void StartIPRotationRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.name)
}
#if LANG_CXX11
inline void StartIPRotationRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StartIPRotationRequest.name)
}
#endif
inline void StartIPRotationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StartIPRotationRequest.name)
}
inline void StartIPRotationRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StartIPRotationRequest.name)
}
inline ::std::string* StartIPRotationRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StartIPRotationRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StartIPRotationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.StartIPRotationRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StartIPRotationRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StartIPRotationRequest.name)
}

// bool rotate_credentials = 7;
inline void StartIPRotationRequest::clear_rotate_credentials() {
  rotate_credentials_ = false;
}
inline bool StartIPRotationRequest::rotate_credentials() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StartIPRotationRequest.rotate_credentials)
  return rotate_credentials_;
}
inline void StartIPRotationRequest::set_rotate_credentials(bool value) {
  
  rotate_credentials_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.StartIPRotationRequest.rotate_credentials)
}

// -------------------------------------------------------------------

// CompleteIPRotationRequest

// string project_id = 1 [deprecated = true];
inline void CompleteIPRotationRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompleteIPRotationRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.project_id)
  return project_id_.GetNoArena();
}
inline void CompleteIPRotationRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.project_id)
}
#if LANG_CXX11
inline void CompleteIPRotationRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.project_id)
}
#endif
inline void CompleteIPRotationRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.project_id)
}
inline void CompleteIPRotationRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.project_id)
}
inline ::std::string* CompleteIPRotationRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompleteIPRotationRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteIPRotationRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void CompleteIPRotationRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompleteIPRotationRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.zone)
  return zone_.GetNoArena();
}
inline void CompleteIPRotationRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.zone)
}
#if LANG_CXX11
inline void CompleteIPRotationRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.zone)
}
#endif
inline void CompleteIPRotationRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.zone)
}
inline void CompleteIPRotationRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.zone)
}
inline ::std::string* CompleteIPRotationRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompleteIPRotationRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteIPRotationRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void CompleteIPRotationRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompleteIPRotationRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void CompleteIPRotationRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
#if LANG_CXX11
inline void CompleteIPRotationRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
#endif
inline void CompleteIPRotationRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
inline void CompleteIPRotationRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.cluster_id)
}
inline ::std::string* CompleteIPRotationRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompleteIPRotationRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteIPRotationRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.cluster_id)
}

// string name = 7;
inline void CompleteIPRotationRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CompleteIPRotationRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.CompleteIPRotationRequest.name)
  return name_.GetNoArena();
}
inline void CompleteIPRotationRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.CompleteIPRotationRequest.name)
}
#if LANG_CXX11
inline void CompleteIPRotationRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.CompleteIPRotationRequest.name)
}
#endif
inline void CompleteIPRotationRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.CompleteIPRotationRequest.name)
}
inline void CompleteIPRotationRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.CompleteIPRotationRequest.name)
}
inline ::std::string* CompleteIPRotationRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.CompleteIPRotationRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CompleteIPRotationRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.CompleteIPRotationRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CompleteIPRotationRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.CompleteIPRotationRequest.name)
}

// -------------------------------------------------------------------

// AcceleratorConfig

// int64 accelerator_count = 1;
inline void AcceleratorConfig::clear_accelerator_count() {
  accelerator_count_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 AcceleratorConfig::accelerator_count() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AcceleratorConfig.accelerator_count)
  return accelerator_count_;
}
inline void AcceleratorConfig::set_accelerator_count(::google::protobuf::int64 value) {
  
  accelerator_count_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.AcceleratorConfig.accelerator_count)
}

// string accelerator_type = 2;
inline void AcceleratorConfig::clear_accelerator_type() {
  accelerator_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& AcceleratorConfig::accelerator_type() const {
  // @@protoc_insertion_point(field_get:google.container.v1.AcceleratorConfig.accelerator_type)
  return accelerator_type_.GetNoArena();
}
inline void AcceleratorConfig::set_accelerator_type(const ::std::string& value) {
  
  accelerator_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.AcceleratorConfig.accelerator_type)
}
#if LANG_CXX11
inline void AcceleratorConfig::set_accelerator_type(::std::string&& value) {
  
  accelerator_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.AcceleratorConfig.accelerator_type)
}
#endif
inline void AcceleratorConfig::set_accelerator_type(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  accelerator_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.AcceleratorConfig.accelerator_type)
}
inline void AcceleratorConfig::set_accelerator_type(const char* value, size_t size) {
  
  accelerator_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.AcceleratorConfig.accelerator_type)
}
inline ::std::string* AcceleratorConfig::mutable_accelerator_type() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.AcceleratorConfig.accelerator_type)
  return accelerator_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AcceleratorConfig::release_accelerator_type() {
  // @@protoc_insertion_point(field_release:google.container.v1.AcceleratorConfig.accelerator_type)
  
  return accelerator_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AcceleratorConfig::set_allocated_accelerator_type(::std::string* accelerator_type) {
  if (accelerator_type != nullptr) {
    
  } else {
    
  }
  accelerator_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), accelerator_type);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.AcceleratorConfig.accelerator_type)
}

// -------------------------------------------------------------------

// WorkloadMetadataConfig

// .google.container.v1.WorkloadMetadataConfig.Mode mode = 2;
inline void WorkloadMetadataConfig::clear_mode() {
  mode_ = 0;
}
inline ::google::container::v1::WorkloadMetadataConfig_Mode WorkloadMetadataConfig::mode() const {
  // @@protoc_insertion_point(field_get:google.container.v1.WorkloadMetadataConfig.mode)
  return static_cast< ::google::container::v1::WorkloadMetadataConfig_Mode >(mode_);
}
inline void WorkloadMetadataConfig::set_mode(::google::container::v1::WorkloadMetadataConfig_Mode value) {
  
  mode_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.WorkloadMetadataConfig.mode)
}

// -------------------------------------------------------------------

// SetNetworkPolicyRequest

// string project_id = 1 [deprecated = true];
inline void SetNetworkPolicyRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNetworkPolicyRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetNetworkPolicyRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.project_id)
}
#if LANG_CXX11
inline void SetNetworkPolicyRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.project_id)
}
#endif
inline void SetNetworkPolicyRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.project_id)
}
inline void SetNetworkPolicyRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.project_id)
}
inline ::std::string* SetNetworkPolicyRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNetworkPolicyRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNetworkPolicyRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.project_id)
}

// string zone = 2 [deprecated = true];
inline void SetNetworkPolicyRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNetworkPolicyRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.zone)
  return zone_.GetNoArena();
}
inline void SetNetworkPolicyRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.zone)
}
#if LANG_CXX11
inline void SetNetworkPolicyRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.zone)
}
#endif
inline void SetNetworkPolicyRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.zone)
}
inline void SetNetworkPolicyRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.zone)
}
inline ::std::string* SetNetworkPolicyRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNetworkPolicyRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNetworkPolicyRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.zone)
}

// string cluster_id = 3 [deprecated = true];
inline void SetNetworkPolicyRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNetworkPolicyRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetNetworkPolicyRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
#if LANG_CXX11
inline void SetNetworkPolicyRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
#endif
inline void SetNetworkPolicyRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
inline void SetNetworkPolicyRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}
inline ::std::string* SetNetworkPolicyRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNetworkPolicyRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNetworkPolicyRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.cluster_id)
}

// .google.container.v1.NetworkPolicy network_policy = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool SetNetworkPolicyRequest::has_network_policy() const {
  return this != internal_default_instance() && network_policy_ != nullptr;
}
inline void SetNetworkPolicyRequest::clear_network_policy() {
  if (GetArenaNoVirtual() == nullptr && network_policy_ != nullptr) {
    delete network_policy_;
  }
  network_policy_ = nullptr;
}
inline const ::google::container::v1::NetworkPolicy& SetNetworkPolicyRequest::network_policy() const {
  const ::google::container::v1::NetworkPolicy* p = network_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.network_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::NetworkPolicy*>(
      &::google::container::v1::_NetworkPolicy_default_instance_);
}
inline ::google::container::v1::NetworkPolicy* SetNetworkPolicyRequest::release_network_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.network_policy)
  
  ::google::container::v1::NetworkPolicy* temp = network_policy_;
  network_policy_ = nullptr;
  return temp;
}
inline ::google::container::v1::NetworkPolicy* SetNetworkPolicyRequest::mutable_network_policy() {
  
  if (network_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::NetworkPolicy>(GetArenaNoVirtual());
    network_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.network_policy)
  return network_policy_;
}
inline void SetNetworkPolicyRequest::set_allocated_network_policy(::google::container::v1::NetworkPolicy* network_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete network_policy_;
  }
  if (network_policy) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      network_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, network_policy, submessage_arena);
    }
    
  } else {
    
  }
  network_policy_ = network_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.network_policy)
}

// string name = 6;
inline void SetNetworkPolicyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetNetworkPolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetNetworkPolicyRequest.name)
  return name_.GetNoArena();
}
inline void SetNetworkPolicyRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetNetworkPolicyRequest.name)
}
#if LANG_CXX11
inline void SetNetworkPolicyRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetNetworkPolicyRequest.name)
}
#endif
inline void SetNetworkPolicyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetNetworkPolicyRequest.name)
}
inline void SetNetworkPolicyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetNetworkPolicyRequest.name)
}
inline ::std::string* SetNetworkPolicyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetNetworkPolicyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetNetworkPolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetNetworkPolicyRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetNetworkPolicyRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetNetworkPolicyRequest.name)
}

// -------------------------------------------------------------------

// SetMaintenancePolicyRequest

// string project_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void SetMaintenancePolicyRequest::clear_project_id() {
  project_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMaintenancePolicyRequest::project_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMaintenancePolicyRequest.project_id)
  return project_id_.GetNoArena();
}
inline void SetMaintenancePolicyRequest::set_project_id(const ::std::string& value) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMaintenancePolicyRequest.project_id)
}
#if LANG_CXX11
inline void SetMaintenancePolicyRequest::set_project_id(::std::string&& value) {
  
  project_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMaintenancePolicyRequest.project_id)
}
#endif
inline void SetMaintenancePolicyRequest::set_project_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMaintenancePolicyRequest.project_id)
}
inline void SetMaintenancePolicyRequest::set_project_id(const char* value, size_t size) {
  
  project_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMaintenancePolicyRequest.project_id)
}
inline ::std::string* SetMaintenancePolicyRequest::mutable_project_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMaintenancePolicyRequest.project_id)
  return project_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMaintenancePolicyRequest::release_project_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMaintenancePolicyRequest.project_id)
  
  return project_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaintenancePolicyRequest::set_allocated_project_id(::std::string* project_id) {
  if (project_id != nullptr) {
    
  } else {
    
  }
  project_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), project_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMaintenancePolicyRequest.project_id)
}

// string zone = 2 [(.google.api.field_behavior) = REQUIRED];
inline void SetMaintenancePolicyRequest::clear_zone() {
  zone_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMaintenancePolicyRequest::zone() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMaintenancePolicyRequest.zone)
  return zone_.GetNoArena();
}
inline void SetMaintenancePolicyRequest::set_zone(const ::std::string& value) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMaintenancePolicyRequest.zone)
}
#if LANG_CXX11
inline void SetMaintenancePolicyRequest::set_zone(::std::string&& value) {
  
  zone_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMaintenancePolicyRequest.zone)
}
#endif
inline void SetMaintenancePolicyRequest::set_zone(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMaintenancePolicyRequest.zone)
}
inline void SetMaintenancePolicyRequest::set_zone(const char* value, size_t size) {
  
  zone_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMaintenancePolicyRequest.zone)
}
inline ::std::string* SetMaintenancePolicyRequest::mutable_zone() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMaintenancePolicyRequest.zone)
  return zone_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMaintenancePolicyRequest::release_zone() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMaintenancePolicyRequest.zone)
  
  return zone_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaintenancePolicyRequest::set_allocated_zone(::std::string* zone) {
  if (zone != nullptr) {
    
  } else {
    
  }
  zone_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMaintenancePolicyRequest.zone)
}

// string cluster_id = 3 [(.google.api.field_behavior) = REQUIRED];
inline void SetMaintenancePolicyRequest::clear_cluster_id() {
  cluster_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMaintenancePolicyRequest::cluster_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
  return cluster_id_.GetNoArena();
}
inline void SetMaintenancePolicyRequest::set_cluster_id(const ::std::string& value) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}
#if LANG_CXX11
inline void SetMaintenancePolicyRequest::set_cluster_id(::std::string&& value) {
  
  cluster_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}
#endif
inline void SetMaintenancePolicyRequest::set_cluster_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}
inline void SetMaintenancePolicyRequest::set_cluster_id(const char* value, size_t size) {
  
  cluster_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}
inline ::std::string* SetMaintenancePolicyRequest::mutable_cluster_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
  return cluster_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMaintenancePolicyRequest::release_cluster_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
  
  return cluster_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaintenancePolicyRequest::set_allocated_cluster_id(::std::string* cluster_id) {
  if (cluster_id != nullptr) {
    
  } else {
    
  }
  cluster_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMaintenancePolicyRequest.cluster_id)
}

// .google.container.v1.MaintenancePolicy maintenance_policy = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool SetMaintenancePolicyRequest::has_maintenance_policy() const {
  return this != internal_default_instance() && maintenance_policy_ != nullptr;
}
inline void SetMaintenancePolicyRequest::clear_maintenance_policy() {
  if (GetArenaNoVirtual() == nullptr && maintenance_policy_ != nullptr) {
    delete maintenance_policy_;
  }
  maintenance_policy_ = nullptr;
}
inline const ::google::container::v1::MaintenancePolicy& SetMaintenancePolicyRequest::maintenance_policy() const {
  const ::google::container::v1::MaintenancePolicy* p = maintenance_policy_;
  // @@protoc_insertion_point(field_get:google.container.v1.SetMaintenancePolicyRequest.maintenance_policy)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::MaintenancePolicy*>(
      &::google::container::v1::_MaintenancePolicy_default_instance_);
}
inline ::google::container::v1::MaintenancePolicy* SetMaintenancePolicyRequest::release_maintenance_policy() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMaintenancePolicyRequest.maintenance_policy)
  
  ::google::container::v1::MaintenancePolicy* temp = maintenance_policy_;
  maintenance_policy_ = nullptr;
  return temp;
}
inline ::google::container::v1::MaintenancePolicy* SetMaintenancePolicyRequest::mutable_maintenance_policy() {
  
  if (maintenance_policy_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::MaintenancePolicy>(GetArenaNoVirtual());
    maintenance_policy_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMaintenancePolicyRequest.maintenance_policy)
  return maintenance_policy_;
}
inline void SetMaintenancePolicyRequest::set_allocated_maintenance_policy(::google::container::v1::MaintenancePolicy* maintenance_policy) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete maintenance_policy_;
  }
  if (maintenance_policy) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      maintenance_policy = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, maintenance_policy, submessage_arena);
    }
    
  } else {
    
  }
  maintenance_policy_ = maintenance_policy;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMaintenancePolicyRequest.maintenance_policy)
}

// string name = 5;
inline void SetMaintenancePolicyRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& SetMaintenancePolicyRequest::name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.SetMaintenancePolicyRequest.name)
  return name_.GetNoArena();
}
inline void SetMaintenancePolicyRequest::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.SetMaintenancePolicyRequest.name)
}
#if LANG_CXX11
inline void SetMaintenancePolicyRequest::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.SetMaintenancePolicyRequest.name)
}
#endif
inline void SetMaintenancePolicyRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.SetMaintenancePolicyRequest.name)
}
inline void SetMaintenancePolicyRequest::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.SetMaintenancePolicyRequest.name)
}
inline ::std::string* SetMaintenancePolicyRequest::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.SetMaintenancePolicyRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetMaintenancePolicyRequest::release_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.SetMaintenancePolicyRequest.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetMaintenancePolicyRequest::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.SetMaintenancePolicyRequest.name)
}

// -------------------------------------------------------------------

// StatusCondition

// .google.container.v1.StatusCondition.Code code = 1;
inline void StatusCondition::clear_code() {
  code_ = 0;
}
inline ::google::container::v1::StatusCondition_Code StatusCondition::code() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StatusCondition.code)
  return static_cast< ::google::container::v1::StatusCondition_Code >(code_);
}
inline void StatusCondition::set_code(::google::container::v1::StatusCondition_Code value) {
  
  code_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.StatusCondition.code)
}

// string message = 2;
inline void StatusCondition::clear_message() {
  message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& StatusCondition::message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.StatusCondition.message)
  return message_.GetNoArena();
}
inline void StatusCondition::set_message(const ::std::string& value) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.StatusCondition.message)
}
#if LANG_CXX11
inline void StatusCondition::set_message(::std::string&& value) {
  
  message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.StatusCondition.message)
}
#endif
inline void StatusCondition::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.StatusCondition.message)
}
inline void StatusCondition::set_message(const char* value, size_t size) {
  
  message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.StatusCondition.message)
}
inline ::std::string* StatusCondition::mutable_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.StatusCondition.message)
  return message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StatusCondition::release_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.StatusCondition.message)
  
  return message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StatusCondition::set_allocated_message(::std::string* message) {
  if (message != nullptr) {
    
  } else {
    
  }
  message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.StatusCondition.message)
}

// -------------------------------------------------------------------

// NetworkConfig

// string network = 1;
inline void NetworkConfig::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkConfig::network() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkConfig.network)
  return network_.GetNoArena();
}
inline void NetworkConfig::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkConfig.network)
}
#if LANG_CXX11
inline void NetworkConfig::set_network(::std::string&& value) {
  
  network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NetworkConfig.network)
}
#endif
inline void NetworkConfig::set_network(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NetworkConfig.network)
}
inline void NetworkConfig::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NetworkConfig.network)
}
inline ::std::string* NetworkConfig::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NetworkConfig.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkConfig::release_network() {
  // @@protoc_insertion_point(field_release:google.container.v1.NetworkConfig.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkConfig::set_allocated_network(::std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NetworkConfig.network)
}

// string subnetwork = 2;
inline void NetworkConfig::clear_subnetwork() {
  subnetwork_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkConfig::subnetwork() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkConfig.subnetwork)
  return subnetwork_.GetNoArena();
}
inline void NetworkConfig::set_subnetwork(const ::std::string& value) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkConfig.subnetwork)
}
#if LANG_CXX11
inline void NetworkConfig::set_subnetwork(::std::string&& value) {
  
  subnetwork_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.NetworkConfig.subnetwork)
}
#endif
inline void NetworkConfig::set_subnetwork(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.NetworkConfig.subnetwork)
}
inline void NetworkConfig::set_subnetwork(const char* value, size_t size) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.NetworkConfig.subnetwork)
}
inline ::std::string* NetworkConfig::mutable_subnetwork() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.NetworkConfig.subnetwork)
  return subnetwork_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkConfig::release_subnetwork() {
  // @@protoc_insertion_point(field_release:google.container.v1.NetworkConfig.subnetwork)
  
  return subnetwork_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkConfig::set_allocated_subnetwork(::std::string* subnetwork) {
  if (subnetwork != nullptr) {
    
  } else {
    
  }
  subnetwork_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NetworkConfig.subnetwork)
}

// bool enable_intra_node_visibility = 5;
inline void NetworkConfig::clear_enable_intra_node_visibility() {
  enable_intra_node_visibility_ = false;
}
inline bool NetworkConfig::enable_intra_node_visibility() const {
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkConfig.enable_intra_node_visibility)
  return enable_intra_node_visibility_;
}
inline void NetworkConfig::set_enable_intra_node_visibility(bool value) {
  
  enable_intra_node_visibility_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.NetworkConfig.enable_intra_node_visibility)
}

// .google.container.v1.DefaultSnatStatus default_snat_status = 7;
inline bool NetworkConfig::has_default_snat_status() const {
  return this != internal_default_instance() && default_snat_status_ != nullptr;
}
inline void NetworkConfig::clear_default_snat_status() {
  if (GetArenaNoVirtual() == nullptr && default_snat_status_ != nullptr) {
    delete default_snat_status_;
  }
  default_snat_status_ = nullptr;
}
inline const ::google::container::v1::DefaultSnatStatus& NetworkConfig::default_snat_status() const {
  const ::google::container::v1::DefaultSnatStatus* p = default_snat_status_;
  // @@protoc_insertion_point(field_get:google.container.v1.NetworkConfig.default_snat_status)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::DefaultSnatStatus*>(
      &::google::container::v1::_DefaultSnatStatus_default_instance_);
}
inline ::google::container::v1::DefaultSnatStatus* NetworkConfig::release_default_snat_status() {
  // @@protoc_insertion_point(field_release:google.container.v1.NetworkConfig.default_snat_status)
  
  ::google::container::v1::DefaultSnatStatus* temp = default_snat_status_;
  default_snat_status_ = nullptr;
  return temp;
}
inline ::google::container::v1::DefaultSnatStatus* NetworkConfig::mutable_default_snat_status() {
  
  if (default_snat_status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::DefaultSnatStatus>(GetArenaNoVirtual());
    default_snat_status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.NetworkConfig.default_snat_status)
  return default_snat_status_;
}
inline void NetworkConfig::set_allocated_default_snat_status(::google::container::v1::DefaultSnatStatus* default_snat_status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete default_snat_status_;
  }
  if (default_snat_status) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      default_snat_status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, default_snat_status, submessage_arena);
    }
    
  } else {
    
  }
  default_snat_status_ = default_snat_status;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.NetworkConfig.default_snat_status)
}

// -------------------------------------------------------------------

// GetOpenIDConfigRequest

// string parent = 1;
inline void GetOpenIDConfigRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOpenIDConfigRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOpenIDConfigRequest.parent)
  return parent_.GetNoArena();
}
inline void GetOpenIDConfigRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigRequest.parent)
}
#if LANG_CXX11
inline void GetOpenIDConfigRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOpenIDConfigRequest.parent)
}
#endif
inline void GetOpenIDConfigRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOpenIDConfigRequest.parent)
}
inline void GetOpenIDConfigRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOpenIDConfigRequest.parent)
}
inline ::std::string* GetOpenIDConfigRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOpenIDConfigRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOpenIDConfigRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOpenIDConfigRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOpenIDConfigRequest::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOpenIDConfigRequest.parent)
}

// -------------------------------------------------------------------

// GetOpenIDConfigResponse

// string issuer = 1;
inline void GetOpenIDConfigResponse::clear_issuer() {
  issuer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOpenIDConfigResponse::issuer() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOpenIDConfigResponse.issuer)
  return issuer_.GetNoArena();
}
inline void GetOpenIDConfigResponse::set_issuer(const ::std::string& value) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.issuer)
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::set_issuer(::std::string&& value) {
  
  issuer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOpenIDConfigResponse.issuer)
}
#endif
inline void GetOpenIDConfigResponse::set_issuer(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOpenIDConfigResponse.issuer)
}
inline void GetOpenIDConfigResponse::set_issuer(const char* value, size_t size) {
  
  issuer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOpenIDConfigResponse.issuer)
}
inline ::std::string* GetOpenIDConfigResponse::mutable_issuer() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOpenIDConfigResponse.issuer)
  return issuer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOpenIDConfigResponse::release_issuer() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOpenIDConfigResponse.issuer)
  
  return issuer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOpenIDConfigResponse::set_allocated_issuer(::std::string* issuer) {
  if (issuer != nullptr) {
    
  } else {
    
  }
  issuer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), issuer);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOpenIDConfigResponse.issuer)
}

// string jwks_uri = 2;
inline void GetOpenIDConfigResponse::clear_jwks_uri() {
  jwks_uri_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetOpenIDConfigResponse::jwks_uri() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOpenIDConfigResponse.jwks_uri)
  return jwks_uri_.GetNoArena();
}
inline void GetOpenIDConfigResponse::set_jwks_uri(const ::std::string& value) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.jwks_uri)
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::set_jwks_uri(::std::string&& value) {
  
  jwks_uri_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetOpenIDConfigResponse.jwks_uri)
}
#endif
inline void GetOpenIDConfigResponse::set_jwks_uri(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOpenIDConfigResponse.jwks_uri)
}
inline void GetOpenIDConfigResponse::set_jwks_uri(const char* value, size_t size) {
  
  jwks_uri_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOpenIDConfigResponse.jwks_uri)
}
inline ::std::string* GetOpenIDConfigResponse::mutable_jwks_uri() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOpenIDConfigResponse.jwks_uri)
  return jwks_uri_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetOpenIDConfigResponse::release_jwks_uri() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetOpenIDConfigResponse.jwks_uri)
  
  return jwks_uri_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetOpenIDConfigResponse::set_allocated_jwks_uri(::std::string* jwks_uri) {
  if (jwks_uri != nullptr) {
    
  } else {
    
  }
  jwks_uri_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), jwks_uri);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetOpenIDConfigResponse.jwks_uri)
}

// repeated string response_types_supported = 3;
inline int GetOpenIDConfigResponse::response_types_supported_size() const {
  return response_types_supported_.size();
}
inline void GetOpenIDConfigResponse::clear_response_types_supported() {
  response_types_supported_.Clear();
}
inline const ::std::string& GetOpenIDConfigResponse::response_types_supported(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
  return response_types_supported_.Get(index);
}
inline ::std::string* GetOpenIDConfigResponse::mutable_response_types_supported(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
  return response_types_supported_.Mutable(index);
}
inline void GetOpenIDConfigResponse::set_response_types_supported(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
  response_types_supported_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::set_response_types_supported(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
  response_types_supported_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetOpenIDConfigResponse::set_response_types_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_types_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
}
inline void GetOpenIDConfigResponse::set_response_types_supported(int index, const char* value, size_t size) {
  response_types_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
}
inline ::std::string* GetOpenIDConfigResponse::add_response_types_supported() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
  return response_types_supported_.Add();
}
inline void GetOpenIDConfigResponse::add_response_types_supported(const ::std::string& value) {
  response_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::add_response_types_supported(::std::string&& value) {
  response_types_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
}
#endif
inline void GetOpenIDConfigResponse::add_response_types_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  response_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
}
inline void GetOpenIDConfigResponse::add_response_types_supported(const char* value, size_t size) {
  response_types_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GetOpenIDConfigResponse::response_types_supported() const {
  // @@protoc_insertion_point(field_list:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
  return response_types_supported_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GetOpenIDConfigResponse::mutable_response_types_supported() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.GetOpenIDConfigResponse.response_types_supported)
  return &response_types_supported_;
}

// repeated string subject_types_supported = 4;
inline int GetOpenIDConfigResponse::subject_types_supported_size() const {
  return subject_types_supported_.size();
}
inline void GetOpenIDConfigResponse::clear_subject_types_supported() {
  subject_types_supported_.Clear();
}
inline const ::std::string& GetOpenIDConfigResponse::subject_types_supported(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
  return subject_types_supported_.Get(index);
}
inline ::std::string* GetOpenIDConfigResponse::mutable_subject_types_supported(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
  return subject_types_supported_.Mutable(index);
}
inline void GetOpenIDConfigResponse::set_subject_types_supported(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
  subject_types_supported_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::set_subject_types_supported(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
  subject_types_supported_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetOpenIDConfigResponse::set_subject_types_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subject_types_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
}
inline void GetOpenIDConfigResponse::set_subject_types_supported(int index, const char* value, size_t size) {
  subject_types_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
}
inline ::std::string* GetOpenIDConfigResponse::add_subject_types_supported() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
  return subject_types_supported_.Add();
}
inline void GetOpenIDConfigResponse::add_subject_types_supported(const ::std::string& value) {
  subject_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::add_subject_types_supported(::std::string&& value) {
  subject_types_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
}
#endif
inline void GetOpenIDConfigResponse::add_subject_types_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subject_types_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
}
inline void GetOpenIDConfigResponse::add_subject_types_supported(const char* value, size_t size) {
  subject_types_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GetOpenIDConfigResponse::subject_types_supported() const {
  // @@protoc_insertion_point(field_list:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
  return subject_types_supported_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GetOpenIDConfigResponse::mutable_subject_types_supported() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.GetOpenIDConfigResponse.subject_types_supported)
  return &subject_types_supported_;
}

// repeated string id_token_signing_alg_values_supported = 5;
inline int GetOpenIDConfigResponse::id_token_signing_alg_values_supported_size() const {
  return id_token_signing_alg_values_supported_.size();
}
inline void GetOpenIDConfigResponse::clear_id_token_signing_alg_values_supported() {
  id_token_signing_alg_values_supported_.Clear();
}
inline const ::std::string& GetOpenIDConfigResponse::id_token_signing_alg_values_supported(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
  return id_token_signing_alg_values_supported_.Get(index);
}
inline ::std::string* GetOpenIDConfigResponse::mutable_id_token_signing_alg_values_supported(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
  return id_token_signing_alg_values_supported_.Mutable(index);
}
inline void GetOpenIDConfigResponse::set_id_token_signing_alg_values_supported(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
  id_token_signing_alg_values_supported_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::set_id_token_signing_alg_values_supported(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
  id_token_signing_alg_values_supported_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetOpenIDConfigResponse::set_id_token_signing_alg_values_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_token_signing_alg_values_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
}
inline void GetOpenIDConfigResponse::set_id_token_signing_alg_values_supported(int index, const char* value, size_t size) {
  id_token_signing_alg_values_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
}
inline ::std::string* GetOpenIDConfigResponse::add_id_token_signing_alg_values_supported() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
  return id_token_signing_alg_values_supported_.Add();
}
inline void GetOpenIDConfigResponse::add_id_token_signing_alg_values_supported(const ::std::string& value) {
  id_token_signing_alg_values_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::add_id_token_signing_alg_values_supported(::std::string&& value) {
  id_token_signing_alg_values_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
}
#endif
inline void GetOpenIDConfigResponse::add_id_token_signing_alg_values_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  id_token_signing_alg_values_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
}
inline void GetOpenIDConfigResponse::add_id_token_signing_alg_values_supported(const char* value, size_t size) {
  id_token_signing_alg_values_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GetOpenIDConfigResponse::id_token_signing_alg_values_supported() const {
  // @@protoc_insertion_point(field_list:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
  return id_token_signing_alg_values_supported_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GetOpenIDConfigResponse::mutable_id_token_signing_alg_values_supported() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.GetOpenIDConfigResponse.id_token_signing_alg_values_supported)
  return &id_token_signing_alg_values_supported_;
}

// repeated string claims_supported = 6;
inline int GetOpenIDConfigResponse::claims_supported_size() const {
  return claims_supported_.size();
}
inline void GetOpenIDConfigResponse::clear_claims_supported() {
  claims_supported_.Clear();
}
inline const ::std::string& GetOpenIDConfigResponse::claims_supported(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOpenIDConfigResponse.claims_supported)
  return claims_supported_.Get(index);
}
inline ::std::string* GetOpenIDConfigResponse::mutable_claims_supported(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOpenIDConfigResponse.claims_supported)
  return claims_supported_.Mutable(index);
}
inline void GetOpenIDConfigResponse::set_claims_supported(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.claims_supported)
  claims_supported_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::set_claims_supported(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.claims_supported)
  claims_supported_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetOpenIDConfigResponse::set_claims_supported(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  claims_supported_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOpenIDConfigResponse.claims_supported)
}
inline void GetOpenIDConfigResponse::set_claims_supported(int index, const char* value, size_t size) {
  claims_supported_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOpenIDConfigResponse.claims_supported)
}
inline ::std::string* GetOpenIDConfigResponse::add_claims_supported() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.GetOpenIDConfigResponse.claims_supported)
  return claims_supported_.Add();
}
inline void GetOpenIDConfigResponse::add_claims_supported(const ::std::string& value) {
  claims_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.claims_supported)
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::add_claims_supported(::std::string&& value) {
  claims_supported_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.claims_supported)
}
#endif
inline void GetOpenIDConfigResponse::add_claims_supported(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  claims_supported_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.GetOpenIDConfigResponse.claims_supported)
}
inline void GetOpenIDConfigResponse::add_claims_supported(const char* value, size_t size) {
  claims_supported_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.GetOpenIDConfigResponse.claims_supported)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GetOpenIDConfigResponse::claims_supported() const {
  // @@protoc_insertion_point(field_list:google.container.v1.GetOpenIDConfigResponse.claims_supported)
  return claims_supported_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GetOpenIDConfigResponse::mutable_claims_supported() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.GetOpenIDConfigResponse.claims_supported)
  return &claims_supported_;
}

// repeated string grant_types = 7;
inline int GetOpenIDConfigResponse::grant_types_size() const {
  return grant_types_.size();
}
inline void GetOpenIDConfigResponse::clear_grant_types() {
  grant_types_.Clear();
}
inline const ::std::string& GetOpenIDConfigResponse::grant_types(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetOpenIDConfigResponse.grant_types)
  return grant_types_.Get(index);
}
inline ::std::string* GetOpenIDConfigResponse::mutable_grant_types(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetOpenIDConfigResponse.grant_types)
  return grant_types_.Mutable(index);
}
inline void GetOpenIDConfigResponse::set_grant_types(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.grant_types)
  grant_types_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::set_grant_types(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.container.v1.GetOpenIDConfigResponse.grant_types)
  grant_types_.Mutable(index)->assign(std::move(value));
}
#endif
inline void GetOpenIDConfigResponse::set_grant_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  grant_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetOpenIDConfigResponse.grant_types)
}
inline void GetOpenIDConfigResponse::set_grant_types(int index, const char* value, size_t size) {
  grant_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetOpenIDConfigResponse.grant_types)
}
inline ::std::string* GetOpenIDConfigResponse::add_grant_types() {
  // @@protoc_insertion_point(field_add_mutable:google.container.v1.GetOpenIDConfigResponse.grant_types)
  return grant_types_.Add();
}
inline void GetOpenIDConfigResponse::add_grant_types(const ::std::string& value) {
  grant_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.grant_types)
}
#if LANG_CXX11
inline void GetOpenIDConfigResponse::add_grant_types(::std::string&& value) {
  grant_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.container.v1.GetOpenIDConfigResponse.grant_types)
}
#endif
inline void GetOpenIDConfigResponse::add_grant_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  grant_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.container.v1.GetOpenIDConfigResponse.grant_types)
}
inline void GetOpenIDConfigResponse::add_grant_types(const char* value, size_t size) {
  grant_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.container.v1.GetOpenIDConfigResponse.grant_types)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
GetOpenIDConfigResponse::grant_types() const {
  // @@protoc_insertion_point(field_list:google.container.v1.GetOpenIDConfigResponse.grant_types)
  return grant_types_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
GetOpenIDConfigResponse::mutable_grant_types() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.GetOpenIDConfigResponse.grant_types)
  return &grant_types_;
}

// -------------------------------------------------------------------

// GetJSONWebKeysRequest

// string parent = 1;
inline void GetJSONWebKeysRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& GetJSONWebKeysRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetJSONWebKeysRequest.parent)
  return parent_.GetNoArena();
}
inline void GetJSONWebKeysRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.GetJSONWebKeysRequest.parent)
}
#if LANG_CXX11
inline void GetJSONWebKeysRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.GetJSONWebKeysRequest.parent)
}
#endif
inline void GetJSONWebKeysRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.GetJSONWebKeysRequest.parent)
}
inline void GetJSONWebKeysRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.GetJSONWebKeysRequest.parent)
}
inline ::std::string* GetJSONWebKeysRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetJSONWebKeysRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJSONWebKeysRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.container.v1.GetJSONWebKeysRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJSONWebKeysRequest::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.GetJSONWebKeysRequest.parent)
}

// -------------------------------------------------------------------

// Jwk

// string kty = 1;
inline void Jwk::clear_kty() {
  kty_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwk::kty() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Jwk.kty)
  return kty_.GetNoArena();
}
inline void Jwk::set_kty(const ::std::string& value) {
  
  kty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Jwk.kty)
}
#if LANG_CXX11
inline void Jwk::set_kty(::std::string&& value) {
  
  kty_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Jwk.kty)
}
#endif
inline void Jwk::set_kty(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Jwk.kty)
}
inline void Jwk::set_kty(const char* value, size_t size) {
  
  kty_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Jwk.kty)
}
inline ::std::string* Jwk::mutable_kty() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Jwk.kty)
  return kty_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwk::release_kty() {
  // @@protoc_insertion_point(field_release:google.container.v1.Jwk.kty)
  
  return kty_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwk::set_allocated_kty(::std::string* kty) {
  if (kty != nullptr) {
    
  } else {
    
  }
  kty_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kty);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Jwk.kty)
}

// string alg = 2;
inline void Jwk::clear_alg() {
  alg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwk::alg() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Jwk.alg)
  return alg_.GetNoArena();
}
inline void Jwk::set_alg(const ::std::string& value) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Jwk.alg)
}
#if LANG_CXX11
inline void Jwk::set_alg(::std::string&& value) {
  
  alg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Jwk.alg)
}
#endif
inline void Jwk::set_alg(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Jwk.alg)
}
inline void Jwk::set_alg(const char* value, size_t size) {
  
  alg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Jwk.alg)
}
inline ::std::string* Jwk::mutable_alg() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Jwk.alg)
  return alg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwk::release_alg() {
  // @@protoc_insertion_point(field_release:google.container.v1.Jwk.alg)
  
  return alg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwk::set_allocated_alg(::std::string* alg) {
  if (alg != nullptr) {
    
  } else {
    
  }
  alg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alg);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Jwk.alg)
}

// string use = 3;
inline void Jwk::clear_use() {
  use_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwk::use() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Jwk.use)
  return use_.GetNoArena();
}
inline void Jwk::set_use(const ::std::string& value) {
  
  use_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Jwk.use)
}
#if LANG_CXX11
inline void Jwk::set_use(::std::string&& value) {
  
  use_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Jwk.use)
}
#endif
inline void Jwk::set_use(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  use_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Jwk.use)
}
inline void Jwk::set_use(const char* value, size_t size) {
  
  use_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Jwk.use)
}
inline ::std::string* Jwk::mutable_use() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Jwk.use)
  return use_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwk::release_use() {
  // @@protoc_insertion_point(field_release:google.container.v1.Jwk.use)
  
  return use_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwk::set_allocated_use(::std::string* use) {
  if (use != nullptr) {
    
  } else {
    
  }
  use_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), use);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Jwk.use)
}

// string kid = 4;
inline void Jwk::clear_kid() {
  kid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwk::kid() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Jwk.kid)
  return kid_.GetNoArena();
}
inline void Jwk::set_kid(const ::std::string& value) {
  
  kid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Jwk.kid)
}
#if LANG_CXX11
inline void Jwk::set_kid(::std::string&& value) {
  
  kid_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Jwk.kid)
}
#endif
inline void Jwk::set_kid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  kid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Jwk.kid)
}
inline void Jwk::set_kid(const char* value, size_t size) {
  
  kid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Jwk.kid)
}
inline ::std::string* Jwk::mutable_kid() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Jwk.kid)
  return kid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwk::release_kid() {
  // @@protoc_insertion_point(field_release:google.container.v1.Jwk.kid)
  
  return kid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwk::set_allocated_kid(::std::string* kid) {
  if (kid != nullptr) {
    
  } else {
    
  }
  kid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kid);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Jwk.kid)
}

// string n = 5;
inline void Jwk::clear_n() {
  n_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwk::n() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Jwk.n)
  return n_.GetNoArena();
}
inline void Jwk::set_n(const ::std::string& value) {
  
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Jwk.n)
}
#if LANG_CXX11
inline void Jwk::set_n(::std::string&& value) {
  
  n_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Jwk.n)
}
#endif
inline void Jwk::set_n(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Jwk.n)
}
inline void Jwk::set_n(const char* value, size_t size) {
  
  n_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Jwk.n)
}
inline ::std::string* Jwk::mutable_n() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Jwk.n)
  return n_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwk::release_n() {
  // @@protoc_insertion_point(field_release:google.container.v1.Jwk.n)
  
  return n_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwk::set_allocated_n(::std::string* n) {
  if (n != nullptr) {
    
  } else {
    
  }
  n_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), n);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Jwk.n)
}

// string e = 6;
inline void Jwk::clear_e() {
  e_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwk::e() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Jwk.e)
  return e_.GetNoArena();
}
inline void Jwk::set_e(const ::std::string& value) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Jwk.e)
}
#if LANG_CXX11
inline void Jwk::set_e(::std::string&& value) {
  
  e_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Jwk.e)
}
#endif
inline void Jwk::set_e(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Jwk.e)
}
inline void Jwk::set_e(const char* value, size_t size) {
  
  e_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Jwk.e)
}
inline ::std::string* Jwk::mutable_e() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Jwk.e)
  return e_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwk::release_e() {
  // @@protoc_insertion_point(field_release:google.container.v1.Jwk.e)
  
  return e_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwk::set_allocated_e(::std::string* e) {
  if (e != nullptr) {
    
  } else {
    
  }
  e_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), e);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Jwk.e)
}

// string x = 7;
inline void Jwk::clear_x() {
  x_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwk::x() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Jwk.x)
  return x_.GetNoArena();
}
inline void Jwk::set_x(const ::std::string& value) {
  
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Jwk.x)
}
#if LANG_CXX11
inline void Jwk::set_x(::std::string&& value) {
  
  x_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Jwk.x)
}
#endif
inline void Jwk::set_x(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Jwk.x)
}
inline void Jwk::set_x(const char* value, size_t size) {
  
  x_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Jwk.x)
}
inline ::std::string* Jwk::mutable_x() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Jwk.x)
  return x_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwk::release_x() {
  // @@protoc_insertion_point(field_release:google.container.v1.Jwk.x)
  
  return x_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwk::set_allocated_x(::std::string* x) {
  if (x != nullptr) {
    
  } else {
    
  }
  x_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), x);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Jwk.x)
}

// string y = 8;
inline void Jwk::clear_y() {
  y_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwk::y() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Jwk.y)
  return y_.GetNoArena();
}
inline void Jwk::set_y(const ::std::string& value) {
  
  y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Jwk.y)
}
#if LANG_CXX11
inline void Jwk::set_y(::std::string&& value) {
  
  y_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Jwk.y)
}
#endif
inline void Jwk::set_y(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Jwk.y)
}
inline void Jwk::set_y(const char* value, size_t size) {
  
  y_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Jwk.y)
}
inline ::std::string* Jwk::mutable_y() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Jwk.y)
  return y_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwk::release_y() {
  // @@protoc_insertion_point(field_release:google.container.v1.Jwk.y)
  
  return y_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwk::set_allocated_y(::std::string* y) {
  if (y != nullptr) {
    
  } else {
    
  }
  y_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), y);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Jwk.y)
}

// string crv = 9;
inline void Jwk::clear_crv() {
  crv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Jwk::crv() const {
  // @@protoc_insertion_point(field_get:google.container.v1.Jwk.crv)
  return crv_.GetNoArena();
}
inline void Jwk::set_crv(const ::std::string& value) {
  
  crv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.Jwk.crv)
}
#if LANG_CXX11
inline void Jwk::set_crv(::std::string&& value) {
  
  crv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.Jwk.crv)
}
#endif
inline void Jwk::set_crv(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  crv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.Jwk.crv)
}
inline void Jwk::set_crv(const char* value, size_t size) {
  
  crv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.Jwk.crv)
}
inline ::std::string* Jwk::mutable_crv() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.Jwk.crv)
  return crv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Jwk::release_crv() {
  // @@protoc_insertion_point(field_release:google.container.v1.Jwk.crv)
  
  return crv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Jwk::set_allocated_crv(::std::string* crv) {
  if (crv != nullptr) {
    
  } else {
    
  }
  crv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), crv);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.Jwk.crv)
}

// -------------------------------------------------------------------

// GetJSONWebKeysResponse

// repeated .google.container.v1.Jwk keys = 1;
inline int GetJSONWebKeysResponse::keys_size() const {
  return keys_.size();
}
inline void GetJSONWebKeysResponse::clear_keys() {
  keys_.Clear();
}
inline ::google::container::v1::Jwk* GetJSONWebKeysResponse::mutable_keys(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.GetJSONWebKeysResponse.keys)
  return keys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::Jwk >*
GetJSONWebKeysResponse::mutable_keys() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.GetJSONWebKeysResponse.keys)
  return &keys_;
}
inline const ::google::container::v1::Jwk& GetJSONWebKeysResponse::keys(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.GetJSONWebKeysResponse.keys)
  return keys_.Get(index);
}
inline ::google::container::v1::Jwk* GetJSONWebKeysResponse::add_keys() {
  // @@protoc_insertion_point(field_add:google.container.v1.GetJSONWebKeysResponse.keys)
  return keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::Jwk >&
GetJSONWebKeysResponse::keys() const {
  // @@protoc_insertion_point(field_list:google.container.v1.GetJSONWebKeysResponse.keys)
  return keys_;
}

// -------------------------------------------------------------------

// ReleaseChannel

// .google.container.v1.ReleaseChannel.Channel channel = 1;
inline void ReleaseChannel::clear_channel() {
  channel_ = 0;
}
inline ::google::container::v1::ReleaseChannel_Channel ReleaseChannel::channel() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ReleaseChannel.channel)
  return static_cast< ::google::container::v1::ReleaseChannel_Channel >(channel_);
}
inline void ReleaseChannel::set_channel(::google::container::v1::ReleaseChannel_Channel value) {
  
  channel_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ReleaseChannel.channel)
}

// -------------------------------------------------------------------

// IntraNodeVisibilityConfig

// bool enabled = 1;
inline void IntraNodeVisibilityConfig::clear_enabled() {
  enabled_ = false;
}
inline bool IntraNodeVisibilityConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.IntraNodeVisibilityConfig.enabled)
  return enabled_;
}
inline void IntraNodeVisibilityConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.IntraNodeVisibilityConfig.enabled)
}

// -------------------------------------------------------------------

// MaxPodsConstraint

// int64 max_pods_per_node = 1;
inline void MaxPodsConstraint::clear_max_pods_per_node() {
  max_pods_per_node_ = PROTOBUF_LONGLONG(0);
}
inline ::google::protobuf::int64 MaxPodsConstraint::max_pods_per_node() const {
  // @@protoc_insertion_point(field_get:google.container.v1.MaxPodsConstraint.max_pods_per_node)
  return max_pods_per_node_;
}
inline void MaxPodsConstraint::set_max_pods_per_node(::google::protobuf::int64 value) {
  
  max_pods_per_node_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.MaxPodsConstraint.max_pods_per_node)
}

// -------------------------------------------------------------------

// WorkloadIdentityConfig

// string workload_pool = 2;
inline void WorkloadIdentityConfig::clear_workload_pool() {
  workload_pool_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WorkloadIdentityConfig::workload_pool() const {
  // @@protoc_insertion_point(field_get:google.container.v1.WorkloadIdentityConfig.workload_pool)
  return workload_pool_.GetNoArena();
}
inline void WorkloadIdentityConfig::set_workload_pool(const ::std::string& value) {
  
  workload_pool_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.WorkloadIdentityConfig.workload_pool)
}
#if LANG_CXX11
inline void WorkloadIdentityConfig::set_workload_pool(::std::string&& value) {
  
  workload_pool_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.WorkloadIdentityConfig.workload_pool)
}
#endif
inline void WorkloadIdentityConfig::set_workload_pool(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  workload_pool_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.WorkloadIdentityConfig.workload_pool)
}
inline void WorkloadIdentityConfig::set_workload_pool(const char* value, size_t size) {
  
  workload_pool_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.WorkloadIdentityConfig.workload_pool)
}
inline ::std::string* WorkloadIdentityConfig::mutable_workload_pool() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.WorkloadIdentityConfig.workload_pool)
  return workload_pool_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WorkloadIdentityConfig::release_workload_pool() {
  // @@protoc_insertion_point(field_release:google.container.v1.WorkloadIdentityConfig.workload_pool)
  
  return workload_pool_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WorkloadIdentityConfig::set_allocated_workload_pool(::std::string* workload_pool) {
  if (workload_pool != nullptr) {
    
  } else {
    
  }
  workload_pool_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workload_pool);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.WorkloadIdentityConfig.workload_pool)
}

// -------------------------------------------------------------------

// DatabaseEncryption

// .google.container.v1.DatabaseEncryption.State state = 2;
inline void DatabaseEncryption::clear_state() {
  state_ = 0;
}
inline ::google::container::v1::DatabaseEncryption_State DatabaseEncryption::state() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DatabaseEncryption.state)
  return static_cast< ::google::container::v1::DatabaseEncryption_State >(state_);
}
inline void DatabaseEncryption::set_state(::google::container::v1::DatabaseEncryption_State value) {
  
  state_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.DatabaseEncryption.state)
}

// string key_name = 1;
inline void DatabaseEncryption::clear_key_name() {
  key_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DatabaseEncryption::key_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DatabaseEncryption.key_name)
  return key_name_.GetNoArena();
}
inline void DatabaseEncryption::set_key_name(const ::std::string& value) {
  
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.DatabaseEncryption.key_name)
}
#if LANG_CXX11
inline void DatabaseEncryption::set_key_name(::std::string&& value) {
  
  key_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.DatabaseEncryption.key_name)
}
#endif
inline void DatabaseEncryption::set_key_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.DatabaseEncryption.key_name)
}
inline void DatabaseEncryption::set_key_name(const char* value, size_t size) {
  
  key_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.DatabaseEncryption.key_name)
}
inline ::std::string* DatabaseEncryption::mutable_key_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.DatabaseEncryption.key_name)
  return key_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DatabaseEncryption::release_key_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.DatabaseEncryption.key_name)
  
  return key_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DatabaseEncryption::set_allocated_key_name(::std::string* key_name) {
  if (key_name != nullptr) {
    
  } else {
    
  }
  key_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.DatabaseEncryption.key_name)
}

// -------------------------------------------------------------------

// ListUsableSubnetworksRequest

// string parent = 1;
inline void ListUsableSubnetworksRequest::clear_parent() {
  parent_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUsableSubnetworksRequest::parent() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListUsableSubnetworksRequest.parent)
  return parent_.GetNoArena();
}
inline void ListUsableSubnetworksRequest::set_parent(const ::std::string& value) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListUsableSubnetworksRequest.parent)
}
#if LANG_CXX11
inline void ListUsableSubnetworksRequest::set_parent(::std::string&& value) {
  
  parent_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListUsableSubnetworksRequest.parent)
}
#endif
inline void ListUsableSubnetworksRequest::set_parent(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListUsableSubnetworksRequest.parent)
}
inline void ListUsableSubnetworksRequest::set_parent(const char* value, size_t size) {
  
  parent_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListUsableSubnetworksRequest.parent)
}
inline ::std::string* ListUsableSubnetworksRequest::mutable_parent() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListUsableSubnetworksRequest.parent)
  return parent_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUsableSubnetworksRequest::release_parent() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListUsableSubnetworksRequest.parent)
  
  return parent_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUsableSubnetworksRequest::set_allocated_parent(::std::string* parent) {
  if (parent != nullptr) {
    
  } else {
    
  }
  parent_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parent);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListUsableSubnetworksRequest.parent)
}

// string filter = 2;
inline void ListUsableSubnetworksRequest::clear_filter() {
  filter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUsableSubnetworksRequest::filter() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListUsableSubnetworksRequest.filter)
  return filter_.GetNoArena();
}
inline void ListUsableSubnetworksRequest::set_filter(const ::std::string& value) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListUsableSubnetworksRequest.filter)
}
#if LANG_CXX11
inline void ListUsableSubnetworksRequest::set_filter(::std::string&& value) {
  
  filter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListUsableSubnetworksRequest.filter)
}
#endif
inline void ListUsableSubnetworksRequest::set_filter(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListUsableSubnetworksRequest.filter)
}
inline void ListUsableSubnetworksRequest::set_filter(const char* value, size_t size) {
  
  filter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListUsableSubnetworksRequest.filter)
}
inline ::std::string* ListUsableSubnetworksRequest::mutable_filter() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListUsableSubnetworksRequest.filter)
  return filter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUsableSubnetworksRequest::release_filter() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListUsableSubnetworksRequest.filter)
  
  return filter_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUsableSubnetworksRequest::set_allocated_filter(::std::string* filter) {
  if (filter != nullptr) {
    
  } else {
    
  }
  filter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filter);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListUsableSubnetworksRequest.filter)
}

// int32 page_size = 3;
inline void ListUsableSubnetworksRequest::clear_page_size() {
  page_size_ = 0;
}
inline ::google::protobuf::int32 ListUsableSubnetworksRequest::page_size() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListUsableSubnetworksRequest.page_size)
  return page_size_;
}
inline void ListUsableSubnetworksRequest::set_page_size(::google::protobuf::int32 value) {
  
  page_size_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ListUsableSubnetworksRequest.page_size)
}

// string page_token = 4;
inline void ListUsableSubnetworksRequest::clear_page_token() {
  page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUsableSubnetworksRequest::page_token() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListUsableSubnetworksRequest.page_token)
  return page_token_.GetNoArena();
}
inline void ListUsableSubnetworksRequest::set_page_token(const ::std::string& value) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListUsableSubnetworksRequest.page_token)
}
#if LANG_CXX11
inline void ListUsableSubnetworksRequest::set_page_token(::std::string&& value) {
  
  page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListUsableSubnetworksRequest.page_token)
}
#endif
inline void ListUsableSubnetworksRequest::set_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListUsableSubnetworksRequest.page_token)
}
inline void ListUsableSubnetworksRequest::set_page_token(const char* value, size_t size) {
  
  page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListUsableSubnetworksRequest.page_token)
}
inline ::std::string* ListUsableSubnetworksRequest::mutable_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListUsableSubnetworksRequest.page_token)
  return page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUsableSubnetworksRequest::release_page_token() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListUsableSubnetworksRequest.page_token)
  
  return page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUsableSubnetworksRequest::set_allocated_page_token(::std::string* page_token) {
  if (page_token != nullptr) {
    
  } else {
    
  }
  page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), page_token);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListUsableSubnetworksRequest.page_token)
}

// -------------------------------------------------------------------

// ListUsableSubnetworksResponse

// repeated .google.container.v1.UsableSubnetwork subnetworks = 1;
inline int ListUsableSubnetworksResponse::subnetworks_size() const {
  return subnetworks_.size();
}
inline void ListUsableSubnetworksResponse::clear_subnetworks() {
  subnetworks_.Clear();
}
inline ::google::container::v1::UsableSubnetwork* ListUsableSubnetworksResponse::mutable_subnetworks(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListUsableSubnetworksResponse.subnetworks)
  return subnetworks_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetwork >*
ListUsableSubnetworksResponse::mutable_subnetworks() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.ListUsableSubnetworksResponse.subnetworks)
  return &subnetworks_;
}
inline const ::google::container::v1::UsableSubnetwork& ListUsableSubnetworksResponse::subnetworks(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListUsableSubnetworksResponse.subnetworks)
  return subnetworks_.Get(index);
}
inline ::google::container::v1::UsableSubnetwork* ListUsableSubnetworksResponse::add_subnetworks() {
  // @@protoc_insertion_point(field_add:google.container.v1.ListUsableSubnetworksResponse.subnetworks)
  return subnetworks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetwork >&
ListUsableSubnetworksResponse::subnetworks() const {
  // @@protoc_insertion_point(field_list:google.container.v1.ListUsableSubnetworksResponse.subnetworks)
  return subnetworks_;
}

// string next_page_token = 2;
inline void ListUsableSubnetworksResponse::clear_next_page_token() {
  next_page_token_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ListUsableSubnetworksResponse::next_page_token() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ListUsableSubnetworksResponse.next_page_token)
  return next_page_token_.GetNoArena();
}
inline void ListUsableSubnetworksResponse::set_next_page_token(const ::std::string& value) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ListUsableSubnetworksResponse.next_page_token)
}
#if LANG_CXX11
inline void ListUsableSubnetworksResponse::set_next_page_token(::std::string&& value) {
  
  next_page_token_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ListUsableSubnetworksResponse.next_page_token)
}
#endif
inline void ListUsableSubnetworksResponse::set_next_page_token(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ListUsableSubnetworksResponse.next_page_token)
}
inline void ListUsableSubnetworksResponse::set_next_page_token(const char* value, size_t size) {
  
  next_page_token_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ListUsableSubnetworksResponse.next_page_token)
}
inline ::std::string* ListUsableSubnetworksResponse::mutable_next_page_token() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ListUsableSubnetworksResponse.next_page_token)
  return next_page_token_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ListUsableSubnetworksResponse::release_next_page_token() {
  // @@protoc_insertion_point(field_release:google.container.v1.ListUsableSubnetworksResponse.next_page_token)
  
  return next_page_token_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ListUsableSubnetworksResponse::set_allocated_next_page_token(::std::string* next_page_token) {
  if (next_page_token != nullptr) {
    
  } else {
    
  }
  next_page_token_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), next_page_token);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ListUsableSubnetworksResponse.next_page_token)
}

// -------------------------------------------------------------------

// UsableSubnetworkSecondaryRange

// string range_name = 1;
inline void UsableSubnetworkSecondaryRange::clear_range_name() {
  range_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UsableSubnetworkSecondaryRange::range_name() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UsableSubnetworkSecondaryRange.range_name)
  return range_name_.GetNoArena();
}
inline void UsableSubnetworkSecondaryRange::set_range_name(const ::std::string& value) {
  
  range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UsableSubnetworkSecondaryRange.range_name)
}
#if LANG_CXX11
inline void UsableSubnetworkSecondaryRange::set_range_name(::std::string&& value) {
  
  range_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UsableSubnetworkSecondaryRange.range_name)
}
#endif
inline void UsableSubnetworkSecondaryRange::set_range_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UsableSubnetworkSecondaryRange.range_name)
}
inline void UsableSubnetworkSecondaryRange::set_range_name(const char* value, size_t size) {
  
  range_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UsableSubnetworkSecondaryRange.range_name)
}
inline ::std::string* UsableSubnetworkSecondaryRange::mutable_range_name() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UsableSubnetworkSecondaryRange.range_name)
  return range_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UsableSubnetworkSecondaryRange::release_range_name() {
  // @@protoc_insertion_point(field_release:google.container.v1.UsableSubnetworkSecondaryRange.range_name)
  
  return range_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UsableSubnetworkSecondaryRange::set_allocated_range_name(::std::string* range_name) {
  if (range_name != nullptr) {
    
  } else {
    
  }
  range_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), range_name);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UsableSubnetworkSecondaryRange.range_name)
}

// string ip_cidr_range = 2;
inline void UsableSubnetworkSecondaryRange::clear_ip_cidr_range() {
  ip_cidr_range_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UsableSubnetworkSecondaryRange::ip_cidr_range() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UsableSubnetworkSecondaryRange.ip_cidr_range)
  return ip_cidr_range_.GetNoArena();
}
inline void UsableSubnetworkSecondaryRange::set_ip_cidr_range(const ::std::string& value) {
  
  ip_cidr_range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UsableSubnetworkSecondaryRange.ip_cidr_range)
}
#if LANG_CXX11
inline void UsableSubnetworkSecondaryRange::set_ip_cidr_range(::std::string&& value) {
  
  ip_cidr_range_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UsableSubnetworkSecondaryRange.ip_cidr_range)
}
#endif
inline void UsableSubnetworkSecondaryRange::set_ip_cidr_range(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_cidr_range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UsableSubnetworkSecondaryRange.ip_cidr_range)
}
inline void UsableSubnetworkSecondaryRange::set_ip_cidr_range(const char* value, size_t size) {
  
  ip_cidr_range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UsableSubnetworkSecondaryRange.ip_cidr_range)
}
inline ::std::string* UsableSubnetworkSecondaryRange::mutable_ip_cidr_range() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UsableSubnetworkSecondaryRange.ip_cidr_range)
  return ip_cidr_range_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UsableSubnetworkSecondaryRange::release_ip_cidr_range() {
  // @@protoc_insertion_point(field_release:google.container.v1.UsableSubnetworkSecondaryRange.ip_cidr_range)
  
  return ip_cidr_range_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UsableSubnetworkSecondaryRange::set_allocated_ip_cidr_range(::std::string* ip_cidr_range) {
  if (ip_cidr_range != nullptr) {
    
  } else {
    
  }
  ip_cidr_range_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_cidr_range);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UsableSubnetworkSecondaryRange.ip_cidr_range)
}

// .google.container.v1.UsableSubnetworkSecondaryRange.Status status = 3;
inline void UsableSubnetworkSecondaryRange::clear_status() {
  status_ = 0;
}
inline ::google::container::v1::UsableSubnetworkSecondaryRange_Status UsableSubnetworkSecondaryRange::status() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UsableSubnetworkSecondaryRange.status)
  return static_cast< ::google::container::v1::UsableSubnetworkSecondaryRange_Status >(status_);
}
inline void UsableSubnetworkSecondaryRange::set_status(::google::container::v1::UsableSubnetworkSecondaryRange_Status value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.UsableSubnetworkSecondaryRange.status)
}

// -------------------------------------------------------------------

// UsableSubnetwork

// string subnetwork = 1;
inline void UsableSubnetwork::clear_subnetwork() {
  subnetwork_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UsableSubnetwork::subnetwork() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UsableSubnetwork.subnetwork)
  return subnetwork_.GetNoArena();
}
inline void UsableSubnetwork::set_subnetwork(const ::std::string& value) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UsableSubnetwork.subnetwork)
}
#if LANG_CXX11
inline void UsableSubnetwork::set_subnetwork(::std::string&& value) {
  
  subnetwork_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UsableSubnetwork.subnetwork)
}
#endif
inline void UsableSubnetwork::set_subnetwork(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UsableSubnetwork.subnetwork)
}
inline void UsableSubnetwork::set_subnetwork(const char* value, size_t size) {
  
  subnetwork_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UsableSubnetwork.subnetwork)
}
inline ::std::string* UsableSubnetwork::mutable_subnetwork() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UsableSubnetwork.subnetwork)
  return subnetwork_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UsableSubnetwork::release_subnetwork() {
  // @@protoc_insertion_point(field_release:google.container.v1.UsableSubnetwork.subnetwork)
  
  return subnetwork_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UsableSubnetwork::set_allocated_subnetwork(::std::string* subnetwork) {
  if (subnetwork != nullptr) {
    
  } else {
    
  }
  subnetwork_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), subnetwork);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UsableSubnetwork.subnetwork)
}

// string network = 2;
inline void UsableSubnetwork::clear_network() {
  network_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UsableSubnetwork::network() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UsableSubnetwork.network)
  return network_.GetNoArena();
}
inline void UsableSubnetwork::set_network(const ::std::string& value) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UsableSubnetwork.network)
}
#if LANG_CXX11
inline void UsableSubnetwork::set_network(::std::string&& value) {
  
  network_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UsableSubnetwork.network)
}
#endif
inline void UsableSubnetwork::set_network(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UsableSubnetwork.network)
}
inline void UsableSubnetwork::set_network(const char* value, size_t size) {
  
  network_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UsableSubnetwork.network)
}
inline ::std::string* UsableSubnetwork::mutable_network() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UsableSubnetwork.network)
  return network_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UsableSubnetwork::release_network() {
  // @@protoc_insertion_point(field_release:google.container.v1.UsableSubnetwork.network)
  
  return network_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UsableSubnetwork::set_allocated_network(::std::string* network) {
  if (network != nullptr) {
    
  } else {
    
  }
  network_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), network);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UsableSubnetwork.network)
}

// string ip_cidr_range = 3;
inline void UsableSubnetwork::clear_ip_cidr_range() {
  ip_cidr_range_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UsableSubnetwork::ip_cidr_range() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UsableSubnetwork.ip_cidr_range)
  return ip_cidr_range_.GetNoArena();
}
inline void UsableSubnetwork::set_ip_cidr_range(const ::std::string& value) {
  
  ip_cidr_range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UsableSubnetwork.ip_cidr_range)
}
#if LANG_CXX11
inline void UsableSubnetwork::set_ip_cidr_range(::std::string&& value) {
  
  ip_cidr_range_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UsableSubnetwork.ip_cidr_range)
}
#endif
inline void UsableSubnetwork::set_ip_cidr_range(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_cidr_range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UsableSubnetwork.ip_cidr_range)
}
inline void UsableSubnetwork::set_ip_cidr_range(const char* value, size_t size) {
  
  ip_cidr_range_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UsableSubnetwork.ip_cidr_range)
}
inline ::std::string* UsableSubnetwork::mutable_ip_cidr_range() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UsableSubnetwork.ip_cidr_range)
  return ip_cidr_range_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UsableSubnetwork::release_ip_cidr_range() {
  // @@protoc_insertion_point(field_release:google.container.v1.UsableSubnetwork.ip_cidr_range)
  
  return ip_cidr_range_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UsableSubnetwork::set_allocated_ip_cidr_range(::std::string* ip_cidr_range) {
  if (ip_cidr_range != nullptr) {
    
  } else {
    
  }
  ip_cidr_range_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_cidr_range);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UsableSubnetwork.ip_cidr_range)
}

// repeated .google.container.v1.UsableSubnetworkSecondaryRange secondary_ip_ranges = 4;
inline int UsableSubnetwork::secondary_ip_ranges_size() const {
  return secondary_ip_ranges_.size();
}
inline void UsableSubnetwork::clear_secondary_ip_ranges() {
  secondary_ip_ranges_.Clear();
}
inline ::google::container::v1::UsableSubnetworkSecondaryRange* UsableSubnetwork::mutable_secondary_ip_ranges(int index) {
  // @@protoc_insertion_point(field_mutable:google.container.v1.UsableSubnetwork.secondary_ip_ranges)
  return secondary_ip_ranges_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetworkSecondaryRange >*
UsableSubnetwork::mutable_secondary_ip_ranges() {
  // @@protoc_insertion_point(field_mutable_list:google.container.v1.UsableSubnetwork.secondary_ip_ranges)
  return &secondary_ip_ranges_;
}
inline const ::google::container::v1::UsableSubnetworkSecondaryRange& UsableSubnetwork::secondary_ip_ranges(int index) const {
  // @@protoc_insertion_point(field_get:google.container.v1.UsableSubnetwork.secondary_ip_ranges)
  return secondary_ip_ranges_.Get(index);
}
inline ::google::container::v1::UsableSubnetworkSecondaryRange* UsableSubnetwork::add_secondary_ip_ranges() {
  // @@protoc_insertion_point(field_add:google.container.v1.UsableSubnetwork.secondary_ip_ranges)
  return secondary_ip_ranges_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::container::v1::UsableSubnetworkSecondaryRange >&
UsableSubnetwork::secondary_ip_ranges() const {
  // @@protoc_insertion_point(field_list:google.container.v1.UsableSubnetwork.secondary_ip_ranges)
  return secondary_ip_ranges_;
}

// string status_message = 5;
inline void UsableSubnetwork::clear_status_message() {
  status_message_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& UsableSubnetwork::status_message() const {
  // @@protoc_insertion_point(field_get:google.container.v1.UsableSubnetwork.status_message)
  return status_message_.GetNoArena();
}
inline void UsableSubnetwork::set_status_message(const ::std::string& value) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.UsableSubnetwork.status_message)
}
#if LANG_CXX11
inline void UsableSubnetwork::set_status_message(::std::string&& value) {
  
  status_message_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.UsableSubnetwork.status_message)
}
#endif
inline void UsableSubnetwork::set_status_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.UsableSubnetwork.status_message)
}
inline void UsableSubnetwork::set_status_message(const char* value, size_t size) {
  
  status_message_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.UsableSubnetwork.status_message)
}
inline ::std::string* UsableSubnetwork::mutable_status_message() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.UsableSubnetwork.status_message)
  return status_message_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UsableSubnetwork::release_status_message() {
  // @@protoc_insertion_point(field_release:google.container.v1.UsableSubnetwork.status_message)
  
  return status_message_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UsableSubnetwork::set_allocated_status_message(::std::string* status_message) {
  if (status_message != nullptr) {
    
  } else {
    
  }
  status_message_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status_message);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.UsableSubnetwork.status_message)
}

// -------------------------------------------------------------------

// ResourceUsageExportConfig_BigQueryDestination

// string dataset_id = 1;
inline void ResourceUsageExportConfig_BigQueryDestination::clear_dataset_id() {
  dataset_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ResourceUsageExportConfig_BigQueryDestination::dataset_id() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ResourceUsageExportConfig.BigQueryDestination.dataset_id)
  return dataset_id_.GetNoArena();
}
inline void ResourceUsageExportConfig_BigQueryDestination::set_dataset_id(const ::std::string& value) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.container.v1.ResourceUsageExportConfig.BigQueryDestination.dataset_id)
}
#if LANG_CXX11
inline void ResourceUsageExportConfig_BigQueryDestination::set_dataset_id(::std::string&& value) {
  
  dataset_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.container.v1.ResourceUsageExportConfig.BigQueryDestination.dataset_id)
}
#endif
inline void ResourceUsageExportConfig_BigQueryDestination::set_dataset_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.container.v1.ResourceUsageExportConfig.BigQueryDestination.dataset_id)
}
inline void ResourceUsageExportConfig_BigQueryDestination::set_dataset_id(const char* value, size_t size) {
  
  dataset_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.container.v1.ResourceUsageExportConfig.BigQueryDestination.dataset_id)
}
inline ::std::string* ResourceUsageExportConfig_BigQueryDestination::mutable_dataset_id() {
  
  // @@protoc_insertion_point(field_mutable:google.container.v1.ResourceUsageExportConfig.BigQueryDestination.dataset_id)
  return dataset_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ResourceUsageExportConfig_BigQueryDestination::release_dataset_id() {
  // @@protoc_insertion_point(field_release:google.container.v1.ResourceUsageExportConfig.BigQueryDestination.dataset_id)
  
  return dataset_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ResourceUsageExportConfig_BigQueryDestination::set_allocated_dataset_id(::std::string* dataset_id) {
  if (dataset_id != nullptr) {
    
  } else {
    
  }
  dataset_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), dataset_id);
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ResourceUsageExportConfig.BigQueryDestination.dataset_id)
}

// -------------------------------------------------------------------

// ResourceUsageExportConfig_ConsumptionMeteringConfig

// bool enabled = 1;
inline void ResourceUsageExportConfig_ConsumptionMeteringConfig::clear_enabled() {
  enabled_ = false;
}
inline bool ResourceUsageExportConfig_ConsumptionMeteringConfig::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ResourceUsageExportConfig.ConsumptionMeteringConfig.enabled)
  return enabled_;
}
inline void ResourceUsageExportConfig_ConsumptionMeteringConfig::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ResourceUsageExportConfig.ConsumptionMeteringConfig.enabled)
}

// -------------------------------------------------------------------

// ResourceUsageExportConfig

// .google.container.v1.ResourceUsageExportConfig.BigQueryDestination bigquery_destination = 1;
inline bool ResourceUsageExportConfig::has_bigquery_destination() const {
  return this != internal_default_instance() && bigquery_destination_ != nullptr;
}
inline void ResourceUsageExportConfig::clear_bigquery_destination() {
  if (GetArenaNoVirtual() == nullptr && bigquery_destination_ != nullptr) {
    delete bigquery_destination_;
  }
  bigquery_destination_ = nullptr;
}
inline const ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination& ResourceUsageExportConfig::bigquery_destination() const {
  const ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* p = bigquery_destination_;
  // @@protoc_insertion_point(field_get:google.container.v1.ResourceUsageExportConfig.bigquery_destination)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination*>(
      &::google::container::v1::_ResourceUsageExportConfig_BigQueryDestination_default_instance_);
}
inline ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* ResourceUsageExportConfig::release_bigquery_destination() {
  // @@protoc_insertion_point(field_release:google.container.v1.ResourceUsageExportConfig.bigquery_destination)
  
  ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* temp = bigquery_destination_;
  bigquery_destination_ = nullptr;
  return temp;
}
inline ::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* ResourceUsageExportConfig::mutable_bigquery_destination() {
  
  if (bigquery_destination_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ResourceUsageExportConfig_BigQueryDestination>(GetArenaNoVirtual());
    bigquery_destination_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ResourceUsageExportConfig.bigquery_destination)
  return bigquery_destination_;
}
inline void ResourceUsageExportConfig::set_allocated_bigquery_destination(::google::container::v1::ResourceUsageExportConfig_BigQueryDestination* bigquery_destination) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete bigquery_destination_;
  }
  if (bigquery_destination) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bigquery_destination = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, bigquery_destination, submessage_arena);
    }
    
  } else {
    
  }
  bigquery_destination_ = bigquery_destination;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ResourceUsageExportConfig.bigquery_destination)
}

// bool enable_network_egress_metering = 2;
inline void ResourceUsageExportConfig::clear_enable_network_egress_metering() {
  enable_network_egress_metering_ = false;
}
inline bool ResourceUsageExportConfig::enable_network_egress_metering() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ResourceUsageExportConfig.enable_network_egress_metering)
  return enable_network_egress_metering_;
}
inline void ResourceUsageExportConfig::set_enable_network_egress_metering(bool value) {
  
  enable_network_egress_metering_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ResourceUsageExportConfig.enable_network_egress_metering)
}

// .google.container.v1.ResourceUsageExportConfig.ConsumptionMeteringConfig consumption_metering_config = 3;
inline bool ResourceUsageExportConfig::has_consumption_metering_config() const {
  return this != internal_default_instance() && consumption_metering_config_ != nullptr;
}
inline void ResourceUsageExportConfig::clear_consumption_metering_config() {
  if (GetArenaNoVirtual() == nullptr && consumption_metering_config_ != nullptr) {
    delete consumption_metering_config_;
  }
  consumption_metering_config_ = nullptr;
}
inline const ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig& ResourceUsageExportConfig::consumption_metering_config() const {
  const ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* p = consumption_metering_config_;
  // @@protoc_insertion_point(field_get:google.container.v1.ResourceUsageExportConfig.consumption_metering_config)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig*>(
      &::google::container::v1::_ResourceUsageExportConfig_ConsumptionMeteringConfig_default_instance_);
}
inline ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* ResourceUsageExportConfig::release_consumption_metering_config() {
  // @@protoc_insertion_point(field_release:google.container.v1.ResourceUsageExportConfig.consumption_metering_config)
  
  ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* temp = consumption_metering_config_;
  consumption_metering_config_ = nullptr;
  return temp;
}
inline ::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* ResourceUsageExportConfig::mutable_consumption_metering_config() {
  
  if (consumption_metering_config_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig>(GetArenaNoVirtual());
    consumption_metering_config_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.container.v1.ResourceUsageExportConfig.consumption_metering_config)
  return consumption_metering_config_;
}
inline void ResourceUsageExportConfig::set_allocated_consumption_metering_config(::google::container::v1::ResourceUsageExportConfig_ConsumptionMeteringConfig* consumption_metering_config) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete consumption_metering_config_;
  }
  if (consumption_metering_config) {
    ::google::protobuf::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      consumption_metering_config = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, consumption_metering_config, submessage_arena);
    }
    
  } else {
    
  }
  consumption_metering_config_ = consumption_metering_config;
  // @@protoc_insertion_point(field_set_allocated:google.container.v1.ResourceUsageExportConfig.consumption_metering_config)
}

// -------------------------------------------------------------------

// VerticalPodAutoscaling

// bool enabled = 1;
inline void VerticalPodAutoscaling::clear_enabled() {
  enabled_ = false;
}
inline bool VerticalPodAutoscaling::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.VerticalPodAutoscaling.enabled)
  return enabled_;
}
inline void VerticalPodAutoscaling::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.VerticalPodAutoscaling.enabled)
}

// -------------------------------------------------------------------

// DefaultSnatStatus

// bool disabled = 1;
inline void DefaultSnatStatus::clear_disabled() {
  disabled_ = false;
}
inline bool DefaultSnatStatus::disabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.DefaultSnatStatus.disabled)
  return disabled_;
}
inline void DefaultSnatStatus::set_disabled(bool value) {
  
  disabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.DefaultSnatStatus.disabled)
}

// -------------------------------------------------------------------

// ShieldedNodes

// bool enabled = 1;
inline void ShieldedNodes::clear_enabled() {
  enabled_ = false;
}
inline bool ShieldedNodes::enabled() const {
  // @@protoc_insertion_point(field_get:google.container.v1.ShieldedNodes.enabled)
  return enabled_;
}
inline void ShieldedNodes::set_enabled(bool value) {
  
  enabled_ = value;
  // @@protoc_insertion_point(field_set:google.container.v1.ShieldedNodes.enabled)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1
}  // namespace container
}  // namespace google

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::google::container::v1::SandboxConfig_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::SandboxConfig_Type>() {
  return ::google::container::v1::SandboxConfig_Type_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::ReservationAffinity_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::ReservationAffinity_Type>() {
  return ::google::container::v1::ReservationAffinity_Type_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::NodeTaint_Effect> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::NodeTaint_Effect>() {
  return ::google::container::v1::NodeTaint_Effect_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::CloudRunConfig_LoadBalancerType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::CloudRunConfig_LoadBalancerType>() {
  return ::google::container::v1::CloudRunConfig_LoadBalancerType_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::NetworkPolicy_Provider> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::NetworkPolicy_Provider>() {
  return ::google::container::v1::NetworkPolicy_Provider_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::Cluster_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::Cluster_Status>() {
  return ::google::container::v1::Cluster_Status_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::Operation_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::Operation_Status>() {
  return ::google::container::v1::Operation_Status_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::Operation_Type> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::Operation_Type>() {
  return ::google::container::v1::Operation_Type_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::SetMasterAuthRequest_Action> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::SetMasterAuthRequest_Action>() {
  return ::google::container::v1::SetMasterAuthRequest_Action_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::NodePool_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::NodePool_Status>() {
  return ::google::container::v1::NodePool_Status_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::WorkloadMetadataConfig_Mode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::WorkloadMetadataConfig_Mode>() {
  return ::google::container::v1::WorkloadMetadataConfig_Mode_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::StatusCondition_Code> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::StatusCondition_Code>() {
  return ::google::container::v1::StatusCondition_Code_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::ReleaseChannel_Channel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::ReleaseChannel_Channel>() {
  return ::google::container::v1::ReleaseChannel_Channel_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::DatabaseEncryption_State> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::DatabaseEncryption_State>() {
  return ::google::container::v1::DatabaseEncryption_State_descriptor();
}
template <> struct is_proto_enum< ::google::container::v1::UsableSubnetworkSecondaryRange_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::google::container::v1::UsableSubnetworkSecondaryRange_Status>() {
  return ::google::container::v1::UsableSubnetworkSecondaryRange_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto
