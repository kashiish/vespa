// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/container/v1/cluster_service.proto

#include "google/container/v1/cluster_service.pb.h"
#include "google/container/v1/cluster_service.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace google {
namespace container {
namespace v1 {

static const char* ClusterManager_method_names[] = {
  "/google.container.v1.ClusterManager/ListClusters",
  "/google.container.v1.ClusterManager/GetCluster",
  "/google.container.v1.ClusterManager/CreateCluster",
  "/google.container.v1.ClusterManager/UpdateCluster",
  "/google.container.v1.ClusterManager/UpdateNodePool",
  "/google.container.v1.ClusterManager/SetNodePoolAutoscaling",
  "/google.container.v1.ClusterManager/SetLoggingService",
  "/google.container.v1.ClusterManager/SetMonitoringService",
  "/google.container.v1.ClusterManager/SetAddonsConfig",
  "/google.container.v1.ClusterManager/SetLocations",
  "/google.container.v1.ClusterManager/UpdateMaster",
  "/google.container.v1.ClusterManager/SetMasterAuth",
  "/google.container.v1.ClusterManager/DeleteCluster",
  "/google.container.v1.ClusterManager/ListOperations",
  "/google.container.v1.ClusterManager/GetOperation",
  "/google.container.v1.ClusterManager/CancelOperation",
  "/google.container.v1.ClusterManager/GetServerConfig",
  "/google.container.v1.ClusterManager/GetJSONWebKeys",
  "/google.container.v1.ClusterManager/ListNodePools",
  "/google.container.v1.ClusterManager/GetNodePool",
  "/google.container.v1.ClusterManager/CreateNodePool",
  "/google.container.v1.ClusterManager/DeleteNodePool",
  "/google.container.v1.ClusterManager/RollbackNodePoolUpgrade",
  "/google.container.v1.ClusterManager/SetNodePoolManagement",
  "/google.container.v1.ClusterManager/SetLabels",
  "/google.container.v1.ClusterManager/SetLegacyAbac",
  "/google.container.v1.ClusterManager/StartIPRotation",
  "/google.container.v1.ClusterManager/CompleteIPRotation",
  "/google.container.v1.ClusterManager/SetNodePoolSize",
  "/google.container.v1.ClusterManager/SetNetworkPolicy",
  "/google.container.v1.ClusterManager/SetMaintenancePolicy",
  "/google.container.v1.ClusterManager/ListUsableSubnetworks",
};

std::unique_ptr< ClusterManager::Stub> ClusterManager::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< ClusterManager::Stub> stub(new ClusterManager::Stub(channel, options));
  return stub;
}

ClusterManager::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_ListClusters_(ClusterManager_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetCluster_(ClusterManager_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateCluster_(ClusterManager_method_names[2], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateCluster_(ClusterManager_method_names[3], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateNodePool_(ClusterManager_method_names[4], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNodePoolAutoscaling_(ClusterManager_method_names[5], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLoggingService_(ClusterManager_method_names[6], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMonitoringService_(ClusterManager_method_names[7], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetAddonsConfig_(ClusterManager_method_names[8], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLocations_(ClusterManager_method_names[9], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_UpdateMaster_(ClusterManager_method_names[10], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMasterAuth_(ClusterManager_method_names[11], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteCluster_(ClusterManager_method_names[12], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListOperations_(ClusterManager_method_names[13], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetOperation_(ClusterManager_method_names[14], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CancelOperation_(ClusterManager_method_names[15], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetServerConfig_(ClusterManager_method_names[16], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetJSONWebKeys_(ClusterManager_method_names[17], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListNodePools_(ClusterManager_method_names[18], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetNodePool_(ClusterManager_method_names[19], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CreateNodePool_(ClusterManager_method_names[20], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_DeleteNodePool_(ClusterManager_method_names[21], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_RollbackNodePoolUpgrade_(ClusterManager_method_names[22], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNodePoolManagement_(ClusterManager_method_names[23], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLabels_(ClusterManager_method_names[24], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetLegacyAbac_(ClusterManager_method_names[25], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StartIPRotation_(ClusterManager_method_names[26], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_CompleteIPRotation_(ClusterManager_method_names[27], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNodePoolSize_(ClusterManager_method_names[28], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetNetworkPolicy_(ClusterManager_method_names[29], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SetMaintenancePolicy_(ClusterManager_method_names[30], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ListUsableSubnetworks_(ClusterManager_method_names[31], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status ClusterManager::Stub::ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::google::container::v1::ListClustersResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListClusters_, context, request, response);
}

void ClusterManager::Stub::async::ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListClusters_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListClusters_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>* ClusterManager::Stub::PrepareAsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::ListClustersResponse, ::google::container::v1::ListClustersRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListClusters_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>* ClusterManager::Stub::AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListClustersRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::google::container::v1::Cluster* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetCluster_, context, request, response);
}

void ClusterManager::Stub::async::GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCluster_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetCluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>* ClusterManager::Stub::PrepareAsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Cluster, ::google::container::v1::GetClusterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetCluster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>* ClusterManager::Stub::AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetClusterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateCluster_, context, request, response);
}

void ClusterManager::Stub::async::CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCluster_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateCluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::CreateClusterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateCluster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateClusterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateCluster_, context, request, response);
}

void ClusterManager::Stub::async::UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCluster_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateCluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::UpdateClusterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateCluster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateClusterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::UpdateNodePoolRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateNodePool_, context, request, response);
}

void ClusterManager::Stub::async::UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::UpdateNodePoolRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNodePool_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateNodePool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncUpdateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::UpdateNodePoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateNodePool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncUpdateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateNodePoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetNodePoolAutoscalingRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNodePoolAutoscaling_, context, request, response);
}

void ClusterManager::Stub::async::SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetNodePoolAutoscalingRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNodePoolAutoscaling_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNodePoolAutoscaling_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetNodePoolAutoscalingRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetNodePoolAutoscalingRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNodePoolAutoscaling_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetNodePoolAutoscalingRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNodePoolAutoscalingRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetLoggingServiceRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLoggingService_, context, request, response);
}

void ClusterManager::Stub::async::SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetLoggingServiceRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLoggingService_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLoggingService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetLoggingServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetLoggingServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLoggingService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetLoggingServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLoggingServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetMonitoringServiceRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMonitoringService_, context, request, response);
}

void ClusterManager::Stub::async::SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetMonitoringServiceRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMonitoringService_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMonitoringService_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetMonitoringServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetMonitoringServiceRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMonitoringService_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetMonitoringServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMonitoringServiceRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetAddonsConfigRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetAddonsConfig_, context, request, response);
}

void ClusterManager::Stub::async::SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetAddonsConfigRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAddonsConfig_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetAddonsConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetAddonsConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetAddonsConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetAddonsConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetAddonsConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetAddonsConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetLocationsRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLocations_, context, request, response);
}

void ClusterManager::Stub::async::SetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetLocationsRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLocations_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLocations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetLocationsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetLocationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLocations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetLocationsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLocationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::UpdateMasterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_UpdateMaster_, context, request, response);
}

void ClusterManager::Stub::async::UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::UpdateMasterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMaster_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_UpdateMaster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncUpdateMasterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::UpdateMasterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_UpdateMaster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncUpdateMasterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncUpdateMasterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetMasterAuthRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMasterAuth_, context, request, response);
}

void ClusterManager::Stub::async::SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetMasterAuthRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMasterAuth_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMasterAuth_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetMasterAuthRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetMasterAuthRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMasterAuth_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetMasterAuthRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMasterAuthRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteCluster_, context, request, response);
}

void ClusterManager::Stub::async::DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCluster_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteCluster_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::DeleteClusterRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteCluster_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteClusterRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::google::container::v1::ListOperationsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListOperations_, context, request, response);
}

void ClusterManager::Stub::async::ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOperations_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListOperations_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>* ClusterManager::Stub::PrepareAsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::ListOperationsResponse, ::google::container::v1::ListOperationsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListOperations_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>* ClusterManager::Stub::AsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListOperationsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetOperation_, context, request, response);
}

void ClusterManager::Stub::async::GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOperation_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::GetOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::google::protobuf::Empty* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::CancelOperationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CancelOperation_, context, request, response);
}

void ClusterManager::Stub::async::CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::CancelOperationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOperation_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CancelOperation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ClusterManager::Stub::PrepareAsyncCancelOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::protobuf::Empty, ::google::container::v1::CancelOperationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CancelOperation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* ClusterManager::Stub::AsyncCancelOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCancelOperationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::google::container::v1::ServerConfig* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetServerConfig_, context, request, response);
}

void ClusterManager::Stub::async::GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerConfig_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetServerConfig_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>* ClusterManager::Stub::PrepareAsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::ServerConfig, ::google::container::v1::GetServerConfigRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetServerConfig_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>* ClusterManager::Stub::AsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetServerConfigRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::GetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::google::container::v1::GetJSONWebKeysResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::GetJSONWebKeysRequest, ::google::container::v1::GetJSONWebKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetJSONWebKeys_, context, request, response);
}

void ClusterManager::Stub::async::GetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest* request, ::google::container::v1::GetJSONWebKeysResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::GetJSONWebKeysRequest, ::google::container::v1::GetJSONWebKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJSONWebKeys_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::GetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest* request, ::google::container::v1::GetJSONWebKeysResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetJSONWebKeys_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::GetJSONWebKeysResponse>* ClusterManager::Stub::PrepareAsyncGetJSONWebKeysRaw(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::GetJSONWebKeysResponse, ::google::container::v1::GetJSONWebKeysRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetJSONWebKeys_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::GetJSONWebKeysResponse>* ClusterManager::Stub::AsyncGetJSONWebKeysRaw(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetJSONWebKeysRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::google::container::v1::ListNodePoolsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::ListNodePoolsRequest, ::google::container::v1::ListNodePoolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListNodePools_, context, request, response);
}

void ClusterManager::Stub::async::ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::ListNodePoolsRequest, ::google::container::v1::ListNodePoolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNodePools_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListNodePools_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>* ClusterManager::Stub::PrepareAsyncListNodePoolsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::ListNodePoolsResponse, ::google::container::v1::ListNodePoolsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListNodePools_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>* ClusterManager::Stub::AsyncListNodePoolsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListNodePoolsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::google::container::v1::NodePool* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::GetNodePoolRequest, ::google::container::v1::NodePool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetNodePool_, context, request, response);
}

void ClusterManager::Stub::async::GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::GetNodePoolRequest, ::google::container::v1::NodePool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodePool_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetNodePool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>* ClusterManager::Stub::PrepareAsyncGetNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::NodePool, ::google::container::v1::GetNodePoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetNodePool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>* ClusterManager::Stub::AsyncGetNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetNodePoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::CreateNodePoolRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CreateNodePool_, context, request, response);
}

void ClusterManager::Stub::async::CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::CreateNodePoolRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNodePool_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CreateNodePool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncCreateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::CreateNodePoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CreateNodePool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncCreateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCreateNodePoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::DeleteNodePoolRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_DeleteNodePool_, context, request, response);
}

void ClusterManager::Stub::async::DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::DeleteNodePoolRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNodePool_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_DeleteNodePool_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncDeleteNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::DeleteNodePoolRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_DeleteNodePool_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncDeleteNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncDeleteNodePoolRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::RollbackNodePoolUpgradeRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_RollbackNodePoolUpgrade_, context, request, response);
}

void ClusterManager::Stub::async::RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::RollbackNodePoolUpgradeRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollbackNodePoolUpgrade_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_RollbackNodePoolUpgrade_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncRollbackNodePoolUpgradeRaw(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::RollbackNodePoolUpgradeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_RollbackNodePoolUpgrade_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncRollbackNodePoolUpgradeRaw(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncRollbackNodePoolUpgradeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetNodePoolManagementRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNodePoolManagement_, context, request, response);
}

void ClusterManager::Stub::async::SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetNodePoolManagementRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNodePoolManagement_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNodePoolManagement_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetNodePoolManagementRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetNodePoolManagementRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNodePoolManagement_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetNodePoolManagementRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNodePoolManagementRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetLabelsRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLabels_, context, request, response);
}

void ClusterManager::Stub::async::SetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetLabelsRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLabels_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLabels_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetLabelsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetLabelsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLabels_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetLabelsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLabelsRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetLegacyAbacRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetLegacyAbac_, context, request, response);
}

void ClusterManager::Stub::async::SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetLegacyAbacRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLegacyAbac_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetLegacyAbac_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetLegacyAbacRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetLegacyAbacRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetLegacyAbac_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetLegacyAbacRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetLegacyAbacRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::StartIPRotationRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_StartIPRotation_, context, request, response);
}

void ClusterManager::Stub::async::StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::StartIPRotationRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartIPRotation_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_StartIPRotation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncStartIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::StartIPRotationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_StartIPRotation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncStartIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncStartIPRotationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::CompleteIPRotationRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_CompleteIPRotation_, context, request, response);
}

void ClusterManager::Stub::async::CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::CompleteIPRotationRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteIPRotation_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_CompleteIPRotation_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncCompleteIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::CompleteIPRotationRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_CompleteIPRotation_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncCompleteIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncCompleteIPRotationRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetNodePoolSizeRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNodePoolSize_, context, request, response);
}

void ClusterManager::Stub::async::SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetNodePoolSizeRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNodePoolSize_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNodePoolSize_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetNodePoolSizeRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetNodePoolSizeRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNodePoolSize_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetNodePoolSizeRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNodePoolSizeRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetNetworkPolicyRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetNetworkPolicy_, context, request, response);
}

void ClusterManager::Stub::async::SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetNetworkPolicyRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNetworkPolicy_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetNetworkPolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetNetworkPolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetNetworkPolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetNetworkPolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetNetworkPolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetNetworkPolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::google::container::v1::Operation* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::SetMaintenancePolicyRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_SetMaintenancePolicy_, context, request, response);
}

void ClusterManager::Stub::async::SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::SetMaintenancePolicyRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaintenancePolicy_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_SetMaintenancePolicy_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::PrepareAsyncSetMaintenancePolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::Operation, ::google::container::v1::SetMaintenancePolicyRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_SetMaintenancePolicy_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* ClusterManager::Stub::AsyncSetMaintenancePolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncSetMaintenancePolicyRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status ClusterManager::Stub::ListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::google::container::v1::ListUsableSubnetworksResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::google::container::v1::ListUsableSubnetworksRequest, ::google::container::v1::ListUsableSubnetworksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_ListUsableSubnetworks_, context, request, response);
}

void ClusterManager::Stub::async::ListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest* request, ::google::container::v1::ListUsableSubnetworksResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::google::container::v1::ListUsableSubnetworksRequest, ::google::container::v1::ListUsableSubnetworksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListUsableSubnetworks_, context, request, response, std::move(f));
}

void ClusterManager::Stub::async::ListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest* request, ::google::container::v1::ListUsableSubnetworksResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_ListUsableSubnetworks_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListUsableSubnetworksResponse>* ClusterManager::Stub::PrepareAsyncListUsableSubnetworksRaw(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::google::container::v1::ListUsableSubnetworksResponse, ::google::container::v1::ListUsableSubnetworksRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_ListUsableSubnetworks_, context, request);
}

::grpc::ClientAsyncResponseReader< ::google::container::v1::ListUsableSubnetworksResponse>* ClusterManager::Stub::AsyncListUsableSubnetworksRaw(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncListUsableSubnetworksRaw(context, request, cq);
  result->StartCall();
  return result;
}

ClusterManager::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::ListClustersRequest* req,
             ::google::container::v1::ListClustersResponse* resp) {
               return service->ListClusters(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::GetClusterRequest* req,
             ::google::container::v1::Cluster* resp) {
               return service->GetCluster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[2],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::CreateClusterRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->CreateCluster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[3],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::UpdateClusterRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->UpdateCluster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[4],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::UpdateNodePoolRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::UpdateNodePoolRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->UpdateNodePool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[5],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetNodePoolAutoscalingRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetNodePoolAutoscalingRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetNodePoolAutoscaling(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[6],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetLoggingServiceRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetLoggingServiceRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetLoggingService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[7],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetMonitoringServiceRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetMonitoringServiceRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetMonitoringService(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[8],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetAddonsConfigRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetAddonsConfigRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetAddonsConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[9],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetLocationsRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetLocationsRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetLocations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[10],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::UpdateMasterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::UpdateMasterRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->UpdateMaster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[11],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetMasterAuthRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetMasterAuthRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetMasterAuth(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[12],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::DeleteClusterRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->DeleteCluster(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[13],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::ListOperationsRequest* req,
             ::google::container::v1::ListOperationsResponse* resp) {
               return service->ListOperations(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[14],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::GetOperationRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->GetOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[15],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::CancelOperationRequest, ::google::protobuf::Empty, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::CancelOperationRequest* req,
             ::google::protobuf::Empty* resp) {
               return service->CancelOperation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[16],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::GetServerConfigRequest* req,
             ::google::container::v1::ServerConfig* resp) {
               return service->GetServerConfig(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[17],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::GetJSONWebKeysRequest, ::google::container::v1::GetJSONWebKeysResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::GetJSONWebKeysRequest* req,
             ::google::container::v1::GetJSONWebKeysResponse* resp) {
               return service->GetJSONWebKeys(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[18],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::ListNodePoolsRequest, ::google::container::v1::ListNodePoolsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::ListNodePoolsRequest* req,
             ::google::container::v1::ListNodePoolsResponse* resp) {
               return service->ListNodePools(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[19],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::GetNodePoolRequest, ::google::container::v1::NodePool, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::GetNodePoolRequest* req,
             ::google::container::v1::NodePool* resp) {
               return service->GetNodePool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[20],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::CreateNodePoolRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::CreateNodePoolRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->CreateNodePool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[21],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::DeleteNodePoolRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::DeleteNodePoolRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->DeleteNodePool(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[22],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::RollbackNodePoolUpgradeRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::RollbackNodePoolUpgradeRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->RollbackNodePoolUpgrade(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[23],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetNodePoolManagementRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetNodePoolManagementRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetNodePoolManagement(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[24],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetLabelsRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetLabelsRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetLabels(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[25],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetLegacyAbacRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetLegacyAbacRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetLegacyAbac(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[26],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::StartIPRotationRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::StartIPRotationRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->StartIPRotation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[27],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::CompleteIPRotationRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::CompleteIPRotationRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->CompleteIPRotation(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[28],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetNodePoolSizeRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetNodePoolSizeRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetNodePoolSize(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[29],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetNetworkPolicyRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetNetworkPolicyRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetNetworkPolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[30],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::SetMaintenancePolicyRequest, ::google::container::v1::Operation, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::SetMaintenancePolicyRequest* req,
             ::google::container::v1::Operation* resp) {
               return service->SetMaintenancePolicy(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      ClusterManager_method_names[31],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< ClusterManager::Service, ::google::container::v1::ListUsableSubnetworksRequest, ::google::container::v1::ListUsableSubnetworksResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](ClusterManager::Service* service,
             ::grpc::ServerContext* ctx,
             const ::google::container::v1::ListUsableSubnetworksRequest* req,
             ::google::container::v1::ListUsableSubnetworksResponse* resp) {
               return service->ListUsableSubnetworks(ctx, req, resp);
             }, this)));
}

ClusterManager::Service::~Service() {
}

::grpc::Status ClusterManager::Service::ListClusters(::grpc::ServerContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetCluster(::grpc::ServerContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CreateCluster(::grpc::ServerContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::UpdateCluster(::grpc::ServerContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::UpdateNodePool(::grpc::ServerContext* context, const ::google::container::v1::UpdateNodePoolRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetNodePoolAutoscaling(::grpc::ServerContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetLoggingService(::grpc::ServerContext* context, const ::google::container::v1::SetLoggingServiceRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetMonitoringService(::grpc::ServerContext* context, const ::google::container::v1::SetMonitoringServiceRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetAddonsConfig(::grpc::ServerContext* context, const ::google::container::v1::SetAddonsConfigRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetLocations(::grpc::ServerContext* context, const ::google::container::v1::SetLocationsRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::UpdateMaster(::grpc::ServerContext* context, const ::google::container::v1::UpdateMasterRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetMasterAuth(::grpc::ServerContext* context, const ::google::container::v1::SetMasterAuthRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::DeleteCluster(::grpc::ServerContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::ListOperations(::grpc::ServerContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetOperation(::grpc::ServerContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CancelOperation(::grpc::ServerContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetServerConfig(::grpc::ServerContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetJSONWebKeys(::grpc::ServerContext* context, const ::google::container::v1::GetJSONWebKeysRequest* request, ::google::container::v1::GetJSONWebKeysResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::ListNodePools(::grpc::ServerContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::GetNodePool(::grpc::ServerContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CreateNodePool(::grpc::ServerContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::DeleteNodePool(::grpc::ServerContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::RollbackNodePoolUpgrade(::grpc::ServerContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetNodePoolManagement(::grpc::ServerContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetLabels(::grpc::ServerContext* context, const ::google::container::v1::SetLabelsRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetLegacyAbac(::grpc::ServerContext* context, const ::google::container::v1::SetLegacyAbacRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::StartIPRotation(::grpc::ServerContext* context, const ::google::container::v1::StartIPRotationRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::CompleteIPRotation(::grpc::ServerContext* context, const ::google::container::v1::CompleteIPRotationRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetNodePoolSize(::grpc::ServerContext* context, const ::google::container::v1::SetNodePoolSizeRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetNetworkPolicy(::grpc::ServerContext* context, const ::google::container::v1::SetNetworkPolicyRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::SetMaintenancePolicy(::grpc::ServerContext* context, const ::google::container::v1::SetMaintenancePolicyRequest* request, ::google::container::v1::Operation* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status ClusterManager::Service::ListUsableSubnetworks(::grpc::ServerContext* context, const ::google::container::v1::ListUsableSubnetworksRequest* request, ::google::container::v1::ListUsableSubnetworksResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace google
}  // namespace container
}  // namespace v1

