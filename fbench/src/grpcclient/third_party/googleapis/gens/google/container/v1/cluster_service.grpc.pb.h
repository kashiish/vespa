// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: google/container/v1/cluster_service.proto
// Original file comments:
// Copyright 2021 Google LLC
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
#ifndef GRPC_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED
#define GRPC_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED

#include "google/container/v1/cluster_service.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/client_context.h>
#include <grpcpp/impl/codegen/completion_queue.h>
#include <grpcpp/impl/codegen/message_allocator.h>
#include <grpcpp/impl/codegen/method_handler.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/server_callback_handlers.h>
#include <grpcpp/impl/codegen/server_context.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace google {
namespace container {
namespace v1 {

// Google Kubernetes Engine Cluster Manager v1
class ClusterManager final {
 public:
  static constexpr char const* service_full_name() {
    return "google.container.v1.ClusterManager";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Lists all clusters owned by a project in either the specified zone or all
    // zones.
    virtual ::grpc::Status ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::google::container::v1::ListClustersResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListClustersResponse>> AsyncListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListClustersResponse>>(AsyncListClustersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListClustersResponse>> PrepareAsyncListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListClustersResponse>>(PrepareAsyncListClustersRaw(context, request, cq));
    }
    // Gets the details of a specific cluster.
    virtual ::grpc::Status GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::google::container::v1::Cluster* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Cluster>> AsyncGetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Cluster>>(AsyncGetClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Cluster>> PrepareAsyncGetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Cluster>>(PrepareAsyncGetClusterRaw(context, request, cq));
    }
    // Creates a cluster, consisting of the specified number and type of Google
    // Compute Engine instances.
    //
    // By default, the cluster is created in the project's
    // [default
    // network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks).
    //
    // One firewall is added for the cluster. After cluster creation,
    // the Kubelet creates routes for each node to allow the containers
    // on that node to communicate with all other instances in the
    // cluster.
    //
    // Finally, an entry is added to the project's global metadata indicating
    // which CIDR range the cluster is using.
    virtual ::grpc::Status CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncCreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncCreateClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncCreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncCreateClusterRaw(context, request, cq));
    }
    // Updates the settings of a specific cluster.
    virtual ::grpc::Status UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncUpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncUpdateClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncUpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncUpdateClusterRaw(context, request, cq));
    }
    // Updates the version and/or image type for the specified node pool.
    virtual ::grpc::Status UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncUpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncUpdateNodePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncUpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncUpdateNodePoolRaw(context, request, cq));
    }
    // Sets the autoscaling settings for the specified node pool.
    virtual ::grpc::Status SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetNodePoolAutoscalingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetNodePoolAutoscalingRaw(context, request, cq));
    }
    // Sets the logging service for a specific cluster.
    virtual ::grpc::Status SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetLoggingServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetLoggingServiceRaw(context, request, cq));
    }
    // Sets the monitoring service for a specific cluster.
    virtual ::grpc::Status SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetMonitoringServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetMonitoringServiceRaw(context, request, cq));
    }
    // Sets the addons for a specific cluster.
    virtual ::grpc::Status SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetAddonsConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetAddonsConfigRaw(context, request, cq));
    }
    // Sets the locations for a specific cluster.
    // Deprecated. Use
    // [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update)
    // instead.
    virtual ::grpc::Status SetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetLocationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetLocationsRaw(context, request, cq));
    }
    // Updates the master for a specific cluster.
    virtual ::grpc::Status UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncUpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncUpdateMasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncUpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncUpdateMasterRaw(context, request, cq));
    }
    // Sets master auth materials. Currently supports changing the admin password
    // or a specific cluster, either via password generation or explicitly setting
    // the password.
    virtual ::grpc::Status SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetMasterAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetMasterAuthRaw(context, request, cq));
    }
    // Deletes the cluster, including the Kubernetes endpoint and all worker
    // nodes.
    //
    // Firewalls and routes that were configured during cluster creation
    // are also deleted.
    //
    // Other Google Compute Engine resources that might be in use by the cluster,
    // such as load balancer resources, are not deleted if they weren't present
    // when the cluster was initially created.
    virtual ::grpc::Status DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncDeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncDeleteClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncDeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncDeleteClusterRaw(context, request, cq));
    }
    // Lists all operations in a project in a specific zone or all zones.
    virtual ::grpc::Status ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::google::container::v1::ListOperationsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListOperationsResponse>> AsyncListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListOperationsResponse>>(AsyncListOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListOperationsResponse>> PrepareAsyncListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListOperationsResponse>>(PrepareAsyncListOperationsRaw(context, request, cq));
    }
    // Gets the specified operation.
    virtual ::grpc::Status GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncGetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncGetOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncGetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncGetOperationRaw(context, request, cq));
    }
    // Cancels the specified operation.
    virtual ::grpc::Status CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::google::protobuf::Empty* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> AsyncCancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(AsyncCancelOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>> PrepareAsyncCancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>>(PrepareAsyncCancelOperationRaw(context, request, cq));
    }
    // Returns configuration info about the Google Kubernetes Engine service.
    virtual ::grpc::Status GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::google::container::v1::ServerConfig* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ServerConfig>> AsyncGetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ServerConfig>>(AsyncGetServerConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ServerConfig>> PrepareAsyncGetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ServerConfig>>(PrepareAsyncGetServerConfigRaw(context, request, cq));
    }
    // Gets the public component of the cluster signing keys in
    // JSON Web Key format.
    // This API is not yet intended for general use, and is not available for all
    // clusters.
    virtual ::grpc::Status GetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::google::container::v1::GetJSONWebKeysResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::GetJSONWebKeysResponse>> AsyncGetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::GetJSONWebKeysResponse>>(AsyncGetJSONWebKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::GetJSONWebKeysResponse>> PrepareAsyncGetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::GetJSONWebKeysResponse>>(PrepareAsyncGetJSONWebKeysRaw(context, request, cq));
    }
    // Lists the node pools for a cluster.
    virtual ::grpc::Status ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::google::container::v1::ListNodePoolsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListNodePoolsResponse>> AsyncListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListNodePoolsResponse>>(AsyncListNodePoolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListNodePoolsResponse>> PrepareAsyncListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListNodePoolsResponse>>(PrepareAsyncListNodePoolsRaw(context, request, cq));
    }
    // Retrieves the requested node pool.
    virtual ::grpc::Status GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::google::container::v1::NodePool* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::NodePool>> AsyncGetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::NodePool>>(AsyncGetNodePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::NodePool>> PrepareAsyncGetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::NodePool>>(PrepareAsyncGetNodePoolRaw(context, request, cq));
    }
    // Creates a node pool for a cluster.
    virtual ::grpc::Status CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncCreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncCreateNodePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncCreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncCreateNodePoolRaw(context, request, cq));
    }
    // Deletes a node pool from a cluster.
    virtual ::grpc::Status DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncDeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncDeleteNodePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncDeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncDeleteNodePoolRaw(context, request, cq));
    }
    // Rolls back a previously Aborted or Failed NodePool upgrade.
    // This makes no changes if the last upgrade successfully completed.
    virtual ::grpc::Status RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncRollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncRollbackNodePoolUpgradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncRollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncRollbackNodePoolUpgradeRaw(context, request, cq));
    }
    // Sets the NodeManagement options for a node pool.
    virtual ::grpc::Status SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetNodePoolManagementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetNodePoolManagementRaw(context, request, cq));
    }
    // Sets labels on a cluster.
    virtual ::grpc::Status SetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetLabelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetLabelsRaw(context, request, cq));
    }
    // Enables or disables the ABAC authorization mechanism on a cluster.
    virtual ::grpc::Status SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetLegacyAbacRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetLegacyAbacRaw(context, request, cq));
    }
    // Starts master IP rotation.
    virtual ::grpc::Status StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncStartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncStartIPRotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncStartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncStartIPRotationRaw(context, request, cq));
    }
    // Completes master IP rotation.
    virtual ::grpc::Status CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncCompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncCompleteIPRotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncCompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncCompleteIPRotationRaw(context, request, cq));
    }
    // Sets the size for a specific node pool.
    virtual ::grpc::Status SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetNodePoolSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetNodePoolSizeRaw(context, request, cq));
    }
    // Enables or disables Network Policy for a cluster.
    virtual ::grpc::Status SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetNetworkPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetNetworkPolicyRaw(context, request, cq));
    }
    // Sets the maintenance policy for a cluster.
    virtual ::grpc::Status SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::google::container::v1::Operation* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> AsyncSetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(AsyncSetMaintenancePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>> PrepareAsyncSetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>>(PrepareAsyncSetMaintenancePolicyRaw(context, request, cq));
    }
    // Lists subnetworks that are usable for creating clusters in a project.
    virtual ::grpc::Status ListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::google::container::v1::ListUsableSubnetworksResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListUsableSubnetworksResponse>> AsyncListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListUsableSubnetworksResponse>>(AsyncListUsableSubnetworksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListUsableSubnetworksResponse>> PrepareAsyncListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListUsableSubnetworksResponse>>(PrepareAsyncListUsableSubnetworksRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // Lists all clusters owned by a project in either the specified zone or all
      // zones.
      virtual void ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the details of a specific cluster.
      virtual void GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a cluster, consisting of the specified number and type of Google
      // Compute Engine instances.
      //
      // By default, the cluster is created in the project's
      // [default
      // network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks).
      //
      // One firewall is added for the cluster. After cluster creation,
      // the Kubelet creates routes for each node to allow the containers
      // on that node to communicate with all other instances in the
      // cluster.
      //
      // Finally, an entry is added to the project's global metadata indicating
      // which CIDR range the cluster is using.
      virtual void CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates the settings of a specific cluster.
      virtual void UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates the version and/or image type for the specified node pool.
      virtual void UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the autoscaling settings for the specified node pool.
      virtual void SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the logging service for a specific cluster.
      virtual void SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the monitoring service for a specific cluster.
      virtual void SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the addons for a specific cluster.
      virtual void SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the locations for a specific cluster.
      // Deprecated. Use
      // [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update)
      // instead.
      virtual void SetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Updates the master for a specific cluster.
      virtual void UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets master auth materials. Currently supports changing the admin password
      // or a specific cluster, either via password generation or explicitly setting
      // the password.
      virtual void SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes the cluster, including the Kubernetes endpoint and all worker
      // nodes.
      //
      // Firewalls and routes that were configured during cluster creation
      // are also deleted.
      //
      // Other Google Compute Engine resources that might be in use by the cluster,
      // such as load balancer resources, are not deleted if they weren't present
      // when the cluster was initially created.
      virtual void DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists all operations in a project in a specific zone or all zones.
      virtual void ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the specified operation.
      virtual void GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Cancels the specified operation.
      virtual void CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Returns configuration info about the Google Kubernetes Engine service.
      virtual void GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Gets the public component of the cluster signing keys in
      // JSON Web Key format.
      // This API is not yet intended for general use, and is not available for all
      // clusters.
      virtual void GetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest* request, ::google::container::v1::GetJSONWebKeysResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest* request, ::google::container::v1::GetJSONWebKeysResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists the node pools for a cluster.
      virtual void ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Retrieves the requested node pool.
      virtual void GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Creates a node pool for a cluster.
      virtual void CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Deletes a node pool from a cluster.
      virtual void DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Rolls back a previously Aborted or Failed NodePool upgrade.
      // This makes no changes if the last upgrade successfully completed.
      virtual void RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the NodeManagement options for a node pool.
      virtual void SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets labels on a cluster.
      virtual void SetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Enables or disables the ABAC authorization mechanism on a cluster.
      virtual void SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Starts master IP rotation.
      virtual void StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Completes master IP rotation.
      virtual void CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the size for a specific node pool.
      virtual void SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Enables or disables Network Policy for a cluster.
      virtual void SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Sets the maintenance policy for a cluster.
      virtual void SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) = 0;
      virtual void SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // Lists subnetworks that are usable for creating clusters in a project.
      virtual void ListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest* request, ::google::container::v1::ListUsableSubnetworksResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void ListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest* request, ::google::container::v1::ListUsableSubnetworksResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListClustersResponse>* AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListClustersResponse>* PrepareAsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Cluster>* AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Cluster>* PrepareAsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncUpdateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncUpdateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetNodePoolAutoscalingRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetNodePoolAutoscalingRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetLoggingServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetLoggingServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetMonitoringServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetMonitoringServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetAddonsConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetAddonsConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetLocationsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetLocationsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncUpdateMasterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncUpdateMasterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetMasterAuthRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetMasterAuthRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListOperationsResponse>* AsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListOperationsResponse>* PrepareAsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* AsyncCancelOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::protobuf::Empty>* PrepareAsyncCancelOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ServerConfig>* AsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ServerConfig>* PrepareAsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::GetJSONWebKeysResponse>* AsyncGetJSONWebKeysRaw(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::GetJSONWebKeysResponse>* PrepareAsyncGetJSONWebKeysRaw(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListNodePoolsResponse>* AsyncListNodePoolsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListNodePoolsResponse>* PrepareAsyncListNodePoolsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::NodePool>* AsyncGetNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::NodePool>* PrepareAsyncGetNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncCreateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncCreateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncDeleteNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncDeleteNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncRollbackNodePoolUpgradeRaw(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncRollbackNodePoolUpgradeRaw(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetNodePoolManagementRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetNodePoolManagementRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetLabelsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetLabelsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetLegacyAbacRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetLegacyAbacRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncStartIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncStartIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncCompleteIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncCompleteIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetNodePoolSizeRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetNodePoolSizeRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetNetworkPolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetNetworkPolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* AsyncSetMaintenancePolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::Operation>* PrepareAsyncSetMaintenancePolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListUsableSubnetworksResponse>* AsyncListUsableSubnetworksRaw(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::google::container::v1::ListUsableSubnetworksResponse>* PrepareAsyncListUsableSubnetworksRaw(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::google::container::v1::ListClustersResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>> AsyncListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>>(AsyncListClustersRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>> PrepareAsyncListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>>(PrepareAsyncListClustersRaw(context, request, cq));
    }
    ::grpc::Status GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::google::container::v1::Cluster* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>> AsyncGetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>>(AsyncGetClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>> PrepareAsyncGetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>>(PrepareAsyncGetClusterRaw(context, request, cq));
    }
    ::grpc::Status CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncCreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncCreateClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncCreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncCreateClusterRaw(context, request, cq));
    }
    ::grpc::Status UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncUpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncUpdateClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncUpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncUpdateClusterRaw(context, request, cq));
    }
    ::grpc::Status UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncUpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncUpdateNodePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncUpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncUpdateNodePoolRaw(context, request, cq));
    }
    ::grpc::Status SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetNodePoolAutoscalingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetNodePoolAutoscalingRaw(context, request, cq));
    }
    ::grpc::Status SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetLoggingServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetLoggingServiceRaw(context, request, cq));
    }
    ::grpc::Status SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetMonitoringServiceRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetMonitoringServiceRaw(context, request, cq));
    }
    ::grpc::Status SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetAddonsConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetAddonsConfigRaw(context, request, cq));
    }
    ::grpc::Status SetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetLocationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetLocationsRaw(context, request, cq));
    }
    ::grpc::Status UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncUpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncUpdateMasterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncUpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncUpdateMasterRaw(context, request, cq));
    }
    ::grpc::Status SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetMasterAuthRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetMasterAuthRaw(context, request, cq));
    }
    ::grpc::Status DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncDeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncDeleteClusterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncDeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncDeleteClusterRaw(context, request, cq));
    }
    ::grpc::Status ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::google::container::v1::ListOperationsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>> AsyncListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>>(AsyncListOperationsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>> PrepareAsyncListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>>(PrepareAsyncListOperationsRaw(context, request, cq));
    }
    ::grpc::Status GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncGetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncGetOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncGetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncGetOperationRaw(context, request, cq));
    }
    ::grpc::Status CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::google::protobuf::Empty* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> AsyncCancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(AsyncCancelOperationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>> PrepareAsyncCancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>>(PrepareAsyncCancelOperationRaw(context, request, cq));
    }
    ::grpc::Status GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::google::container::v1::ServerConfig* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>> AsyncGetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>>(AsyncGetServerConfigRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>> PrepareAsyncGetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>>(PrepareAsyncGetServerConfigRaw(context, request, cq));
    }
    ::grpc::Status GetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::google::container::v1::GetJSONWebKeysResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::GetJSONWebKeysResponse>> AsyncGetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::GetJSONWebKeysResponse>>(AsyncGetJSONWebKeysRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::GetJSONWebKeysResponse>> PrepareAsyncGetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::GetJSONWebKeysResponse>>(PrepareAsyncGetJSONWebKeysRaw(context, request, cq));
    }
    ::grpc::Status ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::google::container::v1::ListNodePoolsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>> AsyncListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>>(AsyncListNodePoolsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>> PrepareAsyncListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>>(PrepareAsyncListNodePoolsRaw(context, request, cq));
    }
    ::grpc::Status GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::google::container::v1::NodePool* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>> AsyncGetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>>(AsyncGetNodePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>> PrepareAsyncGetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>>(PrepareAsyncGetNodePoolRaw(context, request, cq));
    }
    ::grpc::Status CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncCreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncCreateNodePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncCreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncCreateNodePoolRaw(context, request, cq));
    }
    ::grpc::Status DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncDeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncDeleteNodePoolRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncDeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncDeleteNodePoolRaw(context, request, cq));
    }
    ::grpc::Status RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncRollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncRollbackNodePoolUpgradeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncRollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncRollbackNodePoolUpgradeRaw(context, request, cq));
    }
    ::grpc::Status SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetNodePoolManagementRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetNodePoolManagementRaw(context, request, cq));
    }
    ::grpc::Status SetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetLabelsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetLabelsRaw(context, request, cq));
    }
    ::grpc::Status SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetLegacyAbacRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetLegacyAbacRaw(context, request, cq));
    }
    ::grpc::Status StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncStartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncStartIPRotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncStartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncStartIPRotationRaw(context, request, cq));
    }
    ::grpc::Status CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncCompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncCompleteIPRotationRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncCompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncCompleteIPRotationRaw(context, request, cq));
    }
    ::grpc::Status SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetNodePoolSizeRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetNodePoolSizeRaw(context, request, cq));
    }
    ::grpc::Status SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetNetworkPolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetNetworkPolicyRaw(context, request, cq));
    }
    ::grpc::Status SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::google::container::v1::Operation* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> AsyncSetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(AsyncSetMaintenancePolicyRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>> PrepareAsyncSetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>>(PrepareAsyncSetMaintenancePolicyRaw(context, request, cq));
    }
    ::grpc::Status ListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::google::container::v1::ListUsableSubnetworksResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListUsableSubnetworksResponse>> AsyncListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListUsableSubnetworksResponse>>(AsyncListUsableSubnetworksRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListUsableSubnetworksResponse>> PrepareAsyncListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListUsableSubnetworksResponse>>(PrepareAsyncListUsableSubnetworksRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response, std::function<void(::grpc::Status)>) override;
      void ListClusters(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response, std::function<void(::grpc::Status)>) override;
      void GetCluster(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void CreateCluster(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void UpdateCluster(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void UpdateNodePool(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetNodePoolAutoscaling(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetLoggingService(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetMonitoringService(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetAddonsConfig(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetLocations(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void UpdateMaster(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetMasterAuth(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void DeleteCluster(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListOperations(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void GetOperation(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response, std::function<void(::grpc::Status)>) override;
      void CancelOperation(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response, std::function<void(::grpc::Status)>) override;
      void GetServerConfig(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest* request, ::google::container::v1::GetJSONWebKeysResponse* response, std::function<void(::grpc::Status)>) override;
      void GetJSONWebKeys(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest* request, ::google::container::v1::GetJSONWebKeysResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response, std::function<void(::grpc::Status)>) override;
      void ListNodePools(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response, std::function<void(::grpc::Status)>) override;
      void GetNodePool(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void CreateNodePool(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void DeleteNodePool(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void RollbackNodePoolUpgrade(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetNodePoolManagement(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetLabels(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetLegacyAbac(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void StartIPRotation(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void CompleteIPRotation(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetNodePoolSize(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetNetworkPolicy(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest* request, ::google::container::v1::Operation* response, std::function<void(::grpc::Status)>) override;
      void SetMaintenancePolicy(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest* request, ::google::container::v1::Operation* response, ::grpc::ClientUnaryReactor* reactor) override;
      void ListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest* request, ::google::container::v1::ListUsableSubnetworksResponse* response, std::function<void(::grpc::Status)>) override;
      void ListUsableSubnetworks(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest* request, ::google::container::v1::ListUsableSubnetworksResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>* AsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListClustersResponse>* PrepareAsyncListClustersRaw(::grpc::ClientContext* context, const ::google::container::v1::ListClustersRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>* AsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Cluster>* PrepareAsyncGetClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::GetClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncCreateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncUpdateClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncUpdateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncUpdateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateNodePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetNodePoolAutoscalingRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetNodePoolAutoscalingRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetLoggingServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetLoggingServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLoggingServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetMonitoringServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetMonitoringServiceRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMonitoringServiceRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetAddonsConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetAddonsConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::SetAddonsConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetLocationsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetLocationsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLocationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncUpdateMasterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncUpdateMasterRaw(::grpc::ClientContext* context, const ::google::container::v1::UpdateMasterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetMasterAuthRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetMasterAuthRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMasterAuthRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncDeleteClusterRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteClusterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>* AsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListOperationsResponse>* PrepareAsyncListOperationsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListOperationsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncGetOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::GetOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* AsyncCancelOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::protobuf::Empty>* PrepareAsyncCancelOperationRaw(::grpc::ClientContext* context, const ::google::container::v1::CancelOperationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>* AsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ServerConfig>* PrepareAsyncGetServerConfigRaw(::grpc::ClientContext* context, const ::google::container::v1::GetServerConfigRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::GetJSONWebKeysResponse>* AsyncGetJSONWebKeysRaw(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::GetJSONWebKeysResponse>* PrepareAsyncGetJSONWebKeysRaw(::grpc::ClientContext* context, const ::google::container::v1::GetJSONWebKeysRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>* AsyncListNodePoolsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListNodePoolsResponse>* PrepareAsyncListNodePoolsRaw(::grpc::ClientContext* context, const ::google::container::v1::ListNodePoolsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>* AsyncGetNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::NodePool>* PrepareAsyncGetNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::GetNodePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncCreateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncCreateNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::CreateNodePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncDeleteNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncDeleteNodePoolRaw(::grpc::ClientContext* context, const ::google::container::v1::DeleteNodePoolRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncRollbackNodePoolUpgradeRaw(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncRollbackNodePoolUpgradeRaw(::grpc::ClientContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetNodePoolManagementRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetNodePoolManagementRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolManagementRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetLabelsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetLabelsRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLabelsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetLegacyAbacRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetLegacyAbacRaw(::grpc::ClientContext* context, const ::google::container::v1::SetLegacyAbacRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncStartIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncStartIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::StartIPRotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncCompleteIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncCompleteIPRotationRaw(::grpc::ClientContext* context, const ::google::container::v1::CompleteIPRotationRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetNodePoolSizeRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetNodePoolSizeRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNodePoolSizeRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetNetworkPolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetNetworkPolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetNetworkPolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* AsyncSetMaintenancePolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::Operation>* PrepareAsyncSetMaintenancePolicyRaw(::grpc::ClientContext* context, const ::google::container::v1::SetMaintenancePolicyRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListUsableSubnetworksResponse>* AsyncListUsableSubnetworksRaw(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::google::container::v1::ListUsableSubnetworksResponse>* PrepareAsyncListUsableSubnetworksRaw(::grpc::ClientContext* context, const ::google::container::v1::ListUsableSubnetworksRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_ListClusters_;
    const ::grpc::internal::RpcMethod rpcmethod_GetCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateNodePool_;
    const ::grpc::internal::RpcMethod rpcmethod_SetNodePoolAutoscaling_;
    const ::grpc::internal::RpcMethod rpcmethod_SetLoggingService_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMonitoringService_;
    const ::grpc::internal::RpcMethod rpcmethod_SetAddonsConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_SetLocations_;
    const ::grpc::internal::RpcMethod rpcmethod_UpdateMaster_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMasterAuth_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteCluster_;
    const ::grpc::internal::RpcMethod rpcmethod_ListOperations_;
    const ::grpc::internal::RpcMethod rpcmethod_GetOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_CancelOperation_;
    const ::grpc::internal::RpcMethod rpcmethod_GetServerConfig_;
    const ::grpc::internal::RpcMethod rpcmethod_GetJSONWebKeys_;
    const ::grpc::internal::RpcMethod rpcmethod_ListNodePools_;
    const ::grpc::internal::RpcMethod rpcmethod_GetNodePool_;
    const ::grpc::internal::RpcMethod rpcmethod_CreateNodePool_;
    const ::grpc::internal::RpcMethod rpcmethod_DeleteNodePool_;
    const ::grpc::internal::RpcMethod rpcmethod_RollbackNodePoolUpgrade_;
    const ::grpc::internal::RpcMethod rpcmethod_SetNodePoolManagement_;
    const ::grpc::internal::RpcMethod rpcmethod_SetLabels_;
    const ::grpc::internal::RpcMethod rpcmethod_SetLegacyAbac_;
    const ::grpc::internal::RpcMethod rpcmethod_StartIPRotation_;
    const ::grpc::internal::RpcMethod rpcmethod_CompleteIPRotation_;
    const ::grpc::internal::RpcMethod rpcmethod_SetNodePoolSize_;
    const ::grpc::internal::RpcMethod rpcmethod_SetNetworkPolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_SetMaintenancePolicy_;
    const ::grpc::internal::RpcMethod rpcmethod_ListUsableSubnetworks_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Lists all clusters owned by a project in either the specified zone or all
    // zones.
    virtual ::grpc::Status ListClusters(::grpc::ServerContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response);
    // Gets the details of a specific cluster.
    virtual ::grpc::Status GetCluster(::grpc::ServerContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response);
    // Creates a cluster, consisting of the specified number and type of Google
    // Compute Engine instances.
    //
    // By default, the cluster is created in the project's
    // [default
    // network](https://cloud.google.com/compute/docs/networks-and-firewalls#networks).
    //
    // One firewall is added for the cluster. After cluster creation,
    // the Kubelet creates routes for each node to allow the containers
    // on that node to communicate with all other instances in the
    // cluster.
    //
    // Finally, an entry is added to the project's global metadata indicating
    // which CIDR range the cluster is using.
    virtual ::grpc::Status CreateCluster(::grpc::ServerContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response);
    // Updates the settings of a specific cluster.
    virtual ::grpc::Status UpdateCluster(::grpc::ServerContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response);
    // Updates the version and/or image type for the specified node pool.
    virtual ::grpc::Status UpdateNodePool(::grpc::ServerContext* context, const ::google::container::v1::UpdateNodePoolRequest* request, ::google::container::v1::Operation* response);
    // Sets the autoscaling settings for the specified node pool.
    virtual ::grpc::Status SetNodePoolAutoscaling(::grpc::ServerContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::google::container::v1::Operation* response);
    // Sets the logging service for a specific cluster.
    virtual ::grpc::Status SetLoggingService(::grpc::ServerContext* context, const ::google::container::v1::SetLoggingServiceRequest* request, ::google::container::v1::Operation* response);
    // Sets the monitoring service for a specific cluster.
    virtual ::grpc::Status SetMonitoringService(::grpc::ServerContext* context, const ::google::container::v1::SetMonitoringServiceRequest* request, ::google::container::v1::Operation* response);
    // Sets the addons for a specific cluster.
    virtual ::grpc::Status SetAddonsConfig(::grpc::ServerContext* context, const ::google::container::v1::SetAddonsConfigRequest* request, ::google::container::v1::Operation* response);
    // Sets the locations for a specific cluster.
    // Deprecated. Use
    // [projects.locations.clusters.update](https://cloud.google.com/kubernetes-engine/docs/reference/rest/v1/projects.locations.clusters/update)
    // instead.
    virtual ::grpc::Status SetLocations(::grpc::ServerContext* context, const ::google::container::v1::SetLocationsRequest* request, ::google::container::v1::Operation* response);
    // Updates the master for a specific cluster.
    virtual ::grpc::Status UpdateMaster(::grpc::ServerContext* context, const ::google::container::v1::UpdateMasterRequest* request, ::google::container::v1::Operation* response);
    // Sets master auth materials. Currently supports changing the admin password
    // or a specific cluster, either via password generation or explicitly setting
    // the password.
    virtual ::grpc::Status SetMasterAuth(::grpc::ServerContext* context, const ::google::container::v1::SetMasterAuthRequest* request, ::google::container::v1::Operation* response);
    // Deletes the cluster, including the Kubernetes endpoint and all worker
    // nodes.
    //
    // Firewalls and routes that were configured during cluster creation
    // are also deleted.
    //
    // Other Google Compute Engine resources that might be in use by the cluster,
    // such as load balancer resources, are not deleted if they weren't present
    // when the cluster was initially created.
    virtual ::grpc::Status DeleteCluster(::grpc::ServerContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response);
    // Lists all operations in a project in a specific zone or all zones.
    virtual ::grpc::Status ListOperations(::grpc::ServerContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response);
    // Gets the specified operation.
    virtual ::grpc::Status GetOperation(::grpc::ServerContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response);
    // Cancels the specified operation.
    virtual ::grpc::Status CancelOperation(::grpc::ServerContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response);
    // Returns configuration info about the Google Kubernetes Engine service.
    virtual ::grpc::Status GetServerConfig(::grpc::ServerContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response);
    // Gets the public component of the cluster signing keys in
    // JSON Web Key format.
    // This API is not yet intended for general use, and is not available for all
    // clusters.
    virtual ::grpc::Status GetJSONWebKeys(::grpc::ServerContext* context, const ::google::container::v1::GetJSONWebKeysRequest* request, ::google::container::v1::GetJSONWebKeysResponse* response);
    // Lists the node pools for a cluster.
    virtual ::grpc::Status ListNodePools(::grpc::ServerContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response);
    // Retrieves the requested node pool.
    virtual ::grpc::Status GetNodePool(::grpc::ServerContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response);
    // Creates a node pool for a cluster.
    virtual ::grpc::Status CreateNodePool(::grpc::ServerContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response);
    // Deletes a node pool from a cluster.
    virtual ::grpc::Status DeleteNodePool(::grpc::ServerContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response);
    // Rolls back a previously Aborted or Failed NodePool upgrade.
    // This makes no changes if the last upgrade successfully completed.
    virtual ::grpc::Status RollbackNodePoolUpgrade(::grpc::ServerContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response);
    // Sets the NodeManagement options for a node pool.
    virtual ::grpc::Status SetNodePoolManagement(::grpc::ServerContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response);
    // Sets labels on a cluster.
    virtual ::grpc::Status SetLabels(::grpc::ServerContext* context, const ::google::container::v1::SetLabelsRequest* request, ::google::container::v1::Operation* response);
    // Enables or disables the ABAC authorization mechanism on a cluster.
    virtual ::grpc::Status SetLegacyAbac(::grpc::ServerContext* context, const ::google::container::v1::SetLegacyAbacRequest* request, ::google::container::v1::Operation* response);
    // Starts master IP rotation.
    virtual ::grpc::Status StartIPRotation(::grpc::ServerContext* context, const ::google::container::v1::StartIPRotationRequest* request, ::google::container::v1::Operation* response);
    // Completes master IP rotation.
    virtual ::grpc::Status CompleteIPRotation(::grpc::ServerContext* context, const ::google::container::v1::CompleteIPRotationRequest* request, ::google::container::v1::Operation* response);
    // Sets the size for a specific node pool.
    virtual ::grpc::Status SetNodePoolSize(::grpc::ServerContext* context, const ::google::container::v1::SetNodePoolSizeRequest* request, ::google::container::v1::Operation* response);
    // Enables or disables Network Policy for a cluster.
    virtual ::grpc::Status SetNetworkPolicy(::grpc::ServerContext* context, const ::google::container::v1::SetNetworkPolicyRequest* request, ::google::container::v1::Operation* response);
    // Sets the maintenance policy for a cluster.
    virtual ::grpc::Status SetMaintenancePolicy(::grpc::ServerContext* context, const ::google::container::v1::SetMaintenancePolicyRequest* request, ::google::container::v1::Operation* response);
    // Lists subnetworks that are usable for creating clusters in a project.
    virtual ::grpc::Status ListUsableSubnetworks(::grpc::ServerContext* context, const ::google::container::v1::ListUsableSubnetworksRequest* request, ::google::container::v1::ListUsableSubnetworksResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListClusters() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListClustersRequest* /*request*/, ::google::container::v1::ListClustersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListClusters(::grpc::ServerContext* context, ::google::container::v1::ListClustersRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::ListClustersResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetCluster() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetClusterRequest* /*request*/, ::google::container::v1::Cluster* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCluster(::grpc::ServerContext* context, ::google::container::v1::GetClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Cluster>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateCluster() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCluster(::grpc::ServerContext* context, ::google::container::v1::CreateClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCluster(::grpc::ServerContext* context, ::google::container::v1::UpdateClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateNodePool() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_UpdateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNodePool(::grpc::ServerContext* context, ::google::container::v1::UpdateNodePoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNodePoolAutoscaling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetNodePoolAutoscaling() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SetNodePoolAutoscaling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolAutoscaling(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolAutoscalingRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodePoolAutoscaling(::grpc::ServerContext* context, ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLoggingService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLoggingService() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SetLoggingService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLoggingService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLoggingServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLoggingService(::grpc::ServerContext* context, ::google::container::v1::SetLoggingServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMonitoringService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMonitoringService() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SetMonitoringService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMonitoringService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMonitoringServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMonitoringService(::grpc::ServerContext* context, ::google::container::v1::SetMonitoringServiceRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetAddonsConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetAddonsConfig() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SetAddonsConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAddonsConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetAddonsConfigRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAddonsConfig(::grpc::ServerContext* context, ::google::container::v1::SetAddonsConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLocations() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SetLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocations(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLocationsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLocations(::grpc::ServerContext* context, ::google::container::v1::SetLocationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_UpdateMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_UpdateMaster() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_UpdateMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMaster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateMasterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMaster(::grpc::ServerContext* context, ::google::container::v1::UpdateMasterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMasterAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMasterAuth() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SetMasterAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterAuth(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMasterAuthRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMasterAuth(::grpc::ServerContext* context, ::google::container::v1::SetMasterAuthRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodAsync(12);
    }
    ~WithAsyncMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCluster(::grpc::ServerContext* context, ::google::container::v1::DeleteClusterRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListOperations() {
      ::grpc::Service::MarkMethodAsync(13);
    }
    ~WithAsyncMethod_ListOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOperations(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListOperationsRequest* /*request*/, ::google::container::v1::ListOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOperations(::grpc::ServerContext* context, ::google::container::v1::ListOperationsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::ListOperationsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetOperation() {
      ::grpc::Service::MarkMethodAsync(14);
    }
    ~WithAsyncMethod_GetOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetOperationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOperation(::grpc::ServerContext* context, ::google::container::v1::GetOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CancelOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CancelOperation() {
      ::grpc::Service::MarkMethodAsync(15);
    }
    ~WithAsyncMethod_CancelOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CancelOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOperation(::grpc::ServerContext* context, ::google::container::v1::CancelOperationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::protobuf::Empty>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetServerConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetServerConfig() {
      ::grpc::Service::MarkMethodAsync(16);
    }
    ~WithAsyncMethod_GetServerConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetServerConfigRequest* /*request*/, ::google::container::v1::ServerConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerConfig(::grpc::ServerContext* context, ::google::container::v1::GetServerConfigRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::ServerConfig>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetJSONWebKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetJSONWebKeys() {
      ::grpc::Service::MarkMethodAsync(17);
    }
    ~WithAsyncMethod_GetJSONWebKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJSONWebKeys(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetJSONWebKeysRequest* /*request*/, ::google::container::v1::GetJSONWebKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJSONWebKeys(::grpc::ServerContext* context, ::google::container::v1::GetJSONWebKeysRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::GetJSONWebKeysResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListNodePools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListNodePools() {
      ::grpc::Service::MarkMethodAsync(18);
    }
    ~WithAsyncMethod_ListNodePools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodePools(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListNodePoolsRequest* /*request*/, ::google::container::v1::ListNodePoolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNodePools(::grpc::ServerContext* context, ::google::container::v1::ListNodePoolsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::ListNodePoolsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetNodePool() {
      ::grpc::Service::MarkMethodAsync(19);
    }
    ~WithAsyncMethod_GetNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetNodePoolRequest* /*request*/, ::google::container::v1::NodePool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodePool(::grpc::ServerContext* context, ::google::container::v1::GetNodePoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::NodePool>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CreateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CreateNodePool() {
      ::grpc::Service::MarkMethodAsync(20);
    }
    ~WithAsyncMethod_CreateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNodePool(::grpc::ServerContext* context, ::google::container::v1::CreateNodePoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_DeleteNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_DeleteNodePool() {
      ::grpc::Service::MarkMethodAsync(21);
    }
    ~WithAsyncMethod_DeleteNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNodePool(::grpc::ServerContext* context, ::google::container::v1::DeleteNodePoolRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_RollbackNodePoolUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_RollbackNodePoolUpgrade() {
      ::grpc::Service::MarkMethodAsync(22);
    }
    ~WithAsyncMethod_RollbackNodePoolUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollbackNodePoolUpgrade(::grpc::ServerContext* /*context*/, const ::google::container::v1::RollbackNodePoolUpgradeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollbackNodePoolUpgrade(::grpc::ServerContext* context, ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNodePoolManagement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetNodePoolManagement() {
      ::grpc::Service::MarkMethodAsync(23);
    }
    ~WithAsyncMethod_SetNodePoolManagement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolManagement(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolManagementRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodePoolManagement(::grpc::ServerContext* context, ::google::container::v1::SetNodePoolManagementRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLabels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLabels() {
      ::grpc::Service::MarkMethodAsync(24);
    }
    ~WithAsyncMethod_SetLabels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLabels(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLabelsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLabels(::grpc::ServerContext* context, ::google::container::v1::SetLabelsRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetLegacyAbac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetLegacyAbac() {
      ::grpc::Service::MarkMethodAsync(25);
    }
    ~WithAsyncMethod_SetLegacyAbac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLegacyAbac(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLegacyAbacRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLegacyAbac(::grpc::ServerContext* context, ::google::container::v1::SetLegacyAbacRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StartIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_StartIPRotation() {
      ::grpc::Service::MarkMethodAsync(26);
    }
    ~WithAsyncMethod_StartIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::StartIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartIPRotation(::grpc::ServerContext* context, ::google::container::v1::StartIPRotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_CompleteIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_CompleteIPRotation() {
      ::grpc::Service::MarkMethodAsync(27);
    }
    ~WithAsyncMethod_CompleteIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CompleteIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteIPRotation(::grpc::ServerContext* context, ::google::container::v1::CompleteIPRotationRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNodePoolSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetNodePoolSize() {
      ::grpc::Service::MarkMethodAsync(28);
    }
    ~WithAsyncMethod_SetNodePoolSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolSize(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolSizeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodePoolSize(::grpc::ServerContext* context, ::google::container::v1::SetNodePoolSizeRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetNetworkPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetNetworkPolicy() {
      ::grpc::Service::MarkMethodAsync(29);
    }
    ~WithAsyncMethod_SetNetworkPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNetworkPolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNetworkPolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNetworkPolicy(::grpc::ServerContext* context, ::google::container::v1::SetNetworkPolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SetMaintenancePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_SetMaintenancePolicy() {
      ::grpc::Service::MarkMethodAsync(30);
    }
    ~WithAsyncMethod_SetMaintenancePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaintenancePolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMaintenancePolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaintenancePolicy(::grpc::ServerContext* context, ::google::container::v1::SetMaintenancePolicyRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::Operation>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_ListUsableSubnetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_ListUsableSubnetworks() {
      ::grpc::Service::MarkMethodAsync(31);
    }
    ~WithAsyncMethod_ListUsableSubnetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsableSubnetworks(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListUsableSubnetworksRequest* /*request*/, ::google::container::v1::ListUsableSubnetworksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUsableSubnetworks(::grpc::ServerContext* context, ::google::container::v1::ListUsableSubnetworksRequest* request, ::grpc::ServerAsyncResponseWriter< ::google::container::v1::ListUsableSubnetworksResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_ListClusters<WithAsyncMethod_GetCluster<WithAsyncMethod_CreateCluster<WithAsyncMethod_UpdateCluster<WithAsyncMethod_UpdateNodePool<WithAsyncMethod_SetNodePoolAutoscaling<WithAsyncMethod_SetLoggingService<WithAsyncMethod_SetMonitoringService<WithAsyncMethod_SetAddonsConfig<WithAsyncMethod_SetLocations<WithAsyncMethod_UpdateMaster<WithAsyncMethod_SetMasterAuth<WithAsyncMethod_DeleteCluster<WithAsyncMethod_ListOperations<WithAsyncMethod_GetOperation<WithAsyncMethod_CancelOperation<WithAsyncMethod_GetServerConfig<WithAsyncMethod_GetJSONWebKeys<WithAsyncMethod_ListNodePools<WithAsyncMethod_GetNodePool<WithAsyncMethod_CreateNodePool<WithAsyncMethod_DeleteNodePool<WithAsyncMethod_RollbackNodePoolUpgrade<WithAsyncMethod_SetNodePoolManagement<WithAsyncMethod_SetLabels<WithAsyncMethod_SetLegacyAbac<WithAsyncMethod_StartIPRotation<WithAsyncMethod_CompleteIPRotation<WithAsyncMethod_SetNodePoolSize<WithAsyncMethod_SetNetworkPolicy<WithAsyncMethod_SetMaintenancePolicy<WithAsyncMethod_ListUsableSubnetworks<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListClusters() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::ListClustersRequest* request, ::google::container::v1::ListClustersResponse* response) { return this->ListClusters(context, request, response); }));}
    void SetMessageAllocatorFor_ListClusters(
        ::grpc::MessageAllocator< ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListClustersRequest* /*request*/, ::google::container::v1::ListClustersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListClusters(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::ListClustersRequest* /*request*/, ::google::container::v1::ListClustersResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetCluster() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::GetClusterRequest* request, ::google::container::v1::Cluster* response) { return this->GetCluster(context, request, response); }));}
    void SetMessageAllocatorFor_GetCluster(
        ::grpc::MessageAllocator< ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetClusterRequest* /*request*/, ::google::container::v1::Cluster* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::GetClusterRequest* /*request*/, ::google::container::v1::Cluster* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateCluster() {
      ::grpc::Service::MarkMethodCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::CreateClusterRequest* request, ::google::container::v1::Operation* response) { return this->CreateCluster(context, request, response); }));}
    void SetMessageAllocatorFor_CreateCluster(
        ::grpc::MessageAllocator< ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(2);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::CreateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::UpdateClusterRequest* request, ::google::container::v1::Operation* response) { return this->UpdateCluster(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateCluster(
        ::grpc::MessageAllocator< ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(3);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::UpdateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateNodePool() {
      ::grpc::Service::MarkMethodCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::UpdateNodePoolRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::UpdateNodePoolRequest* request, ::google::container::v1::Operation* response) { return this->UpdateNodePool(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateNodePool(
        ::grpc::MessageAllocator< ::google::container::v1::UpdateNodePoolRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(4);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::UpdateNodePoolRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNodePool(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::UpdateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetNodePoolAutoscaling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetNodePoolAutoscaling() {
      ::grpc::Service::MarkMethodCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetNodePoolAutoscalingRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetNodePoolAutoscalingRequest* request, ::google::container::v1::Operation* response) { return this->SetNodePoolAutoscaling(context, request, response); }));}
    void SetMessageAllocatorFor_SetNodePoolAutoscaling(
        ::grpc::MessageAllocator< ::google::container::v1::SetNodePoolAutoscalingRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(5);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetNodePoolAutoscalingRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetNodePoolAutoscaling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolAutoscaling(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolAutoscalingRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetNodePoolAutoscaling(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetNodePoolAutoscalingRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetLoggingService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetLoggingService() {
      ::grpc::Service::MarkMethodCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetLoggingServiceRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetLoggingServiceRequest* request, ::google::container::v1::Operation* response) { return this->SetLoggingService(context, request, response); }));}
    void SetMessageAllocatorFor_SetLoggingService(
        ::grpc::MessageAllocator< ::google::container::v1::SetLoggingServiceRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(6);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetLoggingServiceRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetLoggingService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLoggingService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLoggingServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLoggingService(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetLoggingServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetMonitoringService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMonitoringService() {
      ::grpc::Service::MarkMethodCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetMonitoringServiceRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetMonitoringServiceRequest* request, ::google::container::v1::Operation* response) { return this->SetMonitoringService(context, request, response); }));}
    void SetMessageAllocatorFor_SetMonitoringService(
        ::grpc::MessageAllocator< ::google::container::v1::SetMonitoringServiceRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(7);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetMonitoringServiceRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMonitoringService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMonitoringService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMonitoringServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMonitoringService(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetMonitoringServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetAddonsConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetAddonsConfig() {
      ::grpc::Service::MarkMethodCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetAddonsConfigRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetAddonsConfigRequest* request, ::google::container::v1::Operation* response) { return this->SetAddonsConfig(context, request, response); }));}
    void SetMessageAllocatorFor_SetAddonsConfig(
        ::grpc::MessageAllocator< ::google::container::v1::SetAddonsConfigRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(8);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetAddonsConfigRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetAddonsConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAddonsConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetAddonsConfigRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAddonsConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetAddonsConfigRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetLocations() {
      ::grpc::Service::MarkMethodCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetLocationsRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetLocationsRequest* request, ::google::container::v1::Operation* response) { return this->SetLocations(context, request, response); }));}
    void SetMessageAllocatorFor_SetLocations(
        ::grpc::MessageAllocator< ::google::container::v1::SetLocationsRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(9);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetLocationsRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocations(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLocationsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLocations(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetLocationsRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_UpdateMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_UpdateMaster() {
      ::grpc::Service::MarkMethodCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::UpdateMasterRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::UpdateMasterRequest* request, ::google::container::v1::Operation* response) { return this->UpdateMaster(context, request, response); }));}
    void SetMessageAllocatorFor_UpdateMaster(
        ::grpc::MessageAllocator< ::google::container::v1::UpdateMasterRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(10);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::UpdateMasterRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_UpdateMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMaster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateMasterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMaster(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::UpdateMasterRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetMasterAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMasterAuth() {
      ::grpc::Service::MarkMethodCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetMasterAuthRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetMasterAuthRequest* request, ::google::container::v1::Operation* response) { return this->SetMasterAuth(context, request, response); }));}
    void SetMessageAllocatorFor_SetMasterAuth(
        ::grpc::MessageAllocator< ::google::container::v1::SetMasterAuthRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(11);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetMasterAuthRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMasterAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterAuth(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMasterAuthRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMasterAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetMasterAuthRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::DeleteClusterRequest* request, ::google::container::v1::Operation* response) { return this->DeleteCluster(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteCluster(
        ::grpc::MessageAllocator< ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(12);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::DeleteClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListOperations() {
      ::grpc::Service::MarkMethodCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::ListOperationsRequest* request, ::google::container::v1::ListOperationsResponse* response) { return this->ListOperations(context, request, response); }));}
    void SetMessageAllocatorFor_ListOperations(
        ::grpc::MessageAllocator< ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(13);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOperations(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListOperationsRequest* /*request*/, ::google::container::v1::ListOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::ListOperationsRequest* /*request*/, ::google::container::v1::ListOperationsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetOperation() {
      ::grpc::Service::MarkMethodCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::GetOperationRequest* request, ::google::container::v1::Operation* response) { return this->GetOperation(context, request, response); }));}
    void SetMessageAllocatorFor_GetOperation(
        ::grpc::MessageAllocator< ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(14);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetOperationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::GetOperationRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CancelOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CancelOperation() {
      ::grpc::Service::MarkMethodCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::CancelOperationRequest, ::google::protobuf::Empty>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::CancelOperationRequest* request, ::google::protobuf::Empty* response) { return this->CancelOperation(context, request, response); }));}
    void SetMessageAllocatorFor_CancelOperation(
        ::grpc::MessageAllocator< ::google::container::v1::CancelOperationRequest, ::google::protobuf::Empty>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(15);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::CancelOperationRequest, ::google::protobuf::Empty>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CancelOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CancelOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::CancelOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetServerConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetServerConfig() {
      ::grpc::Service::MarkMethodCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::GetServerConfigRequest* request, ::google::container::v1::ServerConfig* response) { return this->GetServerConfig(context, request, response); }));}
    void SetMessageAllocatorFor_GetServerConfig(
        ::grpc::MessageAllocator< ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(16);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetServerConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetServerConfigRequest* /*request*/, ::google::container::v1::ServerConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::GetServerConfigRequest* /*request*/, ::google::container::v1::ServerConfig* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetJSONWebKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetJSONWebKeys() {
      ::grpc::Service::MarkMethodCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetJSONWebKeysRequest, ::google::container::v1::GetJSONWebKeysResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::GetJSONWebKeysRequest* request, ::google::container::v1::GetJSONWebKeysResponse* response) { return this->GetJSONWebKeys(context, request, response); }));}
    void SetMessageAllocatorFor_GetJSONWebKeys(
        ::grpc::MessageAllocator< ::google::container::v1::GetJSONWebKeysRequest, ::google::container::v1::GetJSONWebKeysResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(17);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetJSONWebKeysRequest, ::google::container::v1::GetJSONWebKeysResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetJSONWebKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJSONWebKeys(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetJSONWebKeysRequest* /*request*/, ::google::container::v1::GetJSONWebKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetJSONWebKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::GetJSONWebKeysRequest* /*request*/, ::google::container::v1::GetJSONWebKeysResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListNodePools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListNodePools() {
      ::grpc::Service::MarkMethodCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::ListNodePoolsRequest, ::google::container::v1::ListNodePoolsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::ListNodePoolsRequest* request, ::google::container::v1::ListNodePoolsResponse* response) { return this->ListNodePools(context, request, response); }));}
    void SetMessageAllocatorFor_ListNodePools(
        ::grpc::MessageAllocator< ::google::container::v1::ListNodePoolsRequest, ::google::container::v1::ListNodePoolsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(18);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::ListNodePoolsRequest, ::google::container::v1::ListNodePoolsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListNodePools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodePools(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListNodePoolsRequest* /*request*/, ::google::container::v1::ListNodePoolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNodePools(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::ListNodePoolsRequest* /*request*/, ::google::container::v1::ListNodePoolsResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetNodePool() {
      ::grpc::Service::MarkMethodCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetNodePoolRequest, ::google::container::v1::NodePool>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::GetNodePoolRequest* request, ::google::container::v1::NodePool* response) { return this->GetNodePool(context, request, response); }));}
    void SetMessageAllocatorFor_GetNodePool(
        ::grpc::MessageAllocator< ::google::container::v1::GetNodePoolRequest, ::google::container::v1::NodePool>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(19);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::GetNodePoolRequest, ::google::container::v1::NodePool>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetNodePoolRequest* /*request*/, ::google::container::v1::NodePool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodePool(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::GetNodePoolRequest* /*request*/, ::google::container::v1::NodePool* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CreateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CreateNodePool() {
      ::grpc::Service::MarkMethodCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::CreateNodePoolRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::CreateNodePoolRequest* request, ::google::container::v1::Operation* response) { return this->CreateNodePool(context, request, response); }));}
    void SetMessageAllocatorFor_CreateNodePool(
        ::grpc::MessageAllocator< ::google::container::v1::CreateNodePoolRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(20);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::CreateNodePoolRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CreateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNodePool(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::CreateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_DeleteNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_DeleteNodePool() {
      ::grpc::Service::MarkMethodCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::DeleteNodePoolRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::DeleteNodePoolRequest* request, ::google::container::v1::Operation* response) { return this->DeleteNodePool(context, request, response); }));}
    void SetMessageAllocatorFor_DeleteNodePool(
        ::grpc::MessageAllocator< ::google::container::v1::DeleteNodePoolRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(21);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::DeleteNodePoolRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_DeleteNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNodePool(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::DeleteNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_RollbackNodePoolUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_RollbackNodePoolUpgrade() {
      ::grpc::Service::MarkMethodCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::RollbackNodePoolUpgradeRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::RollbackNodePoolUpgradeRequest* request, ::google::container::v1::Operation* response) { return this->RollbackNodePoolUpgrade(context, request, response); }));}
    void SetMessageAllocatorFor_RollbackNodePoolUpgrade(
        ::grpc::MessageAllocator< ::google::container::v1::RollbackNodePoolUpgradeRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(22);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::RollbackNodePoolUpgradeRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_RollbackNodePoolUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollbackNodePoolUpgrade(::grpc::ServerContext* /*context*/, const ::google::container::v1::RollbackNodePoolUpgradeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RollbackNodePoolUpgrade(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::RollbackNodePoolUpgradeRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetNodePoolManagement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetNodePoolManagement() {
      ::grpc::Service::MarkMethodCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetNodePoolManagementRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetNodePoolManagementRequest* request, ::google::container::v1::Operation* response) { return this->SetNodePoolManagement(context, request, response); }));}
    void SetMessageAllocatorFor_SetNodePoolManagement(
        ::grpc::MessageAllocator< ::google::container::v1::SetNodePoolManagementRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(23);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetNodePoolManagementRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetNodePoolManagement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolManagement(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolManagementRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetNodePoolManagement(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetNodePoolManagementRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetLabels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetLabels() {
      ::grpc::Service::MarkMethodCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetLabelsRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetLabelsRequest* request, ::google::container::v1::Operation* response) { return this->SetLabels(context, request, response); }));}
    void SetMessageAllocatorFor_SetLabels(
        ::grpc::MessageAllocator< ::google::container::v1::SetLabelsRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(24);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetLabelsRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetLabels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLabels(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLabelsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLabels(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetLabelsRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetLegacyAbac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetLegacyAbac() {
      ::grpc::Service::MarkMethodCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetLegacyAbacRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetLegacyAbacRequest* request, ::google::container::v1::Operation* response) { return this->SetLegacyAbac(context, request, response); }));}
    void SetMessageAllocatorFor_SetLegacyAbac(
        ::grpc::MessageAllocator< ::google::container::v1::SetLegacyAbacRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(25);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetLegacyAbacRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetLegacyAbac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLegacyAbac(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLegacyAbacRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLegacyAbac(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetLegacyAbacRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_StartIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_StartIPRotation() {
      ::grpc::Service::MarkMethodCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::StartIPRotationRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::StartIPRotationRequest* request, ::google::container::v1::Operation* response) { return this->StartIPRotation(context, request, response); }));}
    void SetMessageAllocatorFor_StartIPRotation(
        ::grpc::MessageAllocator< ::google::container::v1::StartIPRotationRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(26);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::StartIPRotationRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_StartIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::StartIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartIPRotation(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::StartIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_CompleteIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_CompleteIPRotation() {
      ::grpc::Service::MarkMethodCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::CompleteIPRotationRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::CompleteIPRotationRequest* request, ::google::container::v1::Operation* response) { return this->CompleteIPRotation(context, request, response); }));}
    void SetMessageAllocatorFor_CompleteIPRotation(
        ::grpc::MessageAllocator< ::google::container::v1::CompleteIPRotationRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(27);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::CompleteIPRotationRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_CompleteIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CompleteIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CompleteIPRotation(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::CompleteIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetNodePoolSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetNodePoolSize() {
      ::grpc::Service::MarkMethodCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetNodePoolSizeRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetNodePoolSizeRequest* request, ::google::container::v1::Operation* response) { return this->SetNodePoolSize(context, request, response); }));}
    void SetMessageAllocatorFor_SetNodePoolSize(
        ::grpc::MessageAllocator< ::google::container::v1::SetNodePoolSizeRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(28);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetNodePoolSizeRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetNodePoolSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolSize(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolSizeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetNodePoolSize(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetNodePoolSizeRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetNetworkPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetNetworkPolicy() {
      ::grpc::Service::MarkMethodCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetNetworkPolicyRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetNetworkPolicyRequest* request, ::google::container::v1::Operation* response) { return this->SetNetworkPolicy(context, request, response); }));}
    void SetMessageAllocatorFor_SetNetworkPolicy(
        ::grpc::MessageAllocator< ::google::container::v1::SetNetworkPolicyRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(29);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetNetworkPolicyRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetNetworkPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNetworkPolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNetworkPolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetNetworkPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetNetworkPolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_SetMaintenancePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_SetMaintenancePolicy() {
      ::grpc::Service::MarkMethodCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetMaintenancePolicyRequest, ::google::container::v1::Operation>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::SetMaintenancePolicyRequest* request, ::google::container::v1::Operation* response) { return this->SetMaintenancePolicy(context, request, response); }));}
    void SetMessageAllocatorFor_SetMaintenancePolicy(
        ::grpc::MessageAllocator< ::google::container::v1::SetMaintenancePolicyRequest, ::google::container::v1::Operation>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(30);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::SetMaintenancePolicyRequest, ::google::container::v1::Operation>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_SetMaintenancePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaintenancePolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMaintenancePolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMaintenancePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::SetMaintenancePolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_ListUsableSubnetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_ListUsableSubnetworks() {
      ::grpc::Service::MarkMethodCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::google::container::v1::ListUsableSubnetworksRequest, ::google::container::v1::ListUsableSubnetworksResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::google::container::v1::ListUsableSubnetworksRequest* request, ::google::container::v1::ListUsableSubnetworksResponse* response) { return this->ListUsableSubnetworks(context, request, response); }));}
    void SetMessageAllocatorFor_ListUsableSubnetworks(
        ::grpc::MessageAllocator< ::google::container::v1::ListUsableSubnetworksRequest, ::google::container::v1::ListUsableSubnetworksResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(31);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::google::container::v1::ListUsableSubnetworksRequest, ::google::container::v1::ListUsableSubnetworksResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_ListUsableSubnetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsableSubnetworks(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListUsableSubnetworksRequest* /*request*/, ::google::container::v1::ListUsableSubnetworksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListUsableSubnetworks(
      ::grpc::CallbackServerContext* /*context*/, const ::google::container::v1::ListUsableSubnetworksRequest* /*request*/, ::google::container::v1::ListUsableSubnetworksResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_ListClusters<WithCallbackMethod_GetCluster<WithCallbackMethod_CreateCluster<WithCallbackMethod_UpdateCluster<WithCallbackMethod_UpdateNodePool<WithCallbackMethod_SetNodePoolAutoscaling<WithCallbackMethod_SetLoggingService<WithCallbackMethod_SetMonitoringService<WithCallbackMethod_SetAddonsConfig<WithCallbackMethod_SetLocations<WithCallbackMethod_UpdateMaster<WithCallbackMethod_SetMasterAuth<WithCallbackMethod_DeleteCluster<WithCallbackMethod_ListOperations<WithCallbackMethod_GetOperation<WithCallbackMethod_CancelOperation<WithCallbackMethod_GetServerConfig<WithCallbackMethod_GetJSONWebKeys<WithCallbackMethod_ListNodePools<WithCallbackMethod_GetNodePool<WithCallbackMethod_CreateNodePool<WithCallbackMethod_DeleteNodePool<WithCallbackMethod_RollbackNodePoolUpgrade<WithCallbackMethod_SetNodePoolManagement<WithCallbackMethod_SetLabels<WithCallbackMethod_SetLegacyAbac<WithCallbackMethod_StartIPRotation<WithCallbackMethod_CompleteIPRotation<WithCallbackMethod_SetNodePoolSize<WithCallbackMethod_SetNetworkPolicy<WithCallbackMethod_SetMaintenancePolicy<WithCallbackMethod_ListUsableSubnetworks<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListClusters() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListClustersRequest* /*request*/, ::google::container::v1::ListClustersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetCluster() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetClusterRequest* /*request*/, ::google::container::v1::Cluster* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateCluster() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateNodePool() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_UpdateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNodePoolAutoscaling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetNodePoolAutoscaling() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SetNodePoolAutoscaling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolAutoscaling(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolAutoscalingRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLoggingService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLoggingService() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SetLoggingService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLoggingService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLoggingServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMonitoringService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMonitoringService() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SetMonitoringService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMonitoringService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMonitoringServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetAddonsConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetAddonsConfig() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SetAddonsConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAddonsConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetAddonsConfigRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLocations() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SetLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocations(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLocationsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_UpdateMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_UpdateMaster() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_UpdateMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMaster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateMasterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMasterAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMasterAuth() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SetMasterAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterAuth(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMasterAuthRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodGeneric(12);
    }
    ~WithGenericMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListOperations() {
      ::grpc::Service::MarkMethodGeneric(13);
    }
    ~WithGenericMethod_ListOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOperations(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListOperationsRequest* /*request*/, ::google::container::v1::ListOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetOperation() {
      ::grpc::Service::MarkMethodGeneric(14);
    }
    ~WithGenericMethod_GetOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetOperationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CancelOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CancelOperation() {
      ::grpc::Service::MarkMethodGeneric(15);
    }
    ~WithGenericMethod_CancelOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CancelOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetServerConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetServerConfig() {
      ::grpc::Service::MarkMethodGeneric(16);
    }
    ~WithGenericMethod_GetServerConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetServerConfigRequest* /*request*/, ::google::container::v1::ServerConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetJSONWebKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetJSONWebKeys() {
      ::grpc::Service::MarkMethodGeneric(17);
    }
    ~WithGenericMethod_GetJSONWebKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJSONWebKeys(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetJSONWebKeysRequest* /*request*/, ::google::container::v1::GetJSONWebKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListNodePools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListNodePools() {
      ::grpc::Service::MarkMethodGeneric(18);
    }
    ~WithGenericMethod_ListNodePools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodePools(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListNodePoolsRequest* /*request*/, ::google::container::v1::ListNodePoolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetNodePool() {
      ::grpc::Service::MarkMethodGeneric(19);
    }
    ~WithGenericMethod_GetNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetNodePoolRequest* /*request*/, ::google::container::v1::NodePool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CreateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CreateNodePool() {
      ::grpc::Service::MarkMethodGeneric(20);
    }
    ~WithGenericMethod_CreateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_DeleteNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_DeleteNodePool() {
      ::grpc::Service::MarkMethodGeneric(21);
    }
    ~WithGenericMethod_DeleteNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_RollbackNodePoolUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_RollbackNodePoolUpgrade() {
      ::grpc::Service::MarkMethodGeneric(22);
    }
    ~WithGenericMethod_RollbackNodePoolUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollbackNodePoolUpgrade(::grpc::ServerContext* /*context*/, const ::google::container::v1::RollbackNodePoolUpgradeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNodePoolManagement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetNodePoolManagement() {
      ::grpc::Service::MarkMethodGeneric(23);
    }
    ~WithGenericMethod_SetNodePoolManagement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolManagement(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolManagementRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLabels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLabels() {
      ::grpc::Service::MarkMethodGeneric(24);
    }
    ~WithGenericMethod_SetLabels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLabels(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLabelsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetLegacyAbac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetLegacyAbac() {
      ::grpc::Service::MarkMethodGeneric(25);
    }
    ~WithGenericMethod_SetLegacyAbac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLegacyAbac(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLegacyAbacRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StartIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_StartIPRotation() {
      ::grpc::Service::MarkMethodGeneric(26);
    }
    ~WithGenericMethod_StartIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::StartIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_CompleteIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_CompleteIPRotation() {
      ::grpc::Service::MarkMethodGeneric(27);
    }
    ~WithGenericMethod_CompleteIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CompleteIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNodePoolSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetNodePoolSize() {
      ::grpc::Service::MarkMethodGeneric(28);
    }
    ~WithGenericMethod_SetNodePoolSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolSize(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolSizeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetNetworkPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetNetworkPolicy() {
      ::grpc::Service::MarkMethodGeneric(29);
    }
    ~WithGenericMethod_SetNetworkPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNetworkPolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNetworkPolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SetMaintenancePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_SetMaintenancePolicy() {
      ::grpc::Service::MarkMethodGeneric(30);
    }
    ~WithGenericMethod_SetMaintenancePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaintenancePolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMaintenancePolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_ListUsableSubnetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_ListUsableSubnetworks() {
      ::grpc::Service::MarkMethodGeneric(31);
    }
    ~WithGenericMethod_ListUsableSubnetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsableSubnetworks(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListUsableSubnetworksRequest* /*request*/, ::google::container::v1::ListUsableSubnetworksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListClusters() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListClustersRequest* /*request*/, ::google::container::v1::ListClustersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListClusters(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetCluster() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetClusterRequest* /*request*/, ::google::container::v1::Cluster* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetCluster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateCluster() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateCluster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(2, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateCluster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(3, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateNodePool() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_UpdateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateNodePool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(4, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetNodePoolAutoscaling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetNodePoolAutoscaling() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SetNodePoolAutoscaling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolAutoscaling(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolAutoscalingRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodePoolAutoscaling(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(5, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLoggingService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLoggingService() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SetLoggingService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLoggingService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLoggingServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLoggingService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(6, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMonitoringService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMonitoringService() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SetMonitoringService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMonitoringService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMonitoringServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMonitoringService(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(7, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetAddonsConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetAddonsConfig() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SetAddonsConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAddonsConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetAddonsConfigRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetAddonsConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(8, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLocations() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SetLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocations(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLocationsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLocations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(9, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_UpdateMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_UpdateMaster() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_UpdateMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMaster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateMasterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestUpdateMaster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(10, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMasterAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMasterAuth() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SetMasterAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterAuth(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMasterAuthRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMasterAuth(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(11, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodRaw(12);
    }
    ~WithRawMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteCluster(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(12, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListOperations() {
      ::grpc::Service::MarkMethodRaw(13);
    }
    ~WithRawMethod_ListOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOperations(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListOperationsRequest* /*request*/, ::google::container::v1::ListOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListOperations(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(13, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetOperation() {
      ::grpc::Service::MarkMethodRaw(14);
    }
    ~WithRawMethod_GetOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetOperationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(14, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CancelOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CancelOperation() {
      ::grpc::Service::MarkMethodRaw(15);
    }
    ~WithRawMethod_CancelOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CancelOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCancelOperation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(15, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetServerConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetServerConfig() {
      ::grpc::Service::MarkMethodRaw(16);
    }
    ~WithRawMethod_GetServerConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetServerConfigRequest* /*request*/, ::google::container::v1::ServerConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetServerConfig(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(16, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetJSONWebKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetJSONWebKeys() {
      ::grpc::Service::MarkMethodRaw(17);
    }
    ~WithRawMethod_GetJSONWebKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJSONWebKeys(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetJSONWebKeysRequest* /*request*/, ::google::container::v1::GetJSONWebKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetJSONWebKeys(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(17, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListNodePools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListNodePools() {
      ::grpc::Service::MarkMethodRaw(18);
    }
    ~WithRawMethod_ListNodePools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodePools(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListNodePoolsRequest* /*request*/, ::google::container::v1::ListNodePoolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListNodePools(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(18, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetNodePool() {
      ::grpc::Service::MarkMethodRaw(19);
    }
    ~WithRawMethod_GetNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetNodePoolRequest* /*request*/, ::google::container::v1::NodePool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetNodePool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(19, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CreateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CreateNodePool() {
      ::grpc::Service::MarkMethodRaw(20);
    }
    ~WithRawMethod_CreateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCreateNodePool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(20, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_DeleteNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_DeleteNodePool() {
      ::grpc::Service::MarkMethodRaw(21);
    }
    ~WithRawMethod_DeleteNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestDeleteNodePool(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(21, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_RollbackNodePoolUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_RollbackNodePoolUpgrade() {
      ::grpc::Service::MarkMethodRaw(22);
    }
    ~WithRawMethod_RollbackNodePoolUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollbackNodePoolUpgrade(::grpc::ServerContext* /*context*/, const ::google::container::v1::RollbackNodePoolUpgradeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestRollbackNodePoolUpgrade(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(22, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetNodePoolManagement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetNodePoolManagement() {
      ::grpc::Service::MarkMethodRaw(23);
    }
    ~WithRawMethod_SetNodePoolManagement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolManagement(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolManagementRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodePoolManagement(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(23, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLabels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLabels() {
      ::grpc::Service::MarkMethodRaw(24);
    }
    ~WithRawMethod_SetLabels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLabels(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLabelsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLabels(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(24, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetLegacyAbac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetLegacyAbac() {
      ::grpc::Service::MarkMethodRaw(25);
    }
    ~WithRawMethod_SetLegacyAbac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLegacyAbac(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLegacyAbacRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetLegacyAbac(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(25, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_StartIPRotation() {
      ::grpc::Service::MarkMethodRaw(26);
    }
    ~WithRawMethod_StartIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::StartIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartIPRotation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(26, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_CompleteIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_CompleteIPRotation() {
      ::grpc::Service::MarkMethodRaw(27);
    }
    ~WithRawMethod_CompleteIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CompleteIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestCompleteIPRotation(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(27, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetNodePoolSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetNodePoolSize() {
      ::grpc::Service::MarkMethodRaw(28);
    }
    ~WithRawMethod_SetNodePoolSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolSize(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolSizeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNodePoolSize(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(28, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetNetworkPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetNetworkPolicy() {
      ::grpc::Service::MarkMethodRaw(29);
    }
    ~WithRawMethod_SetNetworkPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNetworkPolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNetworkPolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetNetworkPolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(29, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SetMaintenancePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_SetMaintenancePolicy() {
      ::grpc::Service::MarkMethodRaw(30);
    }
    ~WithRawMethod_SetMaintenancePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaintenancePolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMaintenancePolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSetMaintenancePolicy(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(30, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_ListUsableSubnetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_ListUsableSubnetworks() {
      ::grpc::Service::MarkMethodRaw(31);
    }
    ~WithRawMethod_ListUsableSubnetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsableSubnetworks(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListUsableSubnetworksRequest* /*request*/, ::google::container::v1::ListUsableSubnetworksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestListUsableSubnetworks(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(31, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListClusters() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListClusters(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListClustersRequest* /*request*/, ::google::container::v1::ListClustersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListClusters(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetCluster() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetCluster(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetClusterRequest* /*request*/, ::google::container::v1::Cluster* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateCluster() {
      ::grpc::Service::MarkMethodRawCallback(2,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateCluster(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodRawCallback(3,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateCluster(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateNodePool() {
      ::grpc::Service::MarkMethodRawCallback(4,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateNodePool(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateNodePool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetNodePoolAutoscaling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetNodePoolAutoscaling() {
      ::grpc::Service::MarkMethodRawCallback(5,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetNodePoolAutoscaling(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetNodePoolAutoscaling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolAutoscaling(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolAutoscalingRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetNodePoolAutoscaling(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetLoggingService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetLoggingService() {
      ::grpc::Service::MarkMethodRawCallback(6,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLoggingService(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetLoggingService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLoggingService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLoggingServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLoggingService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMonitoringService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMonitoringService() {
      ::grpc::Service::MarkMethodRawCallback(7,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMonitoringService(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMonitoringService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMonitoringService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMonitoringServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMonitoringService(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetAddonsConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetAddonsConfig() {
      ::grpc::Service::MarkMethodRawCallback(8,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetAddonsConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetAddonsConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetAddonsConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetAddonsConfigRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetAddonsConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetLocations() {
      ::grpc::Service::MarkMethodRawCallback(9,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLocations(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLocations(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLocationsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLocations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_UpdateMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_UpdateMaster() {
      ::grpc::Service::MarkMethodRawCallback(10,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->UpdateMaster(context, request, response); }));
    }
    ~WithRawCallbackMethod_UpdateMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status UpdateMaster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateMasterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* UpdateMaster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMasterAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMasterAuth() {
      ::grpc::Service::MarkMethodRawCallback(11,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMasterAuth(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMasterAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMasterAuth(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMasterAuthRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMasterAuth(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodRawCallback(12,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteCluster(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteCluster(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListOperations() {
      ::grpc::Service::MarkMethodRawCallback(13,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListOperations(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListOperations(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListOperationsRequest* /*request*/, ::google::container::v1::ListOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListOperations(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetOperation() {
      ::grpc::Service::MarkMethodRawCallback(14,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetOperation(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetOperationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CancelOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CancelOperation() {
      ::grpc::Service::MarkMethodRawCallback(15,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CancelOperation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CancelOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CancelOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CancelOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CancelOperation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetServerConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetServerConfig() {
      ::grpc::Service::MarkMethodRawCallback(16,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetServerConfig(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetServerConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetServerConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetServerConfigRequest* /*request*/, ::google::container::v1::ServerConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetServerConfig(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetJSONWebKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetJSONWebKeys() {
      ::grpc::Service::MarkMethodRawCallback(17,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetJSONWebKeys(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetJSONWebKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetJSONWebKeys(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetJSONWebKeysRequest* /*request*/, ::google::container::v1::GetJSONWebKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetJSONWebKeys(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListNodePools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListNodePools() {
      ::grpc::Service::MarkMethodRawCallback(18,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListNodePools(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListNodePools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListNodePools(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListNodePoolsRequest* /*request*/, ::google::container::v1::ListNodePoolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListNodePools(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetNodePool() {
      ::grpc::Service::MarkMethodRawCallback(19,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetNodePool(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetNodePoolRequest* /*request*/, ::google::container::v1::NodePool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetNodePool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CreateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CreateNodePool() {
      ::grpc::Service::MarkMethodRawCallback(20,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CreateNodePool(context, request, response); }));
    }
    ~WithRawCallbackMethod_CreateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CreateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CreateNodePool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_DeleteNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_DeleteNodePool() {
      ::grpc::Service::MarkMethodRawCallback(21,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->DeleteNodePool(context, request, response); }));
    }
    ~WithRawCallbackMethod_DeleteNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status DeleteNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* DeleteNodePool(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_RollbackNodePoolUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_RollbackNodePoolUpgrade() {
      ::grpc::Service::MarkMethodRawCallback(22,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->RollbackNodePoolUpgrade(context, request, response); }));
    }
    ~WithRawCallbackMethod_RollbackNodePoolUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status RollbackNodePoolUpgrade(::grpc::ServerContext* /*context*/, const ::google::container::v1::RollbackNodePoolUpgradeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* RollbackNodePoolUpgrade(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetNodePoolManagement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetNodePoolManagement() {
      ::grpc::Service::MarkMethodRawCallback(23,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetNodePoolManagement(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetNodePoolManagement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolManagement(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolManagementRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetNodePoolManagement(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetLabels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetLabels() {
      ::grpc::Service::MarkMethodRawCallback(24,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLabels(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetLabels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLabels(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLabelsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLabels(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetLegacyAbac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetLegacyAbac() {
      ::grpc::Service::MarkMethodRawCallback(25,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetLegacyAbac(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetLegacyAbac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetLegacyAbac(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLegacyAbacRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetLegacyAbac(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_StartIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_StartIPRotation() {
      ::grpc::Service::MarkMethodRawCallback(26,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->StartIPRotation(context, request, response); }));
    }
    ~WithRawCallbackMethod_StartIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::StartIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* StartIPRotation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_CompleteIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_CompleteIPRotation() {
      ::grpc::Service::MarkMethodRawCallback(27,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->CompleteIPRotation(context, request, response); }));
    }
    ~WithRawCallbackMethod_CompleteIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status CompleteIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CompleteIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* CompleteIPRotation(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetNodePoolSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetNodePoolSize() {
      ::grpc::Service::MarkMethodRawCallback(28,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetNodePoolSize(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetNodePoolSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNodePoolSize(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolSizeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetNodePoolSize(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetNetworkPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetNetworkPolicy() {
      ::grpc::Service::MarkMethodRawCallback(29,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetNetworkPolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetNetworkPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetNetworkPolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNetworkPolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetNetworkPolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_SetMaintenancePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_SetMaintenancePolicy() {
      ::grpc::Service::MarkMethodRawCallback(30,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->SetMaintenancePolicy(context, request, response); }));
    }
    ~WithRawCallbackMethod_SetMaintenancePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SetMaintenancePolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMaintenancePolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* SetMaintenancePolicy(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_ListUsableSubnetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_ListUsableSubnetworks() {
      ::grpc::Service::MarkMethodRawCallback(31,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->ListUsableSubnetworks(context, request, response); }));
    }
    ~WithRawCallbackMethod_ListUsableSubnetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status ListUsableSubnetworks(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListUsableSubnetworksRequest* /*request*/, ::google::container::v1::ListUsableSubnetworksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* ListUsableSubnetworks(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListClusters : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListClusters() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::ListClustersRequest, ::google::container::v1::ListClustersResponse>* streamer) {
                       return this->StreamedListClusters(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListClusters() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListClusters(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListClustersRequest* /*request*/, ::google::container::v1::ListClustersResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListClusters(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::ListClustersRequest,::google::container::v1::ListClustersResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetCluster() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::GetClusterRequest, ::google::container::v1::Cluster>* streamer) {
                       return this->StreamedGetCluster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetClusterRequest* /*request*/, ::google::container::v1::Cluster* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::GetClusterRequest,::google::container::v1::Cluster>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateCluster() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::CreateClusterRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedCreateCluster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::CreateClusterRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateCluster() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::UpdateClusterRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedUpdateCluster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::UpdateClusterRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateNodePool() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::UpdateNodePoolRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::UpdateNodePoolRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedUpdateNodePool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateNodePool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::UpdateNodePoolRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNodePoolAutoscaling : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetNodePoolAutoscaling() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetNodePoolAutoscalingRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetNodePoolAutoscalingRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetNodePoolAutoscaling(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetNodePoolAutoscaling() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNodePoolAutoscaling(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolAutoscalingRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNodePoolAutoscaling(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetNodePoolAutoscalingRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLoggingService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLoggingService() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetLoggingServiceRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetLoggingServiceRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetLoggingService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLoggingService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLoggingService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLoggingServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLoggingService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetLoggingServiceRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMonitoringService : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMonitoringService() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetMonitoringServiceRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetMonitoringServiceRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetMonitoringService(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMonitoringService() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMonitoringService(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMonitoringServiceRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMonitoringService(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetMonitoringServiceRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetAddonsConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetAddonsConfig() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetAddonsConfigRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetAddonsConfigRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetAddonsConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetAddonsConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetAddonsConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetAddonsConfigRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetAddonsConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetAddonsConfigRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLocations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLocations() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetLocationsRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetLocationsRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetLocations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLocations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLocations(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLocationsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLocations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetLocationsRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_UpdateMaster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_UpdateMaster() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::UpdateMasterRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::UpdateMasterRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedUpdateMaster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_UpdateMaster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status UpdateMaster(::grpc::ServerContext* /*context*/, const ::google::container::v1::UpdateMasterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedUpdateMaster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::UpdateMasterRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMasterAuth : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMasterAuth() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetMasterAuthRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetMasterAuthRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetMasterAuth(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMasterAuth() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMasterAuth(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMasterAuthRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMasterAuth(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetMasterAuthRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteCluster : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteCluster() {
      ::grpc::Service::MarkMethodStreamed(12,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::DeleteClusterRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedDeleteCluster(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteCluster() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteCluster(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteClusterRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteCluster(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::DeleteClusterRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListOperations : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListOperations() {
      ::grpc::Service::MarkMethodStreamed(13,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::ListOperationsRequest, ::google::container::v1::ListOperationsResponse>* streamer) {
                       return this->StreamedListOperations(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListOperations() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListOperations(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListOperationsRequest* /*request*/, ::google::container::v1::ListOperationsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListOperations(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::ListOperationsRequest,::google::container::v1::ListOperationsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetOperation() {
      ::grpc::Service::MarkMethodStreamed(14,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::GetOperationRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedGetOperation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetOperationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::GetOperationRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CancelOperation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CancelOperation() {
      ::grpc::Service::MarkMethodStreamed(15,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::CancelOperationRequest, ::google::protobuf::Empty>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::CancelOperationRequest, ::google::protobuf::Empty>* streamer) {
                       return this->StreamedCancelOperation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CancelOperation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CancelOperation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CancelOperationRequest* /*request*/, ::google::protobuf::Empty* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCancelOperation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::CancelOperationRequest,::google::protobuf::Empty>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetServerConfig : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetServerConfig() {
      ::grpc::Service::MarkMethodStreamed(16,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::GetServerConfigRequest, ::google::container::v1::ServerConfig>* streamer) {
                       return this->StreamedGetServerConfig(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetServerConfig() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetServerConfig(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetServerConfigRequest* /*request*/, ::google::container::v1::ServerConfig* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetServerConfig(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::GetServerConfigRequest,::google::container::v1::ServerConfig>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetJSONWebKeys : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetJSONWebKeys() {
      ::grpc::Service::MarkMethodStreamed(17,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::GetJSONWebKeysRequest, ::google::container::v1::GetJSONWebKeysResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::GetJSONWebKeysRequest, ::google::container::v1::GetJSONWebKeysResponse>* streamer) {
                       return this->StreamedGetJSONWebKeys(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetJSONWebKeys() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetJSONWebKeys(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetJSONWebKeysRequest* /*request*/, ::google::container::v1::GetJSONWebKeysResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetJSONWebKeys(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::GetJSONWebKeysRequest,::google::container::v1::GetJSONWebKeysResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListNodePools : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListNodePools() {
      ::grpc::Service::MarkMethodStreamed(18,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::ListNodePoolsRequest, ::google::container::v1::ListNodePoolsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::ListNodePoolsRequest, ::google::container::v1::ListNodePoolsResponse>* streamer) {
                       return this->StreamedListNodePools(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListNodePools() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListNodePools(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListNodePoolsRequest* /*request*/, ::google::container::v1::ListNodePoolsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListNodePools(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::ListNodePoolsRequest,::google::container::v1::ListNodePoolsResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetNodePool() {
      ::grpc::Service::MarkMethodStreamed(19,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::GetNodePoolRequest, ::google::container::v1::NodePool>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::GetNodePoolRequest, ::google::container::v1::NodePool>* streamer) {
                       return this->StreamedGetNodePool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::GetNodePoolRequest* /*request*/, ::google::container::v1::NodePool* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetNodePool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::GetNodePoolRequest,::google::container::v1::NodePool>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CreateNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CreateNodePool() {
      ::grpc::Service::MarkMethodStreamed(20,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::CreateNodePoolRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::CreateNodePoolRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedCreateNodePool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CreateNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CreateNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::CreateNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCreateNodePool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::CreateNodePoolRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_DeleteNodePool : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_DeleteNodePool() {
      ::grpc::Service::MarkMethodStreamed(21,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::DeleteNodePoolRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::DeleteNodePoolRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedDeleteNodePool(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_DeleteNodePool() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status DeleteNodePool(::grpc::ServerContext* /*context*/, const ::google::container::v1::DeleteNodePoolRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedDeleteNodePool(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::DeleteNodePoolRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_RollbackNodePoolUpgrade : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_RollbackNodePoolUpgrade() {
      ::grpc::Service::MarkMethodStreamed(22,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::RollbackNodePoolUpgradeRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::RollbackNodePoolUpgradeRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedRollbackNodePoolUpgrade(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_RollbackNodePoolUpgrade() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status RollbackNodePoolUpgrade(::grpc::ServerContext* /*context*/, const ::google::container::v1::RollbackNodePoolUpgradeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedRollbackNodePoolUpgrade(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::RollbackNodePoolUpgradeRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNodePoolManagement : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetNodePoolManagement() {
      ::grpc::Service::MarkMethodStreamed(23,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetNodePoolManagementRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetNodePoolManagementRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetNodePoolManagement(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetNodePoolManagement() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNodePoolManagement(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolManagementRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNodePoolManagement(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetNodePoolManagementRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLabels : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLabels() {
      ::grpc::Service::MarkMethodStreamed(24,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetLabelsRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetLabelsRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetLabels(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLabels() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLabels(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLabelsRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLabels(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetLabelsRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetLegacyAbac : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetLegacyAbac() {
      ::grpc::Service::MarkMethodStreamed(25,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetLegacyAbacRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetLegacyAbacRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetLegacyAbac(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetLegacyAbac() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetLegacyAbac(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetLegacyAbacRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetLegacyAbac(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetLegacyAbacRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_StartIPRotation() {
      ::grpc::Service::MarkMethodStreamed(26,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::StartIPRotationRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::StartIPRotationRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedStartIPRotation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_StartIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::StartIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartIPRotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::StartIPRotationRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_CompleteIPRotation : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_CompleteIPRotation() {
      ::grpc::Service::MarkMethodStreamed(27,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::CompleteIPRotationRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::CompleteIPRotationRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedCompleteIPRotation(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_CompleteIPRotation() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status CompleteIPRotation(::grpc::ServerContext* /*context*/, const ::google::container::v1::CompleteIPRotationRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedCompleteIPRotation(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::CompleteIPRotationRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNodePoolSize : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetNodePoolSize() {
      ::grpc::Service::MarkMethodStreamed(28,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetNodePoolSizeRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetNodePoolSizeRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetNodePoolSize(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetNodePoolSize() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNodePoolSize(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNodePoolSizeRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNodePoolSize(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetNodePoolSizeRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetNetworkPolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetNetworkPolicy() {
      ::grpc::Service::MarkMethodStreamed(29,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetNetworkPolicyRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetNetworkPolicyRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetNetworkPolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetNetworkPolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetNetworkPolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetNetworkPolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetNetworkPolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetNetworkPolicyRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_SetMaintenancePolicy : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_SetMaintenancePolicy() {
      ::grpc::Service::MarkMethodStreamed(30,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::SetMaintenancePolicyRequest, ::google::container::v1::Operation>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::SetMaintenancePolicyRequest, ::google::container::v1::Operation>* streamer) {
                       return this->StreamedSetMaintenancePolicy(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_SetMaintenancePolicy() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SetMaintenancePolicy(::grpc::ServerContext* /*context*/, const ::google::container::v1::SetMaintenancePolicyRequest* /*request*/, ::google::container::v1::Operation* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedSetMaintenancePolicy(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::SetMaintenancePolicyRequest,::google::container::v1::Operation>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_ListUsableSubnetworks : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_ListUsableSubnetworks() {
      ::grpc::Service::MarkMethodStreamed(31,
        new ::grpc::internal::StreamedUnaryHandler<
          ::google::container::v1::ListUsableSubnetworksRequest, ::google::container::v1::ListUsableSubnetworksResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::google::container::v1::ListUsableSubnetworksRequest, ::google::container::v1::ListUsableSubnetworksResponse>* streamer) {
                       return this->StreamedListUsableSubnetworks(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_ListUsableSubnetworks() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status ListUsableSubnetworks(::grpc::ServerContext* /*context*/, const ::google::container::v1::ListUsableSubnetworksRequest* /*request*/, ::google::container::v1::ListUsableSubnetworksResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedListUsableSubnetworks(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::google::container::v1::ListUsableSubnetworksRequest,::google::container::v1::ListUsableSubnetworksResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_ListClusters<WithStreamedUnaryMethod_GetCluster<WithStreamedUnaryMethod_CreateCluster<WithStreamedUnaryMethod_UpdateCluster<WithStreamedUnaryMethod_UpdateNodePool<WithStreamedUnaryMethod_SetNodePoolAutoscaling<WithStreamedUnaryMethod_SetLoggingService<WithStreamedUnaryMethod_SetMonitoringService<WithStreamedUnaryMethod_SetAddonsConfig<WithStreamedUnaryMethod_SetLocations<WithStreamedUnaryMethod_UpdateMaster<WithStreamedUnaryMethod_SetMasterAuth<WithStreamedUnaryMethod_DeleteCluster<WithStreamedUnaryMethod_ListOperations<WithStreamedUnaryMethod_GetOperation<WithStreamedUnaryMethod_CancelOperation<WithStreamedUnaryMethod_GetServerConfig<WithStreamedUnaryMethod_GetJSONWebKeys<WithStreamedUnaryMethod_ListNodePools<WithStreamedUnaryMethod_GetNodePool<WithStreamedUnaryMethod_CreateNodePool<WithStreamedUnaryMethod_DeleteNodePool<WithStreamedUnaryMethod_RollbackNodePoolUpgrade<WithStreamedUnaryMethod_SetNodePoolManagement<WithStreamedUnaryMethod_SetLabels<WithStreamedUnaryMethod_SetLegacyAbac<WithStreamedUnaryMethod_StartIPRotation<WithStreamedUnaryMethod_CompleteIPRotation<WithStreamedUnaryMethod_SetNodePoolSize<WithStreamedUnaryMethod_SetNetworkPolicy<WithStreamedUnaryMethod_SetMaintenancePolicy<WithStreamedUnaryMethod_ListUsableSubnetworks<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_ListClusters<WithStreamedUnaryMethod_GetCluster<WithStreamedUnaryMethod_CreateCluster<WithStreamedUnaryMethod_UpdateCluster<WithStreamedUnaryMethod_UpdateNodePool<WithStreamedUnaryMethod_SetNodePoolAutoscaling<WithStreamedUnaryMethod_SetLoggingService<WithStreamedUnaryMethod_SetMonitoringService<WithStreamedUnaryMethod_SetAddonsConfig<WithStreamedUnaryMethod_SetLocations<WithStreamedUnaryMethod_UpdateMaster<WithStreamedUnaryMethod_SetMasterAuth<WithStreamedUnaryMethod_DeleteCluster<WithStreamedUnaryMethod_ListOperations<WithStreamedUnaryMethod_GetOperation<WithStreamedUnaryMethod_CancelOperation<WithStreamedUnaryMethod_GetServerConfig<WithStreamedUnaryMethod_GetJSONWebKeys<WithStreamedUnaryMethod_ListNodePools<WithStreamedUnaryMethod_GetNodePool<WithStreamedUnaryMethod_CreateNodePool<WithStreamedUnaryMethod_DeleteNodePool<WithStreamedUnaryMethod_RollbackNodePoolUpgrade<WithStreamedUnaryMethod_SetNodePoolManagement<WithStreamedUnaryMethod_SetLabels<WithStreamedUnaryMethod_SetLegacyAbac<WithStreamedUnaryMethod_StartIPRotation<WithStreamedUnaryMethod_CompleteIPRotation<WithStreamedUnaryMethod_SetNodePoolSize<WithStreamedUnaryMethod_SetNetworkPolicy<WithStreamedUnaryMethod_SetMaintenancePolicy<WithStreamedUnaryMethod_ListUsableSubnetworks<Service > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > > StreamedService;
};

}  // namespace v1
}  // namespace container
}  // namespace google


#endif  // GRPC_google_2fcontainer_2fv1_2fcluster_5fservice_2eproto__INCLUDED
