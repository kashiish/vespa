// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: match_service.proto

#ifndef PROTOBUF_INCLUDED_match_5fservice_2eproto
#define PROTOBUF_INCLUDED_match_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3007000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3007000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "third_party/googleapis/google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_match_5fservice_2eproto

// Internal implementation detail -- do not use these members.
struct TableStruct_match_5fservice_2eproto {
  static const ::google::protobuf::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors_match_5fservice_2eproto();
namespace google {
namespace cloud {
namespace aiplatform {
namespace container {
namespace v1beta1 {
class BatchMatchRequest;
class BatchMatchRequestDefaultTypeInternal;
extern BatchMatchRequestDefaultTypeInternal _BatchMatchRequest_default_instance_;
class BatchMatchRequest_BatchMatchRequestPerIndex;
class BatchMatchRequest_BatchMatchRequestPerIndexDefaultTypeInternal;
extern BatchMatchRequest_BatchMatchRequestPerIndexDefaultTypeInternal _BatchMatchRequest_BatchMatchRequestPerIndex_default_instance_;
class BatchMatchResponse;
class BatchMatchResponseDefaultTypeInternal;
extern BatchMatchResponseDefaultTypeInternal _BatchMatchResponse_default_instance_;
class BatchMatchResponse_BatchMatchResponsePerIndex;
class BatchMatchResponse_BatchMatchResponsePerIndexDefaultTypeInternal;
extern BatchMatchResponse_BatchMatchResponsePerIndexDefaultTypeInternal _BatchMatchResponse_BatchMatchResponsePerIndex_default_instance_;
class MatchRequest;
class MatchRequestDefaultTypeInternal;
extern MatchRequestDefaultTypeInternal _MatchRequest_default_instance_;
class MatchResponse;
class MatchResponseDefaultTypeInternal;
extern MatchResponseDefaultTypeInternal _MatchResponse_default_instance_;
class MatchResponse_Neighbor;
class MatchResponse_NeighborDefaultTypeInternal;
extern MatchResponse_NeighborDefaultTypeInternal _MatchResponse_Neighbor_default_instance_;
class Namespace;
class NamespaceDefaultTypeInternal;
extern NamespaceDefaultTypeInternal _Namespace_default_instance_;
}  // namespace v1beta1
}  // namespace container
}  // namespace aiplatform
}  // namespace cloud
namespace protobuf {
template<> ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::MatchRequest* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::MatchRequest>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::MatchResponse* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::MatchResponse>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::Namespace* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::Namespace>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace google {
namespace cloud {
namespace aiplatform {
namespace container {
namespace v1beta1 {

// ===================================================================

class MatchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.MatchRequest) */ {
 public:
  MatchRequest();
  virtual ~MatchRequest();

  MatchRequest(const MatchRequest& from);

  inline MatchRequest& operator=(const MatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchRequest(MatchRequest&& from) noexcept
    : MatchRequest() {
    *this = ::std::move(from);
  }

  inline MatchRequest& operator=(MatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchRequest* internal_default_instance() {
    return reinterpret_cast<const MatchRequest*>(
               &_MatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(MatchRequest* other);
  friend void swap(MatchRequest& a, MatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchRequest* New() const final {
    return CreateMaybeMessage<MatchRequest>(nullptr);
  }

  MatchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchRequest& from);
  void MergeFrom(const MatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated float float_val = 2;
  int float_val_size() const;
  void clear_float_val();
  static const int kFloatValFieldNumber = 2;
  float float_val(int index) const;
  void set_float_val(int index, float value);
  void add_float_val(float value);
  const ::google::protobuf::RepeatedField< float >&
      float_val() const;
  ::google::protobuf::RepeatedField< float >*
      mutable_float_val();

  // repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;
  int restricts_size() const;
  void clear_restricts();
  static const int kRestrictsFieldNumber = 4;
  ::google::cloud::aiplatform::container::v1beta1::Namespace* mutable_restricts(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace >*
      mutable_restricts();
  const ::google::cloud::aiplatform::container::v1beta1::Namespace& restricts(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::Namespace* add_restricts();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace >&
      restricts() const;

  // string deployed_index_id = 1;
  void clear_deployed_index_id();
  static const int kDeployedIndexIdFieldNumber = 1;
  const ::std::string& deployed_index_id() const;
  void set_deployed_index_id(const ::std::string& value);
  #if LANG_CXX11
  void set_deployed_index_id(::std::string&& value);
  #endif
  void set_deployed_index_id(const char* value);
  void set_deployed_index_id(const char* value, size_t size);
  ::std::string* mutable_deployed_index_id();
  ::std::string* release_deployed_index_id();
  void set_allocated_deployed_index_id(::std::string* deployed_index_id);

  // int32 num_neighbors = 3;
  void clear_num_neighbors();
  static const int kNumNeighborsFieldNumber = 3;
  ::google::protobuf::int32 num_neighbors() const;
  void set_num_neighbors(::google::protobuf::int32 value);

  // int32 per_crowding_attribute_num_neighbors = 5;
  void clear_per_crowding_attribute_num_neighbors();
  static const int kPerCrowdingAttributeNumNeighborsFieldNumber = 5;
  ::google::protobuf::int32 per_crowding_attribute_num_neighbors() const;
  void set_per_crowding_attribute_num_neighbors(::google::protobuf::int32 value);

  // int32 approx_num_neighbors = 6;
  void clear_approx_num_neighbors();
  static const int kApproxNumNeighborsFieldNumber = 6;
  ::google::protobuf::int32 approx_num_neighbors() const;
  void set_approx_num_neighbors(::google::protobuf::int32 value);

  // int32 leaf_nodes_to_search_percent_override = 7;
  void clear_leaf_nodes_to_search_percent_override();
  static const int kLeafNodesToSearchPercentOverrideFieldNumber = 7;
  ::google::protobuf::int32 leaf_nodes_to_search_percent_override() const;
  void set_leaf_nodes_to_search_percent_override(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.MatchRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< float > float_val_;
  mutable std::atomic<int> _float_val_cached_byte_size_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace > restricts_;
  ::google::protobuf::internal::ArenaStringPtr deployed_index_id_;
  ::google::protobuf::int32 num_neighbors_;
  ::google::protobuf::int32 per_crowding_attribute_num_neighbors_;
  ::google::protobuf::int32 approx_num_neighbors_;
  ::google::protobuf::int32 leaf_nodes_to_search_percent_override_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MatchResponse_Neighbor final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor) */ {
 public:
  MatchResponse_Neighbor();
  virtual ~MatchResponse_Neighbor();

  MatchResponse_Neighbor(const MatchResponse_Neighbor& from);

  inline MatchResponse_Neighbor& operator=(const MatchResponse_Neighbor& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchResponse_Neighbor(MatchResponse_Neighbor&& from) noexcept
    : MatchResponse_Neighbor() {
    *this = ::std::move(from);
  }

  inline MatchResponse_Neighbor& operator=(MatchResponse_Neighbor&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatchResponse_Neighbor& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchResponse_Neighbor* internal_default_instance() {
    return reinterpret_cast<const MatchResponse_Neighbor*>(
               &_MatchResponse_Neighbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(MatchResponse_Neighbor* other);
  friend void swap(MatchResponse_Neighbor& a, MatchResponse_Neighbor& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchResponse_Neighbor* New() const final {
    return CreateMaybeMessage<MatchResponse_Neighbor>(nullptr);
  }

  MatchResponse_Neighbor* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchResponse_Neighbor>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchResponse_Neighbor& from);
  void MergeFrom(const MatchResponse_Neighbor& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchResponse_Neighbor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // double distance = 2;
  void clear_distance();
  static const int kDistanceFieldNumber = 2;
  double distance() const;
  void set_distance(double value);

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  double distance_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MatchResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.MatchResponse) */ {
 public:
  MatchResponse();
  virtual ~MatchResponse();

  MatchResponse(const MatchResponse& from);

  inline MatchResponse& operator=(const MatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MatchResponse(MatchResponse&& from) noexcept
    : MatchResponse() {
    *this = ::std::move(from);
  }

  inline MatchResponse& operator=(MatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const MatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MatchResponse* internal_default_instance() {
    return reinterpret_cast<const MatchResponse*>(
               &_MatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(MatchResponse* other);
  friend void swap(MatchResponse& a, MatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MatchResponse* New() const final {
    return CreateMaybeMessage<MatchResponse>(nullptr);
  }

  MatchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MatchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MatchResponse& from);
  void MergeFrom(const MatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MatchResponse_Neighbor Neighbor;

  // accessors -------------------------------------------------------

  // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor neighbor = 1;
  int neighbor_size() const;
  void clear_neighbor();
  static const int kNeighborFieldNumber = 1;
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* mutable_neighbor(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >*
      mutable_neighbor();
  const ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor& neighbor(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* add_neighbor();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >&
      neighbor() const;

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.MatchResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor > neighbor_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchMatchRequest_BatchMatchRequestPerIndex final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex) */ {
 public:
  BatchMatchRequest_BatchMatchRequestPerIndex();
  virtual ~BatchMatchRequest_BatchMatchRequestPerIndex();

  BatchMatchRequest_BatchMatchRequestPerIndex(const BatchMatchRequest_BatchMatchRequestPerIndex& from);

  inline BatchMatchRequest_BatchMatchRequestPerIndex& operator=(const BatchMatchRequest_BatchMatchRequestPerIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchMatchRequest_BatchMatchRequestPerIndex(BatchMatchRequest_BatchMatchRequestPerIndex&& from) noexcept
    : BatchMatchRequest_BatchMatchRequestPerIndex() {
    *this = ::std::move(from);
  }

  inline BatchMatchRequest_BatchMatchRequestPerIndex& operator=(BatchMatchRequest_BatchMatchRequestPerIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BatchMatchRequest_BatchMatchRequestPerIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchMatchRequest_BatchMatchRequestPerIndex* internal_default_instance() {
    return reinterpret_cast<const BatchMatchRequest_BatchMatchRequestPerIndex*>(
               &_BatchMatchRequest_BatchMatchRequestPerIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(BatchMatchRequest_BatchMatchRequestPerIndex* other);
  friend void swap(BatchMatchRequest_BatchMatchRequestPerIndex& a, BatchMatchRequest_BatchMatchRequestPerIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchMatchRequest_BatchMatchRequestPerIndex* New() const final {
    return CreateMaybeMessage<BatchMatchRequest_BatchMatchRequestPerIndex>(nullptr);
  }

  BatchMatchRequest_BatchMatchRequestPerIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchMatchRequest_BatchMatchRequestPerIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchMatchRequest_BatchMatchRequestPerIndex& from);
  void MergeFrom(const BatchMatchRequest_BatchMatchRequestPerIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchMatchRequest_BatchMatchRequestPerIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.aiplatform.container.v1beta1.MatchRequest requests = 2;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 2;
  ::google::cloud::aiplatform::container::v1beta1::MatchRequest* mutable_requests(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >*
      mutable_requests();
  const ::google::cloud::aiplatform::container::v1beta1::MatchRequest& requests(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::MatchRequest* add_requests();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >&
      requests() const;

  // string deployed_index_id = 1;
  void clear_deployed_index_id();
  static const int kDeployedIndexIdFieldNumber = 1;
  const ::std::string& deployed_index_id() const;
  void set_deployed_index_id(const ::std::string& value);
  #if LANG_CXX11
  void set_deployed_index_id(::std::string&& value);
  #endif
  void set_deployed_index_id(const char* value);
  void set_deployed_index_id(const char* value, size_t size);
  ::std::string* mutable_deployed_index_id();
  ::std::string* release_deployed_index_id();
  void set_allocated_deployed_index_id(::std::string* deployed_index_id);

  // int32 low_level_batch_size = 3;
  void clear_low_level_batch_size();
  static const int kLowLevelBatchSizeFieldNumber = 3;
  ::google::protobuf::int32 low_level_batch_size() const;
  void set_low_level_batch_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest > requests_;
  ::google::protobuf::internal::ArenaStringPtr deployed_index_id_;
  ::google::protobuf::int32 low_level_batch_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchMatchRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest) */ {
 public:
  BatchMatchRequest();
  virtual ~BatchMatchRequest();

  BatchMatchRequest(const BatchMatchRequest& from);

  inline BatchMatchRequest& operator=(const BatchMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchMatchRequest(BatchMatchRequest&& from) noexcept
    : BatchMatchRequest() {
    *this = ::std::move(from);
  }

  inline BatchMatchRequest& operator=(BatchMatchRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BatchMatchRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchMatchRequest* internal_default_instance() {
    return reinterpret_cast<const BatchMatchRequest*>(
               &_BatchMatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(BatchMatchRequest* other);
  friend void swap(BatchMatchRequest& a, BatchMatchRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchMatchRequest* New() const final {
    return CreateMaybeMessage<BatchMatchRequest>(nullptr);
  }

  BatchMatchRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchMatchRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchMatchRequest& from);
  void MergeFrom(const BatchMatchRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchMatchRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BatchMatchRequest_BatchMatchRequestPerIndex BatchMatchRequestPerIndex;

  // accessors -------------------------------------------------------

  // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex requests = 1;
  int requests_size() const;
  void clear_requests();
  static const int kRequestsFieldNumber = 1;
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* mutable_requests(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >*
      mutable_requests();
  const ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex& requests(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* add_requests();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >&
      requests() const;

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex > requests_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchMatchResponse_BatchMatchResponsePerIndex final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex) */ {
 public:
  BatchMatchResponse_BatchMatchResponsePerIndex();
  virtual ~BatchMatchResponse_BatchMatchResponsePerIndex();

  BatchMatchResponse_BatchMatchResponsePerIndex(const BatchMatchResponse_BatchMatchResponsePerIndex& from);

  inline BatchMatchResponse_BatchMatchResponsePerIndex& operator=(const BatchMatchResponse_BatchMatchResponsePerIndex& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchMatchResponse_BatchMatchResponsePerIndex(BatchMatchResponse_BatchMatchResponsePerIndex&& from) noexcept
    : BatchMatchResponse_BatchMatchResponsePerIndex() {
    *this = ::std::move(from);
  }

  inline BatchMatchResponse_BatchMatchResponsePerIndex& operator=(BatchMatchResponse_BatchMatchResponsePerIndex&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BatchMatchResponse_BatchMatchResponsePerIndex& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchMatchResponse_BatchMatchResponsePerIndex* internal_default_instance() {
    return reinterpret_cast<const BatchMatchResponse_BatchMatchResponsePerIndex*>(
               &_BatchMatchResponse_BatchMatchResponsePerIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(BatchMatchResponse_BatchMatchResponsePerIndex* other);
  friend void swap(BatchMatchResponse_BatchMatchResponsePerIndex& a, BatchMatchResponse_BatchMatchResponsePerIndex& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchMatchResponse_BatchMatchResponsePerIndex* New() const final {
    return CreateMaybeMessage<BatchMatchResponse_BatchMatchResponsePerIndex>(nullptr);
  }

  BatchMatchResponse_BatchMatchResponsePerIndex* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchMatchResponse_BatchMatchResponsePerIndex>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchMatchResponse_BatchMatchResponsePerIndex& from);
  void MergeFrom(const BatchMatchResponse_BatchMatchResponsePerIndex& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchMatchResponse_BatchMatchResponsePerIndex* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse responses = 2;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 2;
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse* mutable_responses(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >*
      mutable_responses();
  const ::google::cloud::aiplatform::container::v1beta1::MatchResponse& responses(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >&
      responses() const;

  // string deployed_index_id = 1;
  void clear_deployed_index_id();
  static const int kDeployedIndexIdFieldNumber = 1;
  const ::std::string& deployed_index_id() const;
  void set_deployed_index_id(const ::std::string& value);
  #if LANG_CXX11
  void set_deployed_index_id(::std::string&& value);
  #endif
  void set_deployed_index_id(const char* value);
  void set_deployed_index_id(const char* value, size_t size);
  ::std::string* mutable_deployed_index_id();
  ::std::string* release_deployed_index_id();
  void set_allocated_deployed_index_id(::std::string* deployed_index_id);

  // .google.rpc.Status status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::google::rpc::Status& status() const;
  ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse > responses_;
  ::google::protobuf::internal::ArenaStringPtr deployed_index_id_;
  ::google::rpc::Status* status_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchMatchResponse final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse) */ {
 public:
  BatchMatchResponse();
  virtual ~BatchMatchResponse();

  BatchMatchResponse(const BatchMatchResponse& from);

  inline BatchMatchResponse& operator=(const BatchMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BatchMatchResponse(BatchMatchResponse&& from) noexcept
    : BatchMatchResponse() {
    *this = ::std::move(from);
  }

  inline BatchMatchResponse& operator=(BatchMatchResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const BatchMatchResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BatchMatchResponse* internal_default_instance() {
    return reinterpret_cast<const BatchMatchResponse*>(
               &_BatchMatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(BatchMatchResponse* other);
  friend void swap(BatchMatchResponse& a, BatchMatchResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BatchMatchResponse* New() const final {
    return CreateMaybeMessage<BatchMatchResponse>(nullptr);
  }

  BatchMatchResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<BatchMatchResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const BatchMatchResponse& from);
  void MergeFrom(const BatchMatchResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchMatchResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BatchMatchResponse_BatchMatchResponsePerIndex BatchMatchResponsePerIndex;

  // accessors -------------------------------------------------------

  // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex responses = 1;
  int responses_size() const;
  void clear_responses();
  static const int kResponsesFieldNumber = 1;
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* mutable_responses(int index);
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >*
      mutable_responses();
  const ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex& responses(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* add_responses();
  const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >&
      responses() const;

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex > responses_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Namespace final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.Namespace) */ {
 public:
  Namespace();
  virtual ~Namespace();

  Namespace(const Namespace& from);

  inline Namespace& operator=(const Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Namespace(Namespace&& from) noexcept
    : Namespace() {
    *this = ::std::move(from);
  }

  inline Namespace& operator=(Namespace&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor() {
    return default_instance().GetDescriptor();
  }
  static const Namespace& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Namespace* internal_default_instance() {
    return reinterpret_cast<const Namespace*>(
               &_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(Namespace* other);
  friend void swap(Namespace& a, Namespace& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Namespace* New() const final {
    return CreateMaybeMessage<Namespace>(nullptr);
  }

  Namespace* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Namespace>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Namespace& from);
  void MergeFrom(const Namespace& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  static const char* _InternalParse(const char* begin, const char* end, void* object, ::google::protobuf::internal::ParseContext* ctx);
  ::google::protobuf::internal::ParseFunc _ParseFunc() const final { return _InternalParse; }
  #else
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Namespace* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string allow_tokens = 2;
  int allow_tokens_size() const;
  void clear_allow_tokens();
  static const int kAllowTokensFieldNumber = 2;
  const ::std::string& allow_tokens(int index) const;
  ::std::string* mutable_allow_tokens(int index);
  void set_allow_tokens(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_allow_tokens(int index, ::std::string&& value);
  #endif
  void set_allow_tokens(int index, const char* value);
  void set_allow_tokens(int index, const char* value, size_t size);
  ::std::string* add_allow_tokens();
  void add_allow_tokens(const ::std::string& value);
  #if LANG_CXX11
  void add_allow_tokens(::std::string&& value);
  #endif
  void add_allow_tokens(const char* value);
  void add_allow_tokens(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& allow_tokens() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_allow_tokens();

  // repeated string deny_tokens = 3;
  int deny_tokens_size() const;
  void clear_deny_tokens();
  static const int kDenyTokensFieldNumber = 3;
  const ::std::string& deny_tokens(int index) const;
  ::std::string* mutable_deny_tokens(int index);
  void set_deny_tokens(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_deny_tokens(int index, ::std::string&& value);
  #endif
  void set_deny_tokens(int index, const char* value);
  void set_deny_tokens(int index, const char* value, size_t size);
  ::std::string* add_deny_tokens();
  void add_deny_tokens(const ::std::string& value);
  #if LANG_CXX11
  void add_deny_tokens(::std::string&& value);
  #endif
  void add_deny_tokens(const char* value);
  void add_deny_tokens(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField<::std::string>& deny_tokens() const;
  ::google::protobuf::RepeatedPtrField<::std::string>* mutable_deny_tokens();

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.Namespace)
 private:
  class HasBitSetters;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField<::std::string> allow_tokens_;
  ::google::protobuf::RepeatedPtrField<::std::string> deny_tokens_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_match_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatchRequest

// string deployed_index_id = 1;
inline void MatchRequest::clear_deployed_index_id() {
  deployed_index_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchRequest::deployed_index_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
  return deployed_index_id_.GetNoArena();
}
inline void MatchRequest::set_deployed_index_id(const ::std::string& value) {
  
  deployed_index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
}
#if LANG_CXX11
inline void MatchRequest::set_deployed_index_id(::std::string&& value) {
  
  deployed_index_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
}
#endif
inline void MatchRequest::set_deployed_index_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployed_index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
}
inline void MatchRequest::set_deployed_index_id(const char* value, size_t size) {
  
  deployed_index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
}
inline ::std::string* MatchRequest::mutable_deployed_index_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
  return deployed_index_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchRequest::release_deployed_index_id() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
  
  return deployed_index_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchRequest::set_allocated_deployed_index_id(::std::string* deployed_index_id) {
  if (deployed_index_id != nullptr) {
    
  } else {
    
  }
  deployed_index_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deployed_index_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
}

// repeated float float_val = 2;
inline int MatchRequest::float_val_size() const {
  return float_val_.size();
}
inline void MatchRequest::clear_float_val() {
  float_val_.Clear();
}
inline float MatchRequest::float_val(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
  return float_val_.Get(index);
}
inline void MatchRequest::set_float_val(int index, float value) {
  float_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
}
inline void MatchRequest::add_float_val(float value) {
  float_val_.Add(value);
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
}
inline const ::google::protobuf::RepeatedField< float >&
MatchRequest::float_val() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
  return float_val_;
}
inline ::google::protobuf::RepeatedField< float >*
MatchRequest::mutable_float_val() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
  return &float_val_;
}

// int32 num_neighbors = 3;
inline void MatchRequest::clear_num_neighbors() {
  num_neighbors_ = 0;
}
inline ::google::protobuf::int32 MatchRequest::num_neighbors() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.num_neighbors)
  return num_neighbors_;
}
inline void MatchRequest::set_num_neighbors(::google::protobuf::int32 value) {
  
  num_neighbors_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.num_neighbors)
}

// repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;
inline int MatchRequest::restricts_size() const {
  return restricts_.size();
}
inline void MatchRequest::clear_restricts() {
  restricts_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::Namespace* MatchRequest::mutable_restricts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return restricts_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace >*
MatchRequest::mutable_restricts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return &restricts_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::Namespace& MatchRequest::restricts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return restricts_.Get(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::Namespace* MatchRequest::add_restricts() {
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return restricts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace >&
MatchRequest::restricts() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return restricts_;
}

// int32 per_crowding_attribute_num_neighbors = 5;
inline void MatchRequest::clear_per_crowding_attribute_num_neighbors() {
  per_crowding_attribute_num_neighbors_ = 0;
}
inline ::google::protobuf::int32 MatchRequest::per_crowding_attribute_num_neighbors() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.per_crowding_attribute_num_neighbors)
  return per_crowding_attribute_num_neighbors_;
}
inline void MatchRequest::set_per_crowding_attribute_num_neighbors(::google::protobuf::int32 value) {
  
  per_crowding_attribute_num_neighbors_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.per_crowding_attribute_num_neighbors)
}

// int32 approx_num_neighbors = 6;
inline void MatchRequest::clear_approx_num_neighbors() {
  approx_num_neighbors_ = 0;
}
inline ::google::protobuf::int32 MatchRequest::approx_num_neighbors() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.approx_num_neighbors)
  return approx_num_neighbors_;
}
inline void MatchRequest::set_approx_num_neighbors(::google::protobuf::int32 value) {
  
  approx_num_neighbors_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.approx_num_neighbors)
}

// int32 leaf_nodes_to_search_percent_override = 7;
inline void MatchRequest::clear_leaf_nodes_to_search_percent_override() {
  leaf_nodes_to_search_percent_override_ = 0;
}
inline ::google::protobuf::int32 MatchRequest::leaf_nodes_to_search_percent_override() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.leaf_nodes_to_search_percent_override)
  return leaf_nodes_to_search_percent_override_;
}
inline void MatchRequest::set_leaf_nodes_to_search_percent_override(::google::protobuf::int32 value) {
  
  leaf_nodes_to_search_percent_override_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.leaf_nodes_to_search_percent_override)
}

// -------------------------------------------------------------------

// MatchResponse_Neighbor

// string id = 1;
inline void MatchResponse_Neighbor::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MatchResponse_Neighbor::id() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
  return id_.GetNoArena();
}
inline void MatchResponse_Neighbor::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
}
#if LANG_CXX11
inline void MatchResponse_Neighbor::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
}
#endif
inline void MatchResponse_Neighbor::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
}
inline void MatchResponse_Neighbor::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
}
inline ::std::string* MatchResponse_Neighbor::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MatchResponse_Neighbor::release_id() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MatchResponse_Neighbor::set_allocated_id(::std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
}

// double distance = 2;
inline void MatchResponse_Neighbor::clear_distance() {
  distance_ = 0;
}
inline double MatchResponse_Neighbor::distance() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.distance)
  return distance_;
}
inline void MatchResponse_Neighbor::set_distance(double value) {
  
  distance_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.distance)
}

// -------------------------------------------------------------------

// MatchResponse

// repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor neighbor = 1;
inline int MatchResponse::neighbor_size() const {
  return neighbor_.size();
}
inline void MatchResponse::clear_neighbor() {
  neighbor_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* MatchResponse::mutable_neighbor(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return neighbor_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >*
MatchResponse::mutable_neighbor() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return &neighbor_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor& MatchResponse::neighbor(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return neighbor_.Get(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* MatchResponse::add_neighbor() {
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return neighbor_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >&
MatchResponse::neighbor() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return neighbor_;
}

// -------------------------------------------------------------------

// BatchMatchRequest_BatchMatchRequestPerIndex

// string deployed_index_id = 1;
inline void BatchMatchRequest_BatchMatchRequestPerIndex::clear_deployed_index_id() {
  deployed_index_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchMatchRequest_BatchMatchRequestPerIndex::deployed_index_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
  return deployed_index_id_.GetNoArena();
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::set_deployed_index_id(const ::std::string& value) {
  
  deployed_index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
}
#if LANG_CXX11
inline void BatchMatchRequest_BatchMatchRequestPerIndex::set_deployed_index_id(::std::string&& value) {
  
  deployed_index_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
}
#endif
inline void BatchMatchRequest_BatchMatchRequestPerIndex::set_deployed_index_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployed_index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::set_deployed_index_id(const char* value, size_t size) {
  
  deployed_index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
}
inline ::std::string* BatchMatchRequest_BatchMatchRequestPerIndex::mutable_deployed_index_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
  return deployed_index_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchMatchRequest_BatchMatchRequestPerIndex::release_deployed_index_id() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
  
  return deployed_index_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::set_allocated_deployed_index_id(::std::string* deployed_index_id) {
  if (deployed_index_id != nullptr) {
    
  } else {
    
  }
  deployed_index_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deployed_index_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
}

// repeated .google.cloud.aiplatform.container.v1beta1.MatchRequest requests = 2;
inline int BatchMatchRequest_BatchMatchRequestPerIndex::requests_size() const {
  return requests_.size();
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::clear_requests() {
  requests_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchRequest* BatchMatchRequest_BatchMatchRequestPerIndex::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return requests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >*
BatchMatchRequest_BatchMatchRequestPerIndex::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return &requests_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::MatchRequest& BatchMatchRequest_BatchMatchRequestPerIndex::requests(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return requests_.Get(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchRequest* BatchMatchRequest_BatchMatchRequestPerIndex::add_requests() {
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >&
BatchMatchRequest_BatchMatchRequestPerIndex::requests() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return requests_;
}

// int32 low_level_batch_size = 3;
inline void BatchMatchRequest_BatchMatchRequestPerIndex::clear_low_level_batch_size() {
  low_level_batch_size_ = 0;
}
inline ::google::protobuf::int32 BatchMatchRequest_BatchMatchRequestPerIndex::low_level_batch_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.low_level_batch_size)
  return low_level_batch_size_;
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::set_low_level_batch_size(::google::protobuf::int32 value) {
  
  low_level_batch_size_ = value;
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.low_level_batch_size)
}

// -------------------------------------------------------------------

// BatchMatchRequest

// repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex requests = 1;
inline int BatchMatchRequest::requests_size() const {
  return requests_.size();
}
inline void BatchMatchRequest::clear_requests() {
  requests_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* BatchMatchRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return requests_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >*
BatchMatchRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return &requests_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex& BatchMatchRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return requests_.Get(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* BatchMatchRequest::add_requests() {
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return requests_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >&
BatchMatchRequest::requests() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// BatchMatchResponse_BatchMatchResponsePerIndex

// string deployed_index_id = 1;
inline void BatchMatchResponse_BatchMatchResponsePerIndex::clear_deployed_index_id() {
  deployed_index_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BatchMatchResponse_BatchMatchResponsePerIndex::deployed_index_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
  return deployed_index_id_.GetNoArena();
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::set_deployed_index_id(const ::std::string& value) {
  
  deployed_index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
}
#if LANG_CXX11
inline void BatchMatchResponse_BatchMatchResponsePerIndex::set_deployed_index_id(::std::string&& value) {
  
  deployed_index_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
}
#endif
inline void BatchMatchResponse_BatchMatchResponsePerIndex::set_deployed_index_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deployed_index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::set_deployed_index_id(const char* value, size_t size) {
  
  deployed_index_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
}
inline ::std::string* BatchMatchResponse_BatchMatchResponsePerIndex::mutable_deployed_index_id() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
  return deployed_index_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BatchMatchResponse_BatchMatchResponsePerIndex::release_deployed_index_id() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
  
  return deployed_index_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::set_allocated_deployed_index_id(::std::string* deployed_index_id) {
  if (deployed_index_id != nullptr) {
    
  } else {
    
  }
  deployed_index_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), deployed_index_id);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
}

// repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse responses = 2;
inline int BatchMatchResponse_BatchMatchResponsePerIndex::responses_size() const {
  return responses_.size();
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::clear_responses() {
  responses_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse* BatchMatchResponse_BatchMatchResponsePerIndex::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return responses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >*
BatchMatchResponse_BatchMatchResponsePerIndex::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return &responses_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::MatchResponse& BatchMatchResponse_BatchMatchResponsePerIndex::responses(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return responses_.Get(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse* BatchMatchResponse_BatchMatchResponsePerIndex::add_responses() {
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >&
BatchMatchResponse_BatchMatchResponsePerIndex::responses() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return responses_;
}

// .google.rpc.Status status = 3;
inline bool BatchMatchResponse_BatchMatchResponsePerIndex::has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline const ::google::rpc::Status& BatchMatchResponse_BatchMatchResponsePerIndex::status() const {
  const ::google::rpc::Status* p = status_;
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.status)
  return p != nullptr ? *p : *reinterpret_cast<const ::google::rpc::Status*>(
      &::google::rpc::_Status_default_instance_);
}
inline ::google::rpc::Status* BatchMatchResponse_BatchMatchResponsePerIndex::release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* BatchMatchResponse_BatchMatchResponsePerIndex::mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.status)
  return status_;
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::set_allocated_status(::google::rpc::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena =
      reinterpret_cast<::google::protobuf::MessageLite*>(status)->GetArena();
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.status)
}

// -------------------------------------------------------------------

// BatchMatchResponse

// repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex responses = 1;
inline int BatchMatchResponse::responses_size() const {
  return responses_.size();
}
inline void BatchMatchResponse::clear_responses() {
  responses_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* BatchMatchResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return responses_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >*
BatchMatchResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return &responses_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex& BatchMatchResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return responses_.Get(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* BatchMatchResponse::add_responses() {
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return responses_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >&
BatchMatchResponse::responses() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// Namespace

// string name = 1;
inline void Namespace::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Namespace::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.Namespace.name)
  return name_.GetNoArena();
}
inline void Namespace::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.name)
}
#if LANG_CXX11
inline void Namespace::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:google.cloud.aiplatform.container.v1beta1.Namespace.name)
}
#endif
inline void Namespace::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:google.cloud.aiplatform.container.v1beta1.Namespace.name)
}
inline void Namespace::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:google.cloud.aiplatform.container.v1beta1.Namespace.name)
}
inline ::std::string* Namespace::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Namespace::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.Namespace.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Namespace::set_allocated_name(::std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.Namespace.name)
}

// repeated string allow_tokens = 2;
inline int Namespace::allow_tokens_size() const {
  return allow_tokens_.size();
}
inline void Namespace::clear_allow_tokens() {
  allow_tokens_.Clear();
}
inline const ::std::string& Namespace::allow_tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return allow_tokens_.Get(index);
}
inline ::std::string* Namespace::mutable_allow_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return allow_tokens_.Mutable(index);
}
inline void Namespace::set_allow_tokens(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  allow_tokens_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Namespace::set_allow_tokens(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  allow_tokens_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Namespace::set_allow_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allow_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline void Namespace::set_allow_tokens(int index, const char* value, size_t size) {
  allow_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline ::std::string* Namespace::add_allow_tokens() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return allow_tokens_.Add();
}
inline void Namespace::add_allow_tokens(const ::std::string& value) {
  allow_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
#if LANG_CXX11
inline void Namespace::add_allow_tokens(::std::string&& value) {
  allow_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
#endif
inline void Namespace::add_allow_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allow_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline void Namespace::add_allow_tokens(const char* value, size_t size) {
  allow_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Namespace::allow_tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return allow_tokens_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Namespace::mutable_allow_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return &allow_tokens_;
}

// repeated string deny_tokens = 3;
inline int Namespace::deny_tokens_size() const {
  return deny_tokens_.size();
}
inline void Namespace::clear_deny_tokens() {
  deny_tokens_.Clear();
}
inline const ::std::string& Namespace::deny_tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return deny_tokens_.Get(index);
}
inline ::std::string* Namespace::mutable_deny_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return deny_tokens_.Mutable(index);
}
inline void Namespace::set_deny_tokens(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  deny_tokens_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void Namespace::set_deny_tokens(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  deny_tokens_.Mutable(index)->assign(std::move(value));
}
#endif
inline void Namespace::set_deny_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deny_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline void Namespace::set_deny_tokens(int index, const char* value, size_t size) {
  deny_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline ::std::string* Namespace::add_deny_tokens() {
  // @@protoc_insertion_point(field_add_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return deny_tokens_.Add();
}
inline void Namespace::add_deny_tokens(const ::std::string& value) {
  deny_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
#if LANG_CXX11
inline void Namespace::add_deny_tokens(::std::string&& value) {
  deny_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
#endif
inline void Namespace::add_deny_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deny_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline void Namespace::add_deny_tokens(const char* value, size_t size) {
  deny_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline const ::google::protobuf::RepeatedPtrField<::std::string>&
Namespace::deny_tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return deny_tokens_;
}
inline ::google::protobuf::RepeatedPtrField<::std::string>*
Namespace::mutable_deny_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return &deny_tokens_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace container
}  // namespace aiplatform
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // PROTOBUF_INCLUDED_match_5fservice_2eproto
