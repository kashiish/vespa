// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: thirdparty/googleapis/match_service.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "google/rpc/status.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[8]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
namespace google {
namespace cloud {
namespace aiplatform {
namespace container {
namespace v1beta1 {
class BatchMatchRequest;
struct BatchMatchRequestDefaultTypeInternal;
extern BatchMatchRequestDefaultTypeInternal _BatchMatchRequest_default_instance_;
class BatchMatchRequest_BatchMatchRequestPerIndex;
struct BatchMatchRequest_BatchMatchRequestPerIndexDefaultTypeInternal;
extern BatchMatchRequest_BatchMatchRequestPerIndexDefaultTypeInternal _BatchMatchRequest_BatchMatchRequestPerIndex_default_instance_;
class BatchMatchResponse;
struct BatchMatchResponseDefaultTypeInternal;
extern BatchMatchResponseDefaultTypeInternal _BatchMatchResponse_default_instance_;
class BatchMatchResponse_BatchMatchResponsePerIndex;
struct BatchMatchResponse_BatchMatchResponsePerIndexDefaultTypeInternal;
extern BatchMatchResponse_BatchMatchResponsePerIndexDefaultTypeInternal _BatchMatchResponse_BatchMatchResponsePerIndex_default_instance_;
class MatchRequest;
struct MatchRequestDefaultTypeInternal;
extern MatchRequestDefaultTypeInternal _MatchRequest_default_instance_;
class MatchResponse;
struct MatchResponseDefaultTypeInternal;
extern MatchResponseDefaultTypeInternal _MatchResponse_default_instance_;
class MatchResponse_Neighbor;
struct MatchResponse_NeighborDefaultTypeInternal;
extern MatchResponse_NeighborDefaultTypeInternal _MatchResponse_Neighbor_default_instance_;
class Namespace;
struct NamespaceDefaultTypeInternal;
extern NamespaceDefaultTypeInternal _Namespace_default_instance_;
}  // namespace v1beta1
}  // namespace container
}  // namespace aiplatform
}  // namespace cloud
}  // namespace google
PROTOBUF_NAMESPACE_OPEN
template<> ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::MatchRequest* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::MatchRequest>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::MatchResponse* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::MatchResponse>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor>(Arena*);
template<> ::google::cloud::aiplatform::container::v1beta1::Namespace* Arena::CreateMaybeMessage<::google::cloud::aiplatform::container::v1beta1::Namespace>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace google {
namespace cloud {
namespace aiplatform {
namespace container {
namespace v1beta1 {

// ===================================================================

class MatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.MatchRequest) */ {
 public:
  inline MatchRequest() : MatchRequest(nullptr) {}
  ~MatchRequest() override;
  explicit constexpr MatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchRequest(const MatchRequest& from);
  MatchRequest(MatchRequest&& from) noexcept
    : MatchRequest() {
    *this = ::std::move(from);
  }

  inline MatchRequest& operator=(const MatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchRequest& operator=(MatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchRequest* internal_default_instance() {
    return reinterpret_cast<const MatchRequest*>(
               &_MatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MatchRequest& a, MatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchRequest* New() const final {
    return new MatchRequest();
  }

  MatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MatchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.aiplatform.container.v1beta1.MatchRequest";
  }
  protected:
  explicit MatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFloatValFieldNumber = 2,
    kRestrictsFieldNumber = 4,
    kDeployedIndexIdFieldNumber = 1,
    kNumNeighborsFieldNumber = 3,
    kPerCrowdingAttributeNumNeighborsFieldNumber = 5,
    kApproxNumNeighborsFieldNumber = 6,
    kLeafNodesToSearchPercentOverrideFieldNumber = 7,
  };
  // repeated float float_val = 2;
  int float_val_size() const;
  private:
  int _internal_float_val_size() const;
  public:
  void clear_float_val();
  private:
  float _internal_float_val(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_float_val() const;
  void _internal_add_float_val(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_float_val();
  public:
  float float_val(int index) const;
  void set_float_val(int index, float value);
  void add_float_val(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      float_val() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_float_val();

  // repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;
  int restricts_size() const;
  private:
  int _internal_restricts_size() const;
  public:
  void clear_restricts();
  ::google::cloud::aiplatform::container::v1beta1::Namespace* mutable_restricts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace >*
      mutable_restricts();
  private:
  const ::google::cloud::aiplatform::container::v1beta1::Namespace& _internal_restricts(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::Namespace* _internal_add_restricts();
  public:
  const ::google::cloud::aiplatform::container::v1beta1::Namespace& restricts(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::Namespace* add_restricts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace >&
      restricts() const;

  // string deployed_index_id = 1;
  void clear_deployed_index_id();
  const std::string& deployed_index_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deployed_index_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deployed_index_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_deployed_index_id();
  void set_allocated_deployed_index_id(std::string* deployed_index_id);
  private:
  const std::string& _internal_deployed_index_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deployed_index_id(const std::string& value);
  std::string* _internal_mutable_deployed_index_id();
  public:

  // int32 num_neighbors = 3;
  void clear_num_neighbors();
  ::PROTOBUF_NAMESPACE_ID::int32 num_neighbors() const;
  void set_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_num_neighbors() const;
  void _internal_set_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 per_crowding_attribute_num_neighbors = 5;
  void clear_per_crowding_attribute_num_neighbors();
  ::PROTOBUF_NAMESPACE_ID::int32 per_crowding_attribute_num_neighbors() const;
  void set_per_crowding_attribute_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_per_crowding_attribute_num_neighbors() const;
  void _internal_set_per_crowding_attribute_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 approx_num_neighbors = 6;
  void clear_approx_num_neighbors();
  ::PROTOBUF_NAMESPACE_ID::int32 approx_num_neighbors() const;
  void set_approx_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_approx_num_neighbors() const;
  void _internal_set_approx_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 leaf_nodes_to_search_percent_override = 7;
  void clear_leaf_nodes_to_search_percent_override();
  ::PROTOBUF_NAMESPACE_ID::int32 leaf_nodes_to_search_percent_override() const;
  void set_leaf_nodes_to_search_percent_override(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_leaf_nodes_to_search_percent_override() const;
  void _internal_set_leaf_nodes_to_search_percent_override(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.MatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > float_val_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace > restricts_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployed_index_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 num_neighbors_;
  ::PROTOBUF_NAMESPACE_ID::int32 per_crowding_attribute_num_neighbors_;
  ::PROTOBUF_NAMESPACE_ID::int32 approx_num_neighbors_;
  ::PROTOBUF_NAMESPACE_ID::int32 leaf_nodes_to_search_percent_override_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MatchResponse_Neighbor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor) */ {
 public:
  inline MatchResponse_Neighbor() : MatchResponse_Neighbor(nullptr) {}
  ~MatchResponse_Neighbor() override;
  explicit constexpr MatchResponse_Neighbor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchResponse_Neighbor(const MatchResponse_Neighbor& from);
  MatchResponse_Neighbor(MatchResponse_Neighbor&& from) noexcept
    : MatchResponse_Neighbor() {
    *this = ::std::move(from);
  }

  inline MatchResponse_Neighbor& operator=(const MatchResponse_Neighbor& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchResponse_Neighbor& operator=(MatchResponse_Neighbor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchResponse_Neighbor& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchResponse_Neighbor* internal_default_instance() {
    return reinterpret_cast<const MatchResponse_Neighbor*>(
               &_MatchResponse_Neighbor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MatchResponse_Neighbor& a, MatchResponse_Neighbor& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchResponse_Neighbor* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchResponse_Neighbor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchResponse_Neighbor* New() const final {
    return new MatchResponse_Neighbor();
  }

  MatchResponse_Neighbor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchResponse_Neighbor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchResponse_Neighbor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MatchResponse_Neighbor& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchResponse_Neighbor* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor";
  }
  protected:
  explicit MatchResponse_Neighbor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kDistanceFieldNumber = 2,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // double distance = 2;
  void clear_distance();
  double distance() const;
  void set_distance(double value);
  private:
  double _internal_distance() const;
  void _internal_set_distance(double value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  double distance_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
};
// -------------------------------------------------------------------

class MatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.MatchResponse) */ {
 public:
  inline MatchResponse() : MatchResponse(nullptr) {}
  ~MatchResponse() override;
  explicit constexpr MatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MatchResponse(const MatchResponse& from);
  MatchResponse(MatchResponse&& from) noexcept
    : MatchResponse() {
    *this = ::std::move(from);
  }

  inline MatchResponse& operator=(const MatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MatchResponse& operator=(MatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const MatchResponse* internal_default_instance() {
    return reinterpret_cast<const MatchResponse*>(
               &_MatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(MatchResponse& a, MatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MatchResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MatchResponse* New() const final {
    return new MatchResponse();
  }

  MatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const MatchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const MatchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.aiplatform.container.v1beta1.MatchResponse";
  }
  protected:
  explicit MatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef MatchResponse_Neighbor Neighbor;

  // accessors -------------------------------------------------------

  enum : int {
    kNeighborFieldNumber = 1,
  };
  // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor neighbor = 1;
  int neighbor_size() const;
  private:
  int _internal_neighbor_size() const;
  public:
  void clear_neighbor();
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* mutable_neighbor(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >*
      mutable_neighbor();
  private:
  const ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor& _internal_neighbor(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* _internal_add_neighbor();
  public:
  const ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor& neighbor(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* add_neighbor();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >&
      neighbor() const;

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.MatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor > neighbor_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchMatchRequest_BatchMatchRequestPerIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex) */ {
 public:
  inline BatchMatchRequest_BatchMatchRequestPerIndex() : BatchMatchRequest_BatchMatchRequestPerIndex(nullptr) {}
  ~BatchMatchRequest_BatchMatchRequestPerIndex() override;
  explicit constexpr BatchMatchRequest_BatchMatchRequestPerIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchMatchRequest_BatchMatchRequestPerIndex(const BatchMatchRequest_BatchMatchRequestPerIndex& from);
  BatchMatchRequest_BatchMatchRequestPerIndex(BatchMatchRequest_BatchMatchRequestPerIndex&& from) noexcept
    : BatchMatchRequest_BatchMatchRequestPerIndex() {
    *this = ::std::move(from);
  }

  inline BatchMatchRequest_BatchMatchRequestPerIndex& operator=(const BatchMatchRequest_BatchMatchRequestPerIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchMatchRequest_BatchMatchRequestPerIndex& operator=(BatchMatchRequest_BatchMatchRequestPerIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchMatchRequest_BatchMatchRequestPerIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchMatchRequest_BatchMatchRequestPerIndex* internal_default_instance() {
    return reinterpret_cast<const BatchMatchRequest_BatchMatchRequestPerIndex*>(
               &_BatchMatchRequest_BatchMatchRequestPerIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BatchMatchRequest_BatchMatchRequestPerIndex& a, BatchMatchRequest_BatchMatchRequestPerIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchMatchRequest_BatchMatchRequestPerIndex* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchMatchRequest_BatchMatchRequestPerIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchMatchRequest_BatchMatchRequestPerIndex* New() const final {
    return new BatchMatchRequest_BatchMatchRequestPerIndex();
  }

  BatchMatchRequest_BatchMatchRequestPerIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchMatchRequest_BatchMatchRequestPerIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchMatchRequest_BatchMatchRequestPerIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchMatchRequest_BatchMatchRequestPerIndex& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchMatchRequest_BatchMatchRequestPerIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex";
  }
  protected:
  explicit BatchMatchRequest_BatchMatchRequestPerIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 2,
    kDeployedIndexIdFieldNumber = 1,
    kLowLevelBatchSizeFieldNumber = 3,
  };
  // repeated .google.cloud.aiplatform.container.v1beta1.MatchRequest requests = 2;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::google::cloud::aiplatform::container::v1beta1::MatchRequest* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >*
      mutable_requests();
  private:
  const ::google::cloud::aiplatform::container::v1beta1::MatchRequest& _internal_requests(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::MatchRequest* _internal_add_requests();
  public:
  const ::google::cloud::aiplatform::container::v1beta1::MatchRequest& requests(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::MatchRequest* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >&
      requests() const;

  // string deployed_index_id = 1;
  void clear_deployed_index_id();
  const std::string& deployed_index_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deployed_index_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deployed_index_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_deployed_index_id();
  void set_allocated_deployed_index_id(std::string* deployed_index_id);
  private:
  const std::string& _internal_deployed_index_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deployed_index_id(const std::string& value);
  std::string* _internal_mutable_deployed_index_id();
  public:

  // int32 low_level_batch_size = 3;
  void clear_low_level_batch_size();
  ::PROTOBUF_NAMESPACE_ID::int32 low_level_batch_size() const;
  void set_low_level_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_low_level_batch_size() const;
  void _internal_set_low_level_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest > requests_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployed_index_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 low_level_batch_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchMatchRequest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest) */ {
 public:
  inline BatchMatchRequest() : BatchMatchRequest(nullptr) {}
  ~BatchMatchRequest() override;
  explicit constexpr BatchMatchRequest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchMatchRequest(const BatchMatchRequest& from);
  BatchMatchRequest(BatchMatchRequest&& from) noexcept
    : BatchMatchRequest() {
    *this = ::std::move(from);
  }

  inline BatchMatchRequest& operator=(const BatchMatchRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchMatchRequest& operator=(BatchMatchRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchMatchRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchMatchRequest* internal_default_instance() {
    return reinterpret_cast<const BatchMatchRequest*>(
               &_BatchMatchRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BatchMatchRequest& a, BatchMatchRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchMatchRequest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchMatchRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchMatchRequest* New() const final {
    return new BatchMatchRequest();
  }

  BatchMatchRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchMatchRequest>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchMatchRequest& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchMatchRequest& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchMatchRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.aiplatform.container.v1beta1.BatchMatchRequest";
  }
  protected:
  explicit BatchMatchRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BatchMatchRequest_BatchMatchRequestPerIndex BatchMatchRequestPerIndex;

  // accessors -------------------------------------------------------

  enum : int {
    kRequestsFieldNumber = 1,
  };
  // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex requests = 1;
  int requests_size() const;
  private:
  int _internal_requests_size() const;
  public:
  void clear_requests();
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* mutable_requests(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >*
      mutable_requests();
  private:
  const ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex& _internal_requests(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* _internal_add_requests();
  public:
  const ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex& requests(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* add_requests();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >&
      requests() const;

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex > requests_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchMatchResponse_BatchMatchResponsePerIndex final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex) */ {
 public:
  inline BatchMatchResponse_BatchMatchResponsePerIndex() : BatchMatchResponse_BatchMatchResponsePerIndex(nullptr) {}
  ~BatchMatchResponse_BatchMatchResponsePerIndex() override;
  explicit constexpr BatchMatchResponse_BatchMatchResponsePerIndex(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchMatchResponse_BatchMatchResponsePerIndex(const BatchMatchResponse_BatchMatchResponsePerIndex& from);
  BatchMatchResponse_BatchMatchResponsePerIndex(BatchMatchResponse_BatchMatchResponsePerIndex&& from) noexcept
    : BatchMatchResponse_BatchMatchResponsePerIndex() {
    *this = ::std::move(from);
  }

  inline BatchMatchResponse_BatchMatchResponsePerIndex& operator=(const BatchMatchResponse_BatchMatchResponsePerIndex& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchMatchResponse_BatchMatchResponsePerIndex& operator=(BatchMatchResponse_BatchMatchResponsePerIndex&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchMatchResponse_BatchMatchResponsePerIndex& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchMatchResponse_BatchMatchResponsePerIndex* internal_default_instance() {
    return reinterpret_cast<const BatchMatchResponse_BatchMatchResponsePerIndex*>(
               &_BatchMatchResponse_BatchMatchResponsePerIndex_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BatchMatchResponse_BatchMatchResponsePerIndex& a, BatchMatchResponse_BatchMatchResponsePerIndex& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchMatchResponse_BatchMatchResponsePerIndex* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchMatchResponse_BatchMatchResponsePerIndex* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchMatchResponse_BatchMatchResponsePerIndex* New() const final {
    return new BatchMatchResponse_BatchMatchResponsePerIndex();
  }

  BatchMatchResponse_BatchMatchResponsePerIndex* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchMatchResponse_BatchMatchResponsePerIndex>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchMatchResponse_BatchMatchResponsePerIndex& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchMatchResponse_BatchMatchResponsePerIndex& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchMatchResponse_BatchMatchResponsePerIndex* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex";
  }
  protected:
  explicit BatchMatchResponse_BatchMatchResponsePerIndex(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 2,
    kDeployedIndexIdFieldNumber = 1,
    kStatusFieldNumber = 3,
  };
  // repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse responses = 2;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >*
      mutable_responses();
  private:
  const ::google::cloud::aiplatform::container::v1beta1::MatchResponse& _internal_responses(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse* _internal_add_responses();
  public:
  const ::google::cloud::aiplatform::container::v1beta1::MatchResponse& responses(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >&
      responses() const;

  // string deployed_index_id = 1;
  void clear_deployed_index_id();
  const std::string& deployed_index_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_deployed_index_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_deployed_index_id();
  PROTOBUF_MUST_USE_RESULT std::string* release_deployed_index_id();
  void set_allocated_deployed_index_id(std::string* deployed_index_id);
  private:
  const std::string& _internal_deployed_index_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_deployed_index_id(const std::string& value);
  std::string* _internal_mutable_deployed_index_id();
  public:

  // .google.rpc.Status status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  const ::google::rpc::Status& status() const;
  PROTOBUF_MUST_USE_RESULT ::google::rpc::Status* release_status();
  ::google::rpc::Status* mutable_status();
  void set_allocated_status(::google::rpc::Status* status);
  private:
  const ::google::rpc::Status& _internal_status() const;
  ::google::rpc::Status* _internal_mutable_status();
  public:
  void unsafe_arena_set_allocated_status(
      ::google::rpc::Status* status);
  ::google::rpc::Status* unsafe_arena_release_status();

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse > responses_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deployed_index_id_;
  ::google::rpc::Status* status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
};
// -------------------------------------------------------------------

class BatchMatchResponse final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse) */ {
 public:
  inline BatchMatchResponse() : BatchMatchResponse(nullptr) {}
  ~BatchMatchResponse() override;
  explicit constexpr BatchMatchResponse(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BatchMatchResponse(const BatchMatchResponse& from);
  BatchMatchResponse(BatchMatchResponse&& from) noexcept
    : BatchMatchResponse() {
    *this = ::std::move(from);
  }

  inline BatchMatchResponse& operator=(const BatchMatchResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline BatchMatchResponse& operator=(BatchMatchResponse&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BatchMatchResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const BatchMatchResponse* internal_default_instance() {
    return reinterpret_cast<const BatchMatchResponse*>(
               &_BatchMatchResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BatchMatchResponse& a, BatchMatchResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(BatchMatchResponse* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BatchMatchResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BatchMatchResponse* New() const final {
    return new BatchMatchResponse();
  }

  BatchMatchResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BatchMatchResponse>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const BatchMatchResponse& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const BatchMatchResponse& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BatchMatchResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.aiplatform.container.v1beta1.BatchMatchResponse";
  }
  protected:
  explicit BatchMatchResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef BatchMatchResponse_BatchMatchResponsePerIndex BatchMatchResponsePerIndex;

  // accessors -------------------------------------------------------

  enum : int {
    kResponsesFieldNumber = 1,
  };
  // repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex responses = 1;
  int responses_size() const;
  private:
  int _internal_responses_size() const;
  public:
  void clear_responses();
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* mutable_responses(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >*
      mutable_responses();
  private:
  const ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex& _internal_responses(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* _internal_add_responses();
  public:
  const ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex& responses(int index) const;
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* add_responses();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >&
      responses() const;

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex > responses_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
};
// -------------------------------------------------------------------

class Namespace final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:google.cloud.aiplatform.container.v1beta1.Namespace) */ {
 public:
  inline Namespace() : Namespace(nullptr) {}
  ~Namespace() override;
  explicit constexpr Namespace(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Namespace(const Namespace& from);
  Namespace(Namespace&& from) noexcept
    : Namespace() {
    *this = ::std::move(from);
  }

  inline Namespace& operator=(const Namespace& from) {
    CopyFrom(from);
    return *this;
  }
  inline Namespace& operator=(Namespace&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Namespace& default_instance() {
    return *internal_default_instance();
  }
  static inline const Namespace* internal_default_instance() {
    return reinterpret_cast<const Namespace*>(
               &_Namespace_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Namespace& a, Namespace& b) {
    a.Swap(&b);
  }
  inline void Swap(Namespace* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Namespace* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Namespace* New() const final {
    return new Namespace();
  }

  Namespace* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Namespace>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Namespace& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Namespace& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to, const ::PROTOBUF_NAMESPACE_ID::Message&from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Namespace* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "google.cloud.aiplatform.container.v1beta1.Namespace";
  }
  protected:
  explicit Namespace(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAllowTokensFieldNumber = 2,
    kDenyTokensFieldNumber = 3,
    kNameFieldNumber = 1,
  };
  // repeated string allow_tokens = 2;
  int allow_tokens_size() const;
  private:
  int _internal_allow_tokens_size() const;
  public:
  void clear_allow_tokens();
  const std::string& allow_tokens(int index) const;
  std::string* mutable_allow_tokens(int index);
  void set_allow_tokens(int index, const std::string& value);
  void set_allow_tokens(int index, std::string&& value);
  void set_allow_tokens(int index, const char* value);
  void set_allow_tokens(int index, const char* value, size_t size);
  std::string* add_allow_tokens();
  void add_allow_tokens(const std::string& value);
  void add_allow_tokens(std::string&& value);
  void add_allow_tokens(const char* value);
  void add_allow_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& allow_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_allow_tokens();
  private:
  const std::string& _internal_allow_tokens(int index) const;
  std::string* _internal_add_allow_tokens();
  public:

  // repeated string deny_tokens = 3;
  int deny_tokens_size() const;
  private:
  int _internal_deny_tokens_size() const;
  public:
  void clear_deny_tokens();
  const std::string& deny_tokens(int index) const;
  std::string* mutable_deny_tokens(int index);
  void set_deny_tokens(int index, const std::string& value);
  void set_deny_tokens(int index, std::string&& value);
  void set_deny_tokens(int index, const char* value);
  void set_deny_tokens(int index, const char* value, size_t size);
  std::string* add_deny_tokens();
  void add_deny_tokens(const std::string& value);
  void add_deny_tokens(std::string&& value);
  void add_deny_tokens(const char* value);
  void add_deny_tokens(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& deny_tokens() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_deny_tokens();
  private:
  const std::string& _internal_deny_tokens(int index) const;
  std::string* _internal_add_deny_tokens();
  public:

  // string name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:google.cloud.aiplatform.container.v1beta1.Namespace)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> allow_tokens_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> deny_tokens_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MatchRequest

// string deployed_index_id = 1;
inline void MatchRequest::clear_deployed_index_id() {
  deployed_index_id_.ClearToEmpty();
}
inline const std::string& MatchRequest::deployed_index_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
  return _internal_deployed_index_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchRequest::set_deployed_index_id(ArgT0&& arg0, ArgT... args) {
 
 deployed_index_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
}
inline std::string* MatchRequest::mutable_deployed_index_id() {
  std::string* _s = _internal_mutable_deployed_index_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
  return _s;
}
inline const std::string& MatchRequest::_internal_deployed_index_id() const {
  return deployed_index_id_.Get();
}
inline void MatchRequest::_internal_set_deployed_index_id(const std::string& value) {
  
  deployed_index_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchRequest::_internal_mutable_deployed_index_id() {
  
  return deployed_index_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchRequest::release_deployed_index_id() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
  return deployed_index_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MatchRequest::set_allocated_deployed_index_id(std::string* deployed_index_id) {
  if (deployed_index_id != nullptr) {
    
  } else {
    
  }
  deployed_index_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployed_index_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.MatchRequest.deployed_index_id)
}

// repeated float float_val = 2;
inline int MatchRequest::_internal_float_val_size() const {
  return float_val_.size();
}
inline int MatchRequest::float_val_size() const {
  return _internal_float_val_size();
}
inline void MatchRequest::clear_float_val() {
  float_val_.Clear();
}
inline float MatchRequest::_internal_float_val(int index) const {
  return float_val_.Get(index);
}
inline float MatchRequest::float_val(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
  return _internal_float_val(index);
}
inline void MatchRequest::set_float_val(int index, float value) {
  float_val_.Set(index, value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
}
inline void MatchRequest::_internal_add_float_val(float value) {
  float_val_.Add(value);
}
inline void MatchRequest::add_float_val(float value) {
  _internal_add_float_val(value);
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MatchRequest::_internal_float_val() const {
  return float_val_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MatchRequest::float_val() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
  return _internal_float_val();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MatchRequest::_internal_mutable_float_val() {
  return &float_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MatchRequest::mutable_float_val() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.MatchRequest.float_val)
  return _internal_mutable_float_val();
}

// int32 num_neighbors = 3;
inline void MatchRequest::clear_num_neighbors() {
  num_neighbors_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRequest::_internal_num_neighbors() const {
  return num_neighbors_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRequest::num_neighbors() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.num_neighbors)
  return _internal_num_neighbors();
}
inline void MatchRequest::_internal_set_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  num_neighbors_ = value;
}
inline void MatchRequest::set_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_num_neighbors(value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.num_neighbors)
}

// repeated .google.cloud.aiplatform.container.v1beta1.Namespace restricts = 4;
inline int MatchRequest::_internal_restricts_size() const {
  return restricts_.size();
}
inline int MatchRequest::restricts_size() const {
  return _internal_restricts_size();
}
inline void MatchRequest::clear_restricts() {
  restricts_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::Namespace* MatchRequest::mutable_restricts(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return restricts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace >*
MatchRequest::mutable_restricts() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return &restricts_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::Namespace& MatchRequest::_internal_restricts(int index) const {
  return restricts_.Get(index);
}
inline const ::google::cloud::aiplatform::container::v1beta1::Namespace& MatchRequest::restricts(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return _internal_restricts(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::Namespace* MatchRequest::_internal_add_restricts() {
  return restricts_.Add();
}
inline ::google::cloud::aiplatform::container::v1beta1::Namespace* MatchRequest::add_restricts() {
  ::google::cloud::aiplatform::container::v1beta1::Namespace* _add = _internal_add_restricts();
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::Namespace >&
MatchRequest::restricts() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.MatchRequest.restricts)
  return restricts_;
}

// int32 per_crowding_attribute_num_neighbors = 5;
inline void MatchRequest::clear_per_crowding_attribute_num_neighbors() {
  per_crowding_attribute_num_neighbors_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRequest::_internal_per_crowding_attribute_num_neighbors() const {
  return per_crowding_attribute_num_neighbors_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRequest::per_crowding_attribute_num_neighbors() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.per_crowding_attribute_num_neighbors)
  return _internal_per_crowding_attribute_num_neighbors();
}
inline void MatchRequest::_internal_set_per_crowding_attribute_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  per_crowding_attribute_num_neighbors_ = value;
}
inline void MatchRequest::set_per_crowding_attribute_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_per_crowding_attribute_num_neighbors(value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.per_crowding_attribute_num_neighbors)
}

// int32 approx_num_neighbors = 6;
inline void MatchRequest::clear_approx_num_neighbors() {
  approx_num_neighbors_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRequest::_internal_approx_num_neighbors() const {
  return approx_num_neighbors_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRequest::approx_num_neighbors() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.approx_num_neighbors)
  return _internal_approx_num_neighbors();
}
inline void MatchRequest::_internal_set_approx_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  approx_num_neighbors_ = value;
}
inline void MatchRequest::set_approx_num_neighbors(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_approx_num_neighbors(value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.approx_num_neighbors)
}

// int32 leaf_nodes_to_search_percent_override = 7;
inline void MatchRequest::clear_leaf_nodes_to_search_percent_override() {
  leaf_nodes_to_search_percent_override_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRequest::_internal_leaf_nodes_to_search_percent_override() const {
  return leaf_nodes_to_search_percent_override_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 MatchRequest::leaf_nodes_to_search_percent_override() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchRequest.leaf_nodes_to_search_percent_override)
  return _internal_leaf_nodes_to_search_percent_override();
}
inline void MatchRequest::_internal_set_leaf_nodes_to_search_percent_override(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  leaf_nodes_to_search_percent_override_ = value;
}
inline void MatchRequest::set_leaf_nodes_to_search_percent_override(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_leaf_nodes_to_search_percent_override(value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchRequest.leaf_nodes_to_search_percent_override)
}

// -------------------------------------------------------------------

// MatchResponse_Neighbor

// string id = 1;
inline void MatchResponse_Neighbor::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& MatchResponse_Neighbor::id() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MatchResponse_Neighbor::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
}
inline std::string* MatchResponse_Neighbor::mutable_id() {
  std::string* _s = _internal_mutable_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
  return _s;
}
inline const std::string& MatchResponse_Neighbor::_internal_id() const {
  return id_.Get();
}
inline void MatchResponse_Neighbor::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MatchResponse_Neighbor::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MatchResponse_Neighbor::release_id() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MatchResponse_Neighbor::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.id)
}

// double distance = 2;
inline void MatchResponse_Neighbor::clear_distance() {
  distance_ = 0;
}
inline double MatchResponse_Neighbor::_internal_distance() const {
  return distance_;
}
inline double MatchResponse_Neighbor::distance() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.distance)
  return _internal_distance();
}
inline void MatchResponse_Neighbor::_internal_set_distance(double value) {
  
  distance_ = value;
}
inline void MatchResponse_Neighbor::set_distance(double value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor.distance)
}

// -------------------------------------------------------------------

// MatchResponse

// repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse.Neighbor neighbor = 1;
inline int MatchResponse::_internal_neighbor_size() const {
  return neighbor_.size();
}
inline int MatchResponse::neighbor_size() const {
  return _internal_neighbor_size();
}
inline void MatchResponse::clear_neighbor() {
  neighbor_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* MatchResponse::mutable_neighbor(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return neighbor_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >*
MatchResponse::mutable_neighbor() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return &neighbor_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor& MatchResponse::_internal_neighbor(int index) const {
  return neighbor_.Get(index);
}
inline const ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor& MatchResponse::neighbor(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return _internal_neighbor(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* MatchResponse::_internal_add_neighbor() {
  return neighbor_.Add();
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* MatchResponse::add_neighbor() {
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor* _add = _internal_add_neighbor();
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse_Neighbor >&
MatchResponse::neighbor() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.MatchResponse.neighbor)
  return neighbor_;
}

// -------------------------------------------------------------------

// BatchMatchRequest_BatchMatchRequestPerIndex

// string deployed_index_id = 1;
inline void BatchMatchRequest_BatchMatchRequestPerIndex::clear_deployed_index_id() {
  deployed_index_id_.ClearToEmpty();
}
inline const std::string& BatchMatchRequest_BatchMatchRequestPerIndex::deployed_index_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
  return _internal_deployed_index_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchMatchRequest_BatchMatchRequestPerIndex::set_deployed_index_id(ArgT0&& arg0, ArgT... args) {
 
 deployed_index_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
}
inline std::string* BatchMatchRequest_BatchMatchRequestPerIndex::mutable_deployed_index_id() {
  std::string* _s = _internal_mutable_deployed_index_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
  return _s;
}
inline const std::string& BatchMatchRequest_BatchMatchRequestPerIndex::_internal_deployed_index_id() const {
  return deployed_index_id_.Get();
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::_internal_set_deployed_index_id(const std::string& value) {
  
  deployed_index_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BatchMatchRequest_BatchMatchRequestPerIndex::_internal_mutable_deployed_index_id() {
  
  return deployed_index_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BatchMatchRequest_BatchMatchRequestPerIndex::release_deployed_index_id() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
  return deployed_index_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::set_allocated_deployed_index_id(std::string* deployed_index_id) {
  if (deployed_index_id != nullptr) {
    
  } else {
    
  }
  deployed_index_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployed_index_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.deployed_index_id)
}

// repeated .google.cloud.aiplatform.container.v1beta1.MatchRequest requests = 2;
inline int BatchMatchRequest_BatchMatchRequestPerIndex::_internal_requests_size() const {
  return requests_.size();
}
inline int BatchMatchRequest_BatchMatchRequestPerIndex::requests_size() const {
  return _internal_requests_size();
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::clear_requests() {
  requests_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchRequest* BatchMatchRequest_BatchMatchRequestPerIndex::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >*
BatchMatchRequest_BatchMatchRequestPerIndex::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return &requests_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::MatchRequest& BatchMatchRequest_BatchMatchRequestPerIndex::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::google::cloud::aiplatform::container::v1beta1::MatchRequest& BatchMatchRequest_BatchMatchRequestPerIndex::requests(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return _internal_requests(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchRequest* BatchMatchRequest_BatchMatchRequestPerIndex::_internal_add_requests() {
  return requests_.Add();
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchRequest* BatchMatchRequest_BatchMatchRequestPerIndex::add_requests() {
  ::google::cloud::aiplatform::container::v1beta1::MatchRequest* _add = _internal_add_requests();
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchRequest >&
BatchMatchRequest_BatchMatchRequestPerIndex::requests() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.requests)
  return requests_;
}

// int32 low_level_batch_size = 3;
inline void BatchMatchRequest_BatchMatchRequestPerIndex::clear_low_level_batch_size() {
  low_level_batch_size_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatchMatchRequest_BatchMatchRequestPerIndex::_internal_low_level_batch_size() const {
  return low_level_batch_size_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BatchMatchRequest_BatchMatchRequestPerIndex::low_level_batch_size() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.low_level_batch_size)
  return _internal_low_level_batch_size();
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::_internal_set_low_level_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  low_level_batch_size_ = value;
}
inline void BatchMatchRequest_BatchMatchRequestPerIndex::set_low_level_batch_size(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_low_level_batch_size(value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex.low_level_batch_size)
}

// -------------------------------------------------------------------

// BatchMatchRequest

// repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.BatchMatchRequestPerIndex requests = 1;
inline int BatchMatchRequest::_internal_requests_size() const {
  return requests_.size();
}
inline int BatchMatchRequest::requests_size() const {
  return _internal_requests_size();
}
inline void BatchMatchRequest::clear_requests() {
  requests_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* BatchMatchRequest::mutable_requests(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return requests_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >*
BatchMatchRequest::mutable_requests() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return &requests_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex& BatchMatchRequest::_internal_requests(int index) const {
  return requests_.Get(index);
}
inline const ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex& BatchMatchRequest::requests(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return _internal_requests(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* BatchMatchRequest::_internal_add_requests() {
  return requests_.Add();
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* BatchMatchRequest::add_requests() {
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex* _add = _internal_add_requests();
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchRequest_BatchMatchRequestPerIndex >&
BatchMatchRequest::requests() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.BatchMatchRequest.requests)
  return requests_;
}

// -------------------------------------------------------------------

// BatchMatchResponse_BatchMatchResponsePerIndex

// string deployed_index_id = 1;
inline void BatchMatchResponse_BatchMatchResponsePerIndex::clear_deployed_index_id() {
  deployed_index_id_.ClearToEmpty();
}
inline const std::string& BatchMatchResponse_BatchMatchResponsePerIndex::deployed_index_id() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
  return _internal_deployed_index_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BatchMatchResponse_BatchMatchResponsePerIndex::set_deployed_index_id(ArgT0&& arg0, ArgT... args) {
 
 deployed_index_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
}
inline std::string* BatchMatchResponse_BatchMatchResponsePerIndex::mutable_deployed_index_id() {
  std::string* _s = _internal_mutable_deployed_index_id();
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
  return _s;
}
inline const std::string& BatchMatchResponse_BatchMatchResponsePerIndex::_internal_deployed_index_id() const {
  return deployed_index_id_.Get();
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::_internal_set_deployed_index_id(const std::string& value) {
  
  deployed_index_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BatchMatchResponse_BatchMatchResponsePerIndex::_internal_mutable_deployed_index_id() {
  
  return deployed_index_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BatchMatchResponse_BatchMatchResponsePerIndex::release_deployed_index_id() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
  return deployed_index_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::set_allocated_deployed_index_id(std::string* deployed_index_id) {
  if (deployed_index_id != nullptr) {
    
  } else {
    
  }
  deployed_index_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deployed_index_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.deployed_index_id)
}

// repeated .google.cloud.aiplatform.container.v1beta1.MatchResponse responses = 2;
inline int BatchMatchResponse_BatchMatchResponsePerIndex::_internal_responses_size() const {
  return responses_.size();
}
inline int BatchMatchResponse_BatchMatchResponsePerIndex::responses_size() const {
  return _internal_responses_size();
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::clear_responses() {
  responses_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse* BatchMatchResponse_BatchMatchResponsePerIndex::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >*
BatchMatchResponse_BatchMatchResponsePerIndex::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return &responses_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::MatchResponse& BatchMatchResponse_BatchMatchResponsePerIndex::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::google::cloud::aiplatform::container::v1beta1::MatchResponse& BatchMatchResponse_BatchMatchResponsePerIndex::responses(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return _internal_responses(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse* BatchMatchResponse_BatchMatchResponsePerIndex::_internal_add_responses() {
  return responses_.Add();
}
inline ::google::cloud::aiplatform::container::v1beta1::MatchResponse* BatchMatchResponse_BatchMatchResponsePerIndex::add_responses() {
  ::google::cloud::aiplatform::container::v1beta1::MatchResponse* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::MatchResponse >&
BatchMatchResponse_BatchMatchResponsePerIndex::responses() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.responses)
  return responses_;
}

// .google.rpc.Status status = 3;
inline bool BatchMatchResponse_BatchMatchResponsePerIndex::_internal_has_status() const {
  return this != internal_default_instance() && status_ != nullptr;
}
inline bool BatchMatchResponse_BatchMatchResponsePerIndex::has_status() const {
  return _internal_has_status();
}
inline const ::google::rpc::Status& BatchMatchResponse_BatchMatchResponsePerIndex::_internal_status() const {
  const ::google::rpc::Status* p = status_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::rpc::Status&>(
      ::google::rpc::_Status_default_instance_);
}
inline const ::google::rpc::Status& BatchMatchResponse_BatchMatchResponsePerIndex::status() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.status)
  return _internal_status();
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::unsafe_arena_set_allocated_status(
    ::google::rpc::Status* status) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  status_ = status;
  if (status) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.status)
}
inline ::google::rpc::Status* BatchMatchResponse_BatchMatchResponsePerIndex::release_status() {
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::google::rpc::Status* BatchMatchResponse_BatchMatchResponsePerIndex::unsafe_arena_release_status() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.status)
  
  ::google::rpc::Status* temp = status_;
  status_ = nullptr;
  return temp;
}
inline ::google::rpc::Status* BatchMatchResponse_BatchMatchResponsePerIndex::_internal_mutable_status() {
  
  if (status_ == nullptr) {
    auto* p = CreateMaybeMessage<::google::rpc::Status>(GetArenaForAllocation());
    status_ = p;
  }
  return status_;
}
inline ::google::rpc::Status* BatchMatchResponse_BatchMatchResponsePerIndex::mutable_status() {
  ::google::rpc::Status* _msg = _internal_mutable_status();
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.status)
  return _msg;
}
inline void BatchMatchResponse_BatchMatchResponsePerIndex::set_allocated_status(::google::rpc::Status* status) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(status_);
  }
  if (status) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(status));
    if (message_arena != submessage_arena) {
      status = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    
  } else {
    
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex.status)
}

// -------------------------------------------------------------------

// BatchMatchResponse

// repeated .google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.BatchMatchResponsePerIndex responses = 1;
inline int BatchMatchResponse::_internal_responses_size() const {
  return responses_.size();
}
inline int BatchMatchResponse::responses_size() const {
  return _internal_responses_size();
}
inline void BatchMatchResponse::clear_responses() {
  responses_.Clear();
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* BatchMatchResponse::mutable_responses(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return responses_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >*
BatchMatchResponse::mutable_responses() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return &responses_;
}
inline const ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex& BatchMatchResponse::_internal_responses(int index) const {
  return responses_.Get(index);
}
inline const ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex& BatchMatchResponse::responses(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return _internal_responses(index);
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* BatchMatchResponse::_internal_add_responses() {
  return responses_.Add();
}
inline ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* BatchMatchResponse::add_responses() {
  ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex* _add = _internal_add_responses();
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::google::cloud::aiplatform::container::v1beta1::BatchMatchResponse_BatchMatchResponsePerIndex >&
BatchMatchResponse::responses() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.BatchMatchResponse.responses)
  return responses_;
}

// -------------------------------------------------------------------

// Namespace

// string name = 1;
inline void Namespace::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Namespace::name() const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.Namespace.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Namespace::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.name)
}
inline std::string* Namespace::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.name)
  return _s;
}
inline const std::string& Namespace::_internal_name() const {
  return name_.Get();
}
inline void Namespace::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Namespace::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Namespace::release_name() {
  // @@protoc_insertion_point(field_release:google.cloud.aiplatform.container.v1beta1.Namespace.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Namespace::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:google.cloud.aiplatform.container.v1beta1.Namespace.name)
}

// repeated string allow_tokens = 2;
inline int Namespace::_internal_allow_tokens_size() const {
  return allow_tokens_.size();
}
inline int Namespace::allow_tokens_size() const {
  return _internal_allow_tokens_size();
}
inline void Namespace::clear_allow_tokens() {
  allow_tokens_.Clear();
}
inline std::string* Namespace::add_allow_tokens() {
  std::string* _s = _internal_add_allow_tokens();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return _s;
}
inline const std::string& Namespace::_internal_allow_tokens(int index) const {
  return allow_tokens_.Get(index);
}
inline const std::string& Namespace::allow_tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return _internal_allow_tokens(index);
}
inline std::string* Namespace::mutable_allow_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return allow_tokens_.Mutable(index);
}
inline void Namespace::set_allow_tokens(int index, const std::string& value) {
  allow_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline void Namespace::set_allow_tokens(int index, std::string&& value) {
  allow_tokens_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline void Namespace::set_allow_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allow_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline void Namespace::set_allow_tokens(int index, const char* value, size_t size) {
  allow_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline std::string* Namespace::_internal_add_allow_tokens() {
  return allow_tokens_.Add();
}
inline void Namespace::add_allow_tokens(const std::string& value) {
  allow_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline void Namespace::add_allow_tokens(std::string&& value) {
  allow_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline void Namespace::add_allow_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  allow_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline void Namespace::add_allow_tokens(const char* value, size_t size) {
  allow_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Namespace::allow_tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return allow_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Namespace::mutable_allow_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.Namespace.allow_tokens)
  return &allow_tokens_;
}

// repeated string deny_tokens = 3;
inline int Namespace::_internal_deny_tokens_size() const {
  return deny_tokens_.size();
}
inline int Namespace::deny_tokens_size() const {
  return _internal_deny_tokens_size();
}
inline void Namespace::clear_deny_tokens() {
  deny_tokens_.Clear();
}
inline std::string* Namespace::add_deny_tokens() {
  std::string* _s = _internal_add_deny_tokens();
  // @@protoc_insertion_point(field_add_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return _s;
}
inline const std::string& Namespace::_internal_deny_tokens(int index) const {
  return deny_tokens_.Get(index);
}
inline const std::string& Namespace::deny_tokens(int index) const {
  // @@protoc_insertion_point(field_get:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return _internal_deny_tokens(index);
}
inline std::string* Namespace::mutable_deny_tokens(int index) {
  // @@protoc_insertion_point(field_mutable:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return deny_tokens_.Mutable(index);
}
inline void Namespace::set_deny_tokens(int index, const std::string& value) {
  deny_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline void Namespace::set_deny_tokens(int index, std::string&& value) {
  deny_tokens_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline void Namespace::set_deny_tokens(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deny_tokens_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline void Namespace::set_deny_tokens(int index, const char* value, size_t size) {
  deny_tokens_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline std::string* Namespace::_internal_add_deny_tokens() {
  return deny_tokens_.Add();
}
inline void Namespace::add_deny_tokens(const std::string& value) {
  deny_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline void Namespace::add_deny_tokens(std::string&& value) {
  deny_tokens_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline void Namespace::add_deny_tokens(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  deny_tokens_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline void Namespace::add_deny_tokens(const char* value, size_t size) {
  deny_tokens_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Namespace::deny_tokens() const {
  // @@protoc_insertion_point(field_list:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return deny_tokens_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Namespace::mutable_deny_tokens() {
  // @@protoc_insertion_point(field_mutable_list:google.cloud.aiplatform.container.v1beta1.Namespace.deny_tokens)
  return &deny_tokens_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace v1beta1
}  // namespace container
}  // namespace aiplatform
}  // namespace cloud
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_thirdparty_2fgoogleapis_2fmatch_5fservice_2eproto
